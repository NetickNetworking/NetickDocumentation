{
  "README.html": {
    "href": "README.html",
    "title": "| Netick Networking Engine",
    "summary": "Documentation This repository hosts the Documentation for Netick. It does not host the source code of Netick itself."
  },
  "api/Netick.Accumulator.html": {
    "href": "api/Netick.Accumulator.html",
    "title": "Class Accumulator | Netick Networking Engine",
    "summary": "Class Accumulator Namespace Netick Assembly Netick.dll public sealed class Accumulator Inheritance object Accumulator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Accumulator(int) public Accumulator(int windowSize) Parameters windowSize int Properties Avg public float Avg { get; } Property Value float Latest public float Latest { get; } Property Value float Methods Add(int) public void Add(int amount) Parameters amount int Add(float) public void Add(float amount) Parameters amount float Reset() public void Reset() Stop() public void Stop() Update(float) public void Update(float delta) Parameters delta float"
  },
  "api/Netick.AdaptiveRemoteInterpolation.html": {
    "href": "api/Netick.AdaptiveRemoteInterpolation.html",
    "title": "Class AdaptiveRemoteInterpolation | Netick Networking Engine",
    "summary": "Class AdaptiveRemoteInterpolation Namespace Netick Assembly Netick.dll public sealed class AdaptiveRemoteInterpolation : Interpolation Inheritance object Interpolation AdaptiveRemoteInterpolation Inherited Members Interpolation.FromSnapshot Interpolation.ToSnapshot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Alpha public override float Alpha { get; } Property Value float BufferTime public float BufferTime { get; } Property Value float From public override Tick From { get; } Property Value Tick HasSnapshots public override bool HasSnapshots { get; } Property Value bool Time Time in seconds. public override float Time { get; } Property Value float To public override Tick To { get; } Property Value Tick Methods Reset() public void Reset()"
  },
  "api/Netick.Allocator.MemoryPool.html": {
    "href": "api/Netick.Allocator.MemoryPool.html",
    "title": "Struct Allocator.MemoryPool | Netick Networking Engine",
    "summary": "Struct Allocator.MemoryPool Namespace Netick Assembly Netick.dll public struct Allocator.MemoryPool Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ByteSize public long ByteSize Field Value long Ptr public void* Ptr Field Value void*"
  },
  "api/Netick.Allocator.html": {
    "href": "api/Netick.Allocator.html",
    "title": "Class Allocator | Netick Networking Engine",
    "summary": "Class Allocator Namespace Netick Assembly Netick.dll public sealed class Allocator Inheritance object Allocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Pools public List<Allocator.MemoryPool> Pools Field Value List<Allocator.MemoryPool> Methods AddNewPool() public void AddNewPool() CopyTo(Allocator) public void CopyTo(Allocator dest) Parameters dest Allocator ~Allocator() protected ~Allocator() Free(void*) public void Free(void* ptr) Parameters ptr void* Malloc(ulong, out int, out long) public void* Malloc(ulong size, out int poolIndex, out long offset) Parameters size ulong poolIndex int offset long Returns void* SafeMalloc(ulong, out int, out long) public void* SafeMalloc(ulong size, out int poolIndex, out long offset) Parameters size ulong poolIndex int offset long Returns void*"
  },
  "api/Netick.AoIQuery.html": {
    "href": "api/Netick.AoIQuery.html",
    "title": "Struct AoIQuery | Netick Networking Engine",
    "summary": "Struct AoIQuery Namespace Netick Assembly Netick.dll public struct AoIQuery Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Bounds public NetickBounds Bounds Field Value NetickBounds IsBox public bool IsBox Field Value bool"
  },
  "api/Netick.BadPacketException.html": {
    "href": "api/Netick.BadPacketException.html",
    "title": "Class BadPacketException | Netick Networking Engine",
    "summary": "Class BadPacketException Namespace Netick Assembly Netick.dll public sealed class BadPacketException : Exception, ISerializable Inheritance object Exception BadPacketException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object)"
  },
  "api/Netick.BitBuffer.html": {
    "href": "api/Netick.BitBuffer.html",
    "title": "Class BitBuffer | Netick Networking Engine",
    "summary": "Class BitBuffer Namespace Netick Assembly Netick.dll public sealed class BitBuffer Inheritance object BitBuffer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors BitBuffer(int, bool) public BitBuffer(int capacity = 875, bool createChunks = true) Parameters capacity int createChunks bool Fields ReadPosition public int ReadPosition Field Value int WritePos public int WritePos Field Value int Properties IsFinished public bool IsFinished { get; } Property Value bool Methods Add(int, uint) public void Add(int numBits, uint value) Parameters numBits int value uint AddBool(bool) public BitBuffer AddBool(bool value) Parameters value bool Returns BitBuffer AddByte(byte) public BitBuffer AddByte(byte value) Parameters value byte Returns BitBuffer AddInt(int) public void AddInt(int value) Parameters value int AddInt4(int) public void AddInt4(int value) Parameters value int AddLong(long) public BitBuffer AddLong(long value) Parameters value long Returns BitBuffer AddShort(short) public BitBuffer AddShort(short value) Parameters value short Returns BitBuffer AddUInt(uint) public void AddUInt(uint value) Parameters value uint AddUInt4(uint) public void AddUInt4(uint value) Parameters value uint AddULong(ulong) public BitBuffer AddULong(ulong value) Parameters value ulong Returns BitBuffer AddUShort(ushort) public BitBuffer AddUShort(ushort value) Parameters value ushort Returns BitBuffer Clear() public void Clear() ~BitBuffer() protected ~BitBuffer() FlexAddUInt(uint, uint, uint, int) public void FlexAddUInt(uint value, uint x1, uint x2, int stepSize) Parameters value uint x1 uint x2 uint stepSize int FlexReadUInt_(uint, uint, int) public uint FlexReadUInt_(uint x1, uint x2, int stepSize) Parameters x1 uint x2 uint stepSize int Returns uint Insert(int, int, uint) public void Insert(int position, int numBits, uint value) Parameters position int numBits int value uint Length() public int Length() Returns int Peek(int) public uint Peek(int numBits) Parameters numBits int Returns uint PeekBool() public bool PeekBool() Returns bool PeekByte() public byte PeekByte() Returns byte PeekInt() public int PeekInt() Returns int PeekLong() public long PeekLong() Returns long PeekShort() public short PeekShort() Returns short PeekUInt() public uint PeekUInt() Returns uint PeekULong() public ulong PeekULong() Returns ulong PeekUShort() public ushort PeekUShort() Returns ushort Read(int) public uint Read(int numBits) Parameters numBits int Returns uint ReadBool() public bool ReadBool() Returns bool ReadByte() public byte ReadByte() Returns byte ReadInt() public int ReadInt() Returns int ReadInt4() public int ReadInt4() Returns int ReadLong() public long ReadLong() Returns long ReadShort() public short ReadShort() Returns short ReadUInt() public uint ReadUInt() Returns uint ReadUInt4() public uint ReadUInt4() Returns uint ReadULong() public ulong ReadULong() Returns ulong ReadUShort() public ushort ReadUShort() Returns ushort SetFrom(byte*, int, int) public void SetFrom(byte* source, int len, int bufferSize) Parameters source byte* len int bufferSize int"
  },
  "api/Netick.BroadPhaseFilter.html": {
    "href": "api/Netick.BroadPhaseFilter.html",
    "title": "Enum BroadPhaseFilter | Netick Networking Engine",
    "summary": "Enum BroadPhaseFilter Namespace Netick Assembly Netick.dll public enum BroadPhaseFilter Fields AreaOfInterest = 1 Custom = 2 None = 0"
  },
  "api/Netick.ChangedInfo.html": {
    "href": "api/Netick.ChangedInfo.html",
    "title": "Struct ChangedInfo | Netick Networking Engine",
    "summary": "Struct ChangedInfo Namespace Netick Assembly Netick.dll public struct ChangedInfo : IEquatable<ChangedInfo> Implements IEquatable<ChangedInfo> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Behaviour public INetickNetworkScript Behaviour Field Value INetickNetworkScript Methods Equals(ChangedInfo) public bool Equals(ChangedInfo other) Parameters other ChangedInfo Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetBehaviour<T>() public T GetBehaviour<T>() where T : INetickScript Returns T Type Parameters T GetHashCode() public override int GetHashCode() Returns int GetPreviousValue<T>() public T GetPreviousValue<T>() where T : unmanaged Returns T Type Parameters T"
  },
  "api/Netick.ChangedInfoExtension.html": {
    "href": "api/Netick.ChangedInfoExtension.html",
    "title": "Class ChangedInfoExtension | Netick Networking Engine",
    "summary": "Class ChangedInfoExtension Namespace Netick Assembly Netick.Unity.dll public static class ChangedInfoExtension Inheritance object ChangedInfoExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBehaviour<T>(ChangedInfo) public static T GetBehaviour<T>(this ChangedInfo change) where T : NetworkBehaviour Parameters change ChangedInfo Returns T Type Parameters T"
  },
  "api/Netick.ChangedMethod.html": {
    "href": "api/Netick.ChangedMethod.html",
    "title": "Struct ChangedMethod | Netick Networking Engine",
    "summary": "Struct ChangedMethod Namespace Netick Assembly Netick.dll public struct ChangedMethod Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors ChangedMethod(int, int, int, OnChangedEvent) public ChangedMethod(int propertyIndex, int propertySize, int behaviourIndex, OnChangedEvent evnt) Parameters propertyIndex int propertySize int behaviourIndex int evnt OnChangedEvent"
  },
  "api/Netick.CircularList-1.html": {
    "href": "api/Netick.CircularList-1.html",
    "title": "Class CircularList<T> | Netick Networking Engine",
    "summary": "Class CircularList<T> Namespace Netick Assembly Netick.dll public class CircularList<T> Type Parameters T Inheritance object CircularList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CircularList(int) public CircularList(int capacity) Parameters capacity int Properties Capacity public int Capacity { get; } Property Value int Count public int Count { get; } Property Value int HeadIndex public int HeadIndex { get; } Property Value int this[int] public T this[int i] { get; set; } Parameters i int Property Value T Methods Add(T) public void Add(T item) Parameters item T Clear() public void Clear() GetArray() public T[] GetArray() Returns T[] Reset(int, int) public void Reset(int headIndex, int count) Parameters headIndex int count int"
  },
  "api/Netick.Client.html": {
    "href": "api/Netick.Client.html",
    "title": "Class Client | Netick Networking Engine",
    "summary": "Class Client Namespace Netick Assembly Netick.dll public class Client : NetworkPeer Inheritance object NetworkPlayer NetworkPeer Client Inherited Members NetworkPeer.Transport NetworkPeer.OnConnectRequest(byte[], int, IEndPoint) NetworkPlayer.Engine NetworkPlayer.AddInterestGroup(int) NetworkPlayer.AddInterestGroup(InterestManagementGroup) NetworkPlayer.AddInterestBoxArea(NetickBounds) NetworkPlayer.Position NetworkPlayer.ViewDirection NetworkPlayer.Distance NetworkPlayer.FieldOfViewAngle NetworkPlayer.PlayerId NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(NetickEngine, NetworkTransport) public Client(NetickEngine engine, NetworkTransport transport) Parameters engine NetickEngine transport NetworkTransport Fields ConnectedServer public readonly ClientConnection ConnectedServer Field Value ClientConnection Peer public readonly NetworkPeer Peer Field Value NetworkPeer Properties InKBps public override float InKBps { get; } Property Value float IsConnected public bool IsConnected { get; } Property Value bool OutKBps public override float OutKBps { get; } Property Value float Methods Connect(int, string, byte[], int) public void Connect(int port, string ip, byte[] connectionData = null, int connectionDataLength = 0) Parameters port int ip string connectionData byte[] connectionDataLength int Disconnect() public void Disconnect() OnConnectFailed(ConnectionFailedReason) public override void OnConnectFailed(ConnectionFailedReason reason) Parameters reason ConnectionFailedReason OnConnected(TransportConnection) public override void OnConnected(TransportConnection peer) Parameters peer TransportConnection OnDisconnected(TransportConnection, TransportDisconnectReason) public override void OnDisconnected(TransportConnection peer, TransportDisconnectReason transportDisconnectReason) Parameters peer TransportConnection transportDisconnectReason TransportDisconnectReason Receive(TransportConnection, BitBuffer, TransportDeliveryMethod) public override void Receive(TransportConnection connection, BitBuffer reader, TransportDeliveryMethod transportDeliveryMethod) Parameters connection TransportConnection reader BitBuffer transportDeliveryMethod TransportDeliveryMethod"
  },
  "api/Netick.ClientConnection.html": {
    "href": "api/Netick.ClientConnection.html",
    "title": "Class ClientConnection | Netick Networking Engine",
    "summary": "Class ClientConnection Namespace Netick Assembly Netick.dll public sealed class ClientConnection : NetworkConnection Inheritance object NetworkPlayer NetworkConnection ClientConnection Inherited Members NetworkConnection.RemoteUserData NetworkConnection.LocalUserData NetworkConnection.MaxOutgoingDataPerTickInBytes NetworkConnection.RTT NetworkConnection.SendData(byte, byte*, int, TransportDeliveryMethod) NetworkConnection.SendData(byte, byte[], int, TransportDeliveryMethod) NetworkConnection.Id NetworkConnection.ReplicateEntities NetworkConnection.EndPoint NetworkConnection.TransportConnection NetworkConnection.BytesIn NetworkConnection.BytesOut NetworkConnection.InPacketLossBurst NetworkConnection.InPacketLoss NetworkConnection.OutPacketLoss NetworkPlayer.Engine NetworkPlayer.AddInterestGroup(int) NetworkPlayer.AddInterestGroup(InterestManagementGroup) NetworkPlayer.AddInterestBoxArea(NetickBounds) NetworkPlayer.Position NetworkPlayer.ViewDirection NetworkPlayer.Distance NetworkPlayer.FieldOfViewAngle NetworkPlayer.PlayerId NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ClientConnection(short, NetickEngine) public ClientConnection(short clientIndex, NetickEngine engine) Parameters clientIndex short engine NetickEngine"
  },
  "api/Netick.ClientData.html": {
    "href": "api/Netick.ClientData.html",
    "title": "Class ClientData | Netick Networking Engine",
    "summary": "Class ClientData Namespace Netick Assembly Netick.dll public class ClientData Inheritance object ClientData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CurrentInput public SimulationInput CurrentInput Field Value SimulationInput"
  },
  "api/Netick.ClientReplicatorData.html": {
    "href": "api/Netick.ClientReplicatorData.html",
    "title": "Struct ClientReplicatorData | Netick Networking Engine",
    "summary": "Struct ClientReplicatorData Namespace Netick Assembly Netick.dll public struct ClientReplicatorData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Distance public float Distance Field Value float FieldOfViewAngle public float FieldOfViewAngle Field Value float Position public Vector3 Position Field Value Vector3 ViewDirection public Vector3 ViewDirection Field Value Vector3"
  },
  "api/Netick.ClientSimulation.html": {
    "href": "api/Netick.ClientSimulation.html",
    "title": "Class ClientSimulation | Netick Networking Engine",
    "summary": "Class ClientSimulation Namespace Netick Assembly Netick.dll public sealed class ClientSimulation : Simulation Inheritance object Simulation ClientSimulation Inherited Members Simulation.UnlinkedEntities Simulation.FetchInputLocal<T>(out T, ref bool, int) Simulation.GetInput<T>(int) Simulation.SetInput<T>(T, int) Simulation.GetEntityByWorldIndex(int) Simulation.RemoveFromNetworkLoop(Entity) Simulation.ClientAddUnlinkedEntity(Entity, int, int) Simulation.CreateAndLinkEntityLocal(INetickEntity) Simulation.CreateEntity(int) Simulation.LinkEntity(INetickEntity, Entity) Simulation.CurrentInput object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields InterestGroups public HashSet<InterestManagementGroup> InterestGroups Field Value HashSet<InterestManagementGroup> Properties IsLastTickFull public bool IsLastTickFull { get; } Property Value bool IsResimulating public bool IsResimulating { get; set; } Property Value bool ResimulationStep public int ResimulationStep { get; set; } Property Value int Resimulatios public int Resimulatios { get; set; } Property Value int SnapshotSize public FloatStats SnapshotSize { get; } Property Value FloatStats"
  },
  "api/Netick.ComponentExtensions.html": {
    "href": "api/Netick.ComponentExtensions.html",
    "title": "Class ComponentExtensions | Netick Networking Engine",
    "summary": "Class ComponentExtensions Namespace Netick Assembly Netick.Unity.dll public static class ComponentExtensions Inheritance object ComponentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NetworkPlay(AudioSource, NetworkSandbox, ulong) public static void NetworkPlay(this AudioSource audioSource, NetworkSandbox sandbox, ulong delay = 0) Parameters audioSource AudioSource sandbox NetworkSandbox delay ulong NetworkPlayOneShot(AudioSource, NetworkSandbox, AudioClip, float) public static void NetworkPlayOneShot(this AudioSource audioSource, NetworkSandbox sandbox, AudioClip clip, float volumeScale = 1) Parameters audioSource AudioSource sandbox NetworkSandbox clip AudioClip volumeScale float NetworkPlayScheduled(AudioSource, NetworkSandbox, double) public static void NetworkPlayScheduled(this AudioSource audioSource, NetworkSandbox sandbox, double time) Parameters audioSource AudioSource sandbox NetworkSandbox time double SetEnabled(Component, NetworkSandbox, bool) public static void SetEnabled(this Component comp, NetworkSandbox sandbox, bool value) Parameters comp Component sandbox NetworkSandbox value bool"
  },
  "api/Netick.Connection.html": {
    "href": "api/Netick.Connection.html",
    "title": "Class Connection | Netick Networking Engine",
    "summary": "Class Connection Namespace Netick Assembly Netick.dll public class Connection Inheritance object Connection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Connection(CustomizableSocketTransport, int) public Connection(CustomizableSocketTransport transprt, int index) Parameters transprt CustomizableSocketTransport index int Properties Address public IEndPoint Address { get; } Property Value IEndPoint Id public int Id { get; } Property Value int Mtu public int Mtu { get; } Property Value int Transprt public CustomizableSocketTransport Transprt { get; } Property Value CustomizableSocketTransport Methods Send(BitBuffer) public void Send(BitBuffer buffer) Parameters buffer BitBuffer Send(IntPtr, int) public void Send(IntPtr ptr, int len) Parameters ptr IntPtr len int"
  },
  "api/Netick.ConnectionFailedReason.html": {
    "href": "api/Netick.ConnectionFailedReason.html",
    "title": "Enum ConnectionFailedReason | Netick Networking Engine",
    "summary": "Enum ConnectionFailedReason Namespace Netick Assembly Netick.dll public enum ConnectionFailedReason Fields Refused = 1 Timeout = 0"
  },
  "api/Netick.ConsoleLogger.html": {
    "href": "api/Netick.ConsoleLogger.html",
    "title": "Class ConsoleLogger | Netick Networking Engine",
    "summary": "Class ConsoleLogger Namespace Netick Assembly Netick.dll public class ConsoleLogger : INetickLogger Inheritance object ConsoleLogger Implements INetickLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ConsoleLogger() public ConsoleLogger() Methods Log(object) public void Log(object message) Parameters message object LogError(object) public void LogError(object message) Parameters message object LogException(object, object) public void LogException(object message, object targetScript) Parameters message object targetScript object LogWarning(object) public void LogWarning(object message) Parameters message object"
  },
  "api/Netick.CustomizableSocketTransport.html": {
    "href": "api/Netick.CustomizableSocketTransport.html",
    "title": "Class CustomizableSocketTransport | Netick Networking Engine",
    "summary": "Class CustomizableSocketTransport Namespace Netick Assembly Netick.dll public class CustomizableSocketTransport Inheritance object CustomizableSocketTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CustomizableSocketTransport(INetickSocket, int) public CustomizableSocketTransport(INetickSocket socket, int maxConnections = 64) Parameters socket INetickSocket maxConnections int Fields MaxConnections public readonly int MaxConnections Field Value int TickPeriod public readonly double TickPeriod Field Value double Timeout public double Timeout Field Value double Properties IsServer public bool IsServer { get; } Property Value bool Methods Connect(string, int, byte[], int) public void Connect(string ip, int port, byte[] connectRequest, int connectRequestSizeBytes) Parameters ip string port int connectRequest byte[] connectRequestSizeBytes int ~CustomizableSocketTransport() protected ~CustomizableSocketTransport() Kick(Connection) public void Kick(Connection connection) Parameters connection Connection SendPayload(Connection, BitBuffer) public void SendPayload(Connection connection, BitBuffer buffer) Parameters connection Connection buffer BitBuffer SendPayload(Connection, IntPtr, int) public void SendPayload(Connection connection, IntPtr ptr, int size) Parameters connection Connection ptr IntPtr size int Shutdown() public void Shutdown() StartClient(int, int) public void StartClient(int sendBufferSize, int receiveBufferSize) Parameters sendBufferSize int receiveBufferSize int StartServer(int, int, int) public void StartServer(int port, int sendBufferSize, int receiveBufferSize) Parameters port int sendBufferSize int receiveBufferSize int Stop() public void Stop() Update() public void Update() Events NetworkReceiveEvent public event OnNetworkReceive NetworkReceiveEvent Event Type OnNetworkReceive OnConnectFailedEvent public event OnConnectFailed OnConnectFailedEvent Event Type OnConnectFailed OnConnectionRequestEvent public event OnConnectionRequest OnConnectionRequestEvent Event Type OnConnectionRequest PeerConnectedEvent public event OnPeerConnected PeerConnectedEvent Event Type OnPeerConnected PeerDisconnectedEvent public event OnPeerDisconnected PeerDisconnectedEvent Event Type OnPeerDisconnected"
  },
  "api/Netick.DataAccumulator.html": {
    "href": "api/Netick.DataAccumulator.html",
    "title": "Class DataAccumulator | Netick Networking Engine",
    "summary": "Class DataAccumulator Namespace Netick Assembly Netick.dll public sealed class DataAccumulator Inheritance object DataAccumulator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors DataAccumulator(int) public DataAccumulator(int windowSize) Parameters windowSize int Properties Avg public float Avg { get; } Property Value float Latest public float Latest { get; } Property Value float Methods Add(int) public void Add(int amount) Parameters amount int Add(float) public void Add(float amount) Parameters amount float Reset() public void Reset() Stop() public void Stop() Update(float) public void Update(float delta) Parameters delta float"
  },
  "api/Netick.DefaultAllocator.html": {
    "href": "api/Netick.DefaultAllocator.html",
    "title": "Class DefaultAllocator | Netick Networking Engine",
    "summary": "Class DefaultAllocator Namespace Netick Assembly Netick.dll public class DefaultAllocator : IMemoryAllocator Inheritance object DefaultAllocator Implements IMemoryAllocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DefaultAllocator() public DefaultAllocator() Methods Clear(void*, long) public void Clear(void* ptr, long sizeBytes) Parameters ptr void* sizeBytes long Cmp(void*, void*, long) public bool Cmp(void* ptr1, void* ptr2, long sizeBytes) Parameters ptr1 void* ptr2 void* sizeBytes long Returns bool Copy(void*, void*, long) public void Copy(void* dest, void* source, long sizeBytes) Parameters dest void* source void* sizeBytes long Free(void*) public void Free(void* ptr) Parameters ptr void* Malloc(long, int) public void* Malloc(long size, int alignment = 4) Parameters size long alignment int Returns void*"
  },
  "api/Netick.DoubleStats.html": {
    "href": "api/Netick.DoubleStats.html",
    "title": "Class DoubleStats | Netick Networking Engine",
    "summary": "Class DoubleStats Namespace Netick Assembly Netick.dll public class DoubleStats Inheritance object DoubleStats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors DoubleStats(int) public DoubleStats(int windowSize = 128) Parameters windowSize int Properties Average public double Average { get; } Property Value double Latest public double Latest { get; } Property Value double Max public double Max { get; } Property Value double Min public double Min { get; } Property Value double StdDeviation public double StdDeviation { get; } Property Value double Methods Reset() public void Reset() Update(double) public void Update(double value) Parameters value double"
  },
  "api/Netick.Entity.html": {
    "href": "api/Netick.Entity.html",
    "title": "Class Entity | Netick Networking Engine",
    "summary": "Class Entity Namespace Netick Assembly Netick.dll [IgnoreCodeGen] public sealed class Entity Inheritance object Entity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AdaptiveRemoteInterpolation public AdaptiveRemoteInterpolation AdaptiveRemoteInterpolation Field Value AdaptiveRemoteInterpolation BehsHash public int BehsHash Field Value int Engine public NetickEngine Engine Field Value NetickEngine InstanceCounter public int InstanceCounter Field Value int NetworkId public int NetworkId Field Value int ObjectMeta public NetickUniqueObjectMeta ObjectMeta Field Value NetickUniqueObjectMeta PoolIndex public int PoolIndex Field Value int Position public Vector3 Position Field Value Vector3 S public int* S Field Value int* StateOffsetBytes public long StateOffsetBytes Field Value long StatePtr public void* StatePtr Field Value void* StateSizeWord public long StateSizeWord Field Value long UserEntity public INetickEntity UserEntity Field Value INetickEntity UserId public int UserId Field Value int WorldIndex public int WorldIndex Field Value int Properties InputSource public NetworkPlayer InputSource { get; set; } Property Value NetworkPlayer InputSourcePlayerId public int InputSourcePlayerId { get; } Property Value int InterestGroup public InterestManagementGroup InterestGroup { get; set; } Property Value InterestManagementGroup IsExplicitlyPredicted public bool IsExplicitlyPredicted { get; set; } Property Value bool IsInputSource public bool IsInputSource { get; } Property Value bool IsOwner public bool IsOwner { get; } Property Value bool IsPredicted public bool IsPredicted { get; } Property Value bool IsProxy public bool IsProxy { get; } Property Value bool IsResimulating public bool IsResimulating { get; } Property Value bool Methods ~Entity() protected ~Entity() GameEngineIntoNetcode() public void GameEngineIntoNetcode() GetStateSizeWords(INetickNetworkScript[]) public static int GetStateSizeWords(INetickNetworkScript[] scripts) Parameters scripts INetickNetworkScript[] Returns int GridMarkAltered(int, Entity, int) public bool GridMarkAltered(int index, Entity entity, int isInputSourceOnly = 0) Parameters index int entity Entity isInputSourceOnly int Returns bool InternalDirtify(INetickNetworkScript, int*, int*, int, int, int) public static void InternalDirtify(INetickNetworkScript script, int* data, int* p, int sizeInWords, int hasOnChanged, int isInputSourceOnly = 0) Parameters script INetickNetworkScript data int* p int* sizeInWords int hasOnChanged int isInputSourceOnly int InternalRegOnChanged(INetickNetworkScript, int, int, int, int*, int*, int, OnChangedEvent) public static void InternalRegOnChanged(INetickNetworkScript script, int isArray, int invokeDuringResims, int inversePrecision, int* propertyStart, int* propertyPartIndex, int propertySizeWords, OnChangedEvent onChanged) Parameters script INetickNetworkScript isArray int invokeDuringResims int inversePrecision int propertyStart int* propertyPartIndex int* propertySizeWords int onChanged OnChangedEvent InternalRegSmooth(INetickNetworkScript, string, int, float, int) public static void InternalRegSmooth(INetickNetworkScript script, string propertyName, int offsetInWords, float precision, int vectorFloatFieldsCount) Parameters script INetickNetworkScript propertyName string offsetInWords int precision float vectorFloatFieldsCount int MarkAltered(int*, int) public bool MarkAltered(int* p, int isInputSourceOnly = 0) Parameters p int* isInputSourceOnly int Returns bool Move(Vector3) public void Move(Vector3 newPos) Parameters newPos Vector3 NetcodeIntoGameEngine() public void NetcodeIntoGameEngine() SetData(int*, int*, int, int, int) public void SetData(int* newValue, int* p, int size, int hasOnChanged, int isInputSourceOnly) Parameters newValue int* p int* size int hasOnChanged int isInputSourceOnly int SetNarrowphaseInterest(NetworkPlayer, bool) public void SetNarrowphaseInterest(NetworkPlayer player, bool isInterested) Parameters player NetworkPlayer isInterested bool"
  },
  "api/Netick.ExecuteAfterAttribute.html": {
    "href": "api/Netick.ExecuteAfterAttribute.html",
    "title": "Class ExecuteAfterAttribute | Netick Networking Engine",
    "summary": "Class ExecuteAfterAttribute Namespace Netick Assembly Netick.dll [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)] public class ExecuteAfterAttribute : Attribute Inheritance object Attribute ExecuteAfterAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteAfterAttribute(Type) public ExecuteAfterAttribute(Type targetType) Parameters targetType Type Fields orderIncrease public int orderIncrease Field Value int targetType public Type targetType Field Value Type"
  },
  "api/Netick.ExecuteBeforeAttribute.html": {
    "href": "api/Netick.ExecuteBeforeAttribute.html",
    "title": "Class ExecuteBeforeAttribute | Netick Networking Engine",
    "summary": "Class ExecuteBeforeAttribute Namespace Netick Assembly Netick.dll [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)] public class ExecuteBeforeAttribute : Attribute Inheritance object Attribute ExecuteBeforeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecuteBeforeAttribute(Type) public ExecuteBeforeAttribute(Type targetType) Parameters targetType Type Fields orderDecrease public int orderDecrease Field Value int targetType public Type targetType Field Value Type"
  },
  "api/Netick.ExecutionList.html": {
    "href": "api/Netick.ExecutionList.html",
    "title": "Class ExecutionList | Netick Networking Engine",
    "summary": "Class ExecutionList Namespace Netick Assembly Netick.dll public sealed class ExecutionList : IEnumerable<INetickEntity>, IEnumerable Inheritance object ExecutionList Implements IEnumerable<INetickEntity> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ExecutionList(NetickEngine) public ExecutionList(NetickEngine engine) Parameters engine NetickEngine Fields Items public List<INetickEntity> Items Field Value List<INetickEntity> Properties Count public int Count { get; } Property Value int this[int] public INetickEntity this[int i] { get; set; } Parameters i int Property Value INetickEntity Methods Clear() public void Clear() GetEnumerator() public IEnumerator<INetickEntity> GetEnumerator() Returns IEnumerator<INetickEntity> Remove(INetickEntity) public void Remove(INetickEntity obj) Parameters obj INetickEntity SetFrom(List<INetickEntity>) public void SetFrom(List<INetickEntity> list) Parameters list List<INetickEntity>"
  },
  "api/Netick.ExecutionListLL.html": {
    "href": "api/Netick.ExecutionListLL.html",
    "title": "Class ExecutionListLL | Netick Networking Engine",
    "summary": "Class ExecutionListLL Namespace Netick Assembly Netick.dll public sealed class ExecutionListLL : IEnumerable<Entity>, IEnumerable Inheritance object ExecutionListLL Implements IEnumerable<Entity> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Items public HashSet<Entity> Items Field Value HashSet<Entity> Properties Count public int Count { get; } Property Value int Methods Clear() public void Clear() GetEnumerator() public IEnumerator<Entity> GetEnumerator() Returns IEnumerator<Entity> Remove(INetickEntity, bool) public void Remove(INetickEntity obj, bool callDestroy) Parameters obj INetickEntity callDestroy bool"
  },
  "api/Netick.ExecutionOrderAttribute.html": {
    "href": "api/Netick.ExecutionOrderAttribute.html",
    "title": "Class ExecutionOrderAttribute | Netick Networking Engine",
    "summary": "Class ExecutionOrderAttribute Namespace Netick Assembly Netick.dll [AttributeUsage(AttributeTargets.Class, Inherited = true, AllowMultiple = true)] public class ExecutionOrderAttribute : Attribute Inheritance object Attribute ExecutionOrderAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ExecutionOrderAttribute(int) public ExecutionOrderAttribute(int order) Parameters order int Fields order public int order Field Value int"
  },
  "api/Netick.FixedSize128-1.html": {
    "href": "api/Netick.FixedSize128-1.html",
    "title": "Struct FixedSize128<T> | Netick Networking Engine",
    "summary": "Struct FixedSize128<T> Namespace Netick Assembly Netick.dll [Networked(128, Relevancy.Everyone, 0.001)] public struct FixedSize128<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Netick.FixedSize16-1.html": {
    "href": "api/Netick.FixedSize16-1.html",
    "title": "Struct FixedSize16<T> | Netick Networking Engine",
    "summary": "Struct FixedSize16<T> Namespace Netick Assembly Netick.dll [Networked(16, Relevancy.Everyone, 0.001)] public struct FixedSize16<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Netick.FixedSize256-1.html": {
    "href": "api/Netick.FixedSize256-1.html",
    "title": "Struct FixedSize256<T> | Netick Networking Engine",
    "summary": "Struct FixedSize256<T> Namespace Netick Assembly Netick.dll [Networked(256, Relevancy.Everyone, 0.001)] public struct FixedSize256<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Netick.FixedSize32-1.html": {
    "href": "api/Netick.FixedSize32-1.html",
    "title": "Struct FixedSize32<T> | Netick Networking Engine",
    "summary": "Struct FixedSize32<T> Namespace Netick Assembly Netick.dll [Networked(32, Relevancy.Everyone, 0.001)] public struct FixedSize32<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Netick.FixedSize4-1.html": {
    "href": "api/Netick.FixedSize4-1.html",
    "title": "Struct FixedSize4<T> | Netick Networking Engine",
    "summary": "Struct FixedSize4<T> Namespace Netick Assembly Netick.dll [Networked(4, Relevancy.Everyone, 0.001)] public struct FixedSize4<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Netick.FixedSize512-1.html": {
    "href": "api/Netick.FixedSize512-1.html",
    "title": "Struct FixedSize512<T> | Netick Networking Engine",
    "summary": "Struct FixedSize512<T> Namespace Netick Assembly Netick.dll [Networked(512, Relevancy.Everyone, 0.001)] public struct FixedSize512<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Netick.FixedSize64-1.html": {
    "href": "api/Netick.FixedSize64-1.html",
    "title": "Struct FixedSize64<T> | Netick Networking Engine",
    "summary": "Struct FixedSize64<T> Namespace Netick Assembly Netick.dll [Networked(64, Relevancy.Everyone, 0.001)] public struct FixedSize64<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Netick.FixedSize8-1.html": {
    "href": "api/Netick.FixedSize8-1.html",
    "title": "Struct FixedSize8<T> | Netick Networking Engine",
    "summary": "Struct FixedSize8<T> Namespace Netick Assembly Netick.dll [Networked(8, Relevancy.Everyone, 0.001)] public struct FixedSize8<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object)"
  },
  "api/Netick.FloatStats.html": {
    "href": "api/Netick.FloatStats.html",
    "title": "Class FloatStats | Netick Networking Engine",
    "summary": "Class FloatStats Namespace Netick Assembly Netick.dll public class FloatStats Inheritance object FloatStats Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FloatStats(int) public FloatStats(int windowSize = 128) Parameters windowSize int Properties Average public float Average { get; } Property Value float Latest public float Latest { get; } Property Value float Max public float Max { get; } Property Value float Min public float Min { get; } Property Value float StdDeviation public float StdDeviation { get; } Property Value float Methods Reset() public void Reset() Update(float) public void Update(float value) Parameters value float"
  },
  "api/Netick.GeneratedBehaviourExample.html": {
    "href": "api/Netick.GeneratedBehaviourExample.html",
    "title": "Class GeneratedBehaviourExample | Netick Networking Engine",
    "summary": "Class GeneratedBehaviourExample Namespace Netick Assembly Netick.Unity.dll public class GeneratedBehaviourExample : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour GeneratedBehaviourExample Implements INetickNetworkScript INetickScript Inherited Members NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator<T>(string) NetworkBehaviour.GameEngineIntoNetcode() NetworkBehaviour.NetcodeIntoGameEngine() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.InternalGetStateSizeWords() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors GeneratedBehaviourExample() public GeneratedBehaviourExample() Properties Double2Example public double Double2Example { get; set; } Property Value double DoubleExample public double DoubleExample { get; set; } Property Value double DoubleExample_ public double DoubleExample_ { get; set; } Property Value double FloatExample public float FloatExample { get; set; } Property Value float FloatExample_ public float FloatExample_ { get; set; } Property Value float IntExample public int IntExample { get; set; } Property Value int StringExample public string StringExample { get; set; } Property Value string StructExampleExample public StructExample StructExampleExample { get; set; } Property Value StructExample Methods NetworkAwake() public override void NetworkAwake() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.Grid.html": {
    "href": "api/Netick.Grid.html",
    "title": "Class Grid | Netick Networking Engine",
    "summary": "Class Grid Namespace Netick Assembly Netick.dll public sealed class Grid Inheritance object Grid Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields CellSize public readonly int CellSize Field Value int Cells public readonly GridCellComp[,] Cells Field Value GridCellComp[,] CellsCount public readonly int CellsCount Field Value int Sandbox public readonly NetickEngine Sandbox Field Value NetickEngine Methods Add(Entity, NetickVector3) public void Add(Entity newUnit, NetickVector3 pos) Parameters newUnit Entity pos NetickVector3 AddObj(Entity) public void AddObj(Entity newUnit) Parameters newUnit Entity ConvertFromWorldToCell(NetickVector3) public NetickVector2Int ConvertFromWorldToCell(NetickVector3 pos) Parameters pos NetickVector3 Returns NetickVector2Int ConvertFromWorldToCell3D(NetickVector3) public NetickVector3Int ConvertFromWorldToCell3D(NetickVector3 pos) Parameters pos NetickVector3 Returns NetickVector3Int GetEntitiesWithinAoI(NetickVector3) public List<GridCellComp> GetEntitiesWithinAoI(NetickVector3 clientPos) Parameters clientPos NetickVector3 Returns List<GridCellComp> IsPosValid2(NetickVector2Int) public bool IsPosValid2(NetickVector2Int cellPos) Parameters cellPos NetickVector2Int Returns bool Move(Entity, NetickVector3, NetickVector3) public void Move(Entity unit, NetickVector3 oldPos, NetickVector3 newPos) Parameters unit Entity oldPos NetickVector3 newPos NetickVector3 Remove(Entity) public void Remove(Entity unit) Parameters unit Entity"
  },
  "api/Netick.GridCellComp.html": {
    "href": "api/Netick.GridCellComp.html",
    "title": "Class GridCellComp | Netick Networking Engine",
    "summary": "Class GridCellComp Namespace Netick Assembly Netick.dll public sealed class GridCellComp Inheritance object GridCellComp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields CellEntity public Entity CellEntity Field Value Entity Entities public HashSet<Entity> Entities Field Value HashSet<Entity> Position public readonly NetickVector3Int Position Field Value NetickVector3Int Methods AddObject(Entity) public void AddObject(Entity entity) Parameters entity Entity RemoveObject(Entity) public void RemoveObject(Entity entity) Parameters entity Entity"
  },
  "api/Netick.GridVisualiser.html": {
    "href": "api/Netick.GridVisualiser.html",
    "title": "Class GridVisualiser | Netick Networking Engine",
    "summary": "Class GridVisualiser Namespace Netick Assembly Netick.Unity.dll public class GridVisualiser : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour GridVisualiser Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors GridVisualiser() public GridVisualiser() Fields Sandbox public NetworkSandbox Sandbox Field Value NetworkSandbox"
  },
  "api/Netick.HitShape.html": {
    "href": "api/Netick.HitShape.html",
    "title": "Class HitShape | Netick Networking Engine",
    "summary": "Class HitShape Namespace Netick Assembly Netick.Premium.Unity.dll [AddComponentMenu(\"Netick/HitShape\")] public class HitShape : MonoBehaviour, IHitShape Inheritance object Object Component Behaviour MonoBehaviour HitShape Implements IHitShape Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HitShape() public HitShape() Fields _internalHitShape public LagCompShape _internalHitShape Field Value LagCompShape"
  },
  "api/Netick.HitShapeContainer.html": {
    "href": "api/Netick.HitShapeContainer.html",
    "title": "Class HitShapeContainer | Netick Networking Engine",
    "summary": "Class HitShapeContainer Namespace Netick Assembly Netick.Premium.Unity.dll [AddComponentMenu(\"Netick/HitShape Container\")] [DisallowMultipleComponent] public class HitShapeContainer : NetickBehaviour, INetickScript, IHitShapeContainer Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour HitShapeContainer Implements INetickScript IHitShapeContainer Inherited Members NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HitShapeContainer() public HitShapeContainer() Fields BoundsSize public Vector3 BoundsSize Field Value Vector3 HitShapes [SerializeField] public List<HitShape> HitShapes Field Value List<HitShape> RecalculateBounds public bool RecalculateBounds Field Value bool Methods NetworkDestroy() Called when this behaviour has been removed from the simulation. public override void NetworkDestroy() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.HitShapeType.html": {
    "href": "api/Netick.HitShapeType.html",
    "title": "Enum HitShapeType | Netick Networking Engine",
    "summary": "Enum HitShapeType Namespace Netick Assembly Netick.Pro.dll public enum HitShapeType Fields Box = 0 Shpere = 1"
  },
  "api/Netick.IClientSimulationCallbacks.html": {
    "href": "api/Netick.IClientSimulationCallbacks.html",
    "title": "Interface IClientSimulationCallbacks | Netick Networking Engine",
    "summary": "Interface IClientSimulationCallbacks Namespace Netick Assembly Netick.dll public interface IClientSimulationCallbacks Methods OnPostResimulation() void OnPostResimulation() OnPreRollback() void OnPreRollback()"
  },
  "api/Netick.IEndPoint.html": {
    "href": "api/Netick.IEndPoint.html",
    "title": "Interface IEndPoint | Netick Networking Engine",
    "summary": "Interface IEndPoint Namespace Netick Assembly Netick.dll public interface IEndPoint Properties IPAddress string IPAddress { get; } Property Value string Port int Port { get; } Property Value int"
  },
  "api/Netick.IGameEngine.html": {
    "href": "api/Netick.IGameEngine.html",
    "title": "Interface IGameEngine | Netick Networking Engine",
    "summary": "Interface IGameEngine Namespace Netick Assembly Netick.dll public interface IGameEngine Methods GetConnectionMetaSizeWords() Implements this to inform Netick about the size (in 32 bit words) of your connection meta data. int GetConnectionMetaSizeWords() Returns int GetEntityMetaSizeWords() Implements this to inform Netick about the size (in 32 bit words) of your entity meta data. int GetEntityMetaSizeWords() Returns int OnBeforeSend(NetworkConnection) This is called before sending packets to the target connection. void OnBeforeSend(NetworkConnection target) Parameters target NetworkConnection OnConnectFailed(ConnectionFailedReason) void OnConnectFailed(ConnectionFailedReason reason) Parameters reason ConnectionFailedReason OnConnectRequest(NetworkConnectionRequest) void OnConnectRequest(NetworkConnectionRequest request) Parameters request NetworkConnectionRequest OnConnectedToServer() void OnConnectedToServer() OnDisconnectedFromServer(TransportDisconnectReason) void OnDisconnectedFromServer(TransportDisconnectReason transportDisconnectReason) Parameters transportDisconnectReason TransportDisconnectReason OnEntityDespawned(Entity) This is called when an entity has been removed from the simulation. void OnEntityDespawned(Entity entity) Parameters entity Entity OnEntityInterestChanged(Entity, bool) void OnEntityInterestChanged(Entity entity, bool isInterested) Parameters entity Entity isInterested bool OnEntityMetaChanged(NetickEntityMeta, byte*, int) This method is called on the client when it receives new entity meta data. This must be used to create/setup network entities on the client. It can be called many times not only when the data has changed. Note: user entity meta data can be used for custom user data that might be used in creating entities. void OnEntityMetaChanged(NetickEntityMeta netickMeta, byte* userMetaData, int worldIndex) Parameters netickMeta NetickEntityMeta userMetaData byte* worldIndex int OnEntityMetaChangedPhaseThree(NetickEntityMeta, byte*, int) void OnEntityMetaChangedPhaseThree(NetickEntityMeta netickMeta, byte* userMetaData, int worldIndex) Parameters netickMeta NetickEntityMeta userMetaData byte* worldIndex int OnEntityMetaChangedPhaseTwo(NetickEntityMeta, byte*, int) void OnEntityMetaChangedPhaseTwo(NetickEntityMeta netickMeta, byte* userMetaData, int worldIndex) Parameters netickMeta NetickEntityMeta userMetaData byte* worldIndex int OnEntitySpawned(Entity) This is called when a new entity has been added to the simulation. void OnEntitySpawned(Entity entity) Parameters entity Entity OnInputRead() void OnInputRead() OnMatchListUpdate(List<Session>) void OnMatchListUpdate(List<Session> sessions) Parameters sessions List<Session> OnPacketReceived(NetworkConnection) This is called when a full packet has been received. void OnPacketReceived(NetworkConnection source) Parameters source NetworkConnection OnPeerConnected(NetworkConnection) void OnPeerConnected(NetworkConnection connection) Parameters connection NetworkConnection OnPeerDisconnected(NetworkConnection, TransportDisconnectReason) void OnPeerDisconnected(NetworkConnection connection, TransportDisconnectReason transportDisconnectReason) Parameters connection NetworkConnection transportDisconnectReason TransportDisconnectReason OnPlayerConnected(NetworkPlayer) void OnPlayerConnected(NetworkPlayer player) Parameters player NetworkPlayer OnPlayerDisconnected(NetworkPlayer, TransportDisconnectReason) void OnPlayerDisconnected(NetworkPlayer player, TransportDisconnectReason transportDisconnectReason) Parameters player NetworkPlayer transportDisconnectReason TransportDisconnectReason OnReceiveData(NetworkConnection, byte, byte*, int, TransportDeliveryMethod) void OnReceiveData(NetworkConnection sender, byte id, byte* data, int len, TransportDeliveryMethod transportDeliveryMethod) Parameters sender NetworkConnection id byte data byte* len int transportDeliveryMethod TransportDeliveryMethod OnUnlinkedEntityDespawned(Entity) This is called when an unliked entity has been removed from the simulation. void OnUnlinkedEntityDespawned(Entity entity) Parameters entity Entity PopulateEntityMeta(Entity) This is used to populate the user meta data for an entity. void PopulateEntityMeta(Entity entity) Parameters entity Entity SyncTransformsToPhysics() void SyncTransformsToPhysics()"
  },
  "api/Netick.IHitShape.html": {
    "href": "api/Netick.IHitShape.html",
    "title": "Interface IHitShape | Netick Networking Engine",
    "summary": "Interface IHitShape Namespace Netick Assembly Netick.Pro.dll public interface IHitShape Properties Center Vector3 Center { get; } Property Value Vector3 GlobalCenter Vector3 GlobalCenter { get; } Property Value Vector3 GlobalPosition Vector3 GlobalPosition { get; } Property Value Vector3 GlobalRotation Quaternion GlobalRotation { get; } Property Value Quaternion IsEnabled bool IsEnabled { get; } Property Value bool Layer int Layer { get; } Property Value int Radius float Radius { get; } Property Value float Shape HitShapeType Shape { get; } Property Value HitShapeType Size Vector3 Size { get; } Property Value Vector3"
  },
  "api/Netick.IHitShapeContainer.html": {
    "href": "api/Netick.IHitShapeContainer.html",
    "title": "Interface IHitShapeContainer | Netick Networking Engine",
    "summary": "Interface IHitShapeContainer Namespace Netick Assembly Netick.Pro.dll public interface IHitShapeContainer Properties BoundsSize Vector3 BoundsSize { get; set; } Property Value Vector3 GlobalPosition Vector3 GlobalPosition { get; } Property Value Vector3 IsEnabled bool IsEnabled { get; } Property Value bool Layer int Layer { get; } Property Value int RecalculateBounds bool RecalculateBounds { get; } Property Value bool Shapes List<LagCompShape> Shapes { get; } Property Value List<LagCompShape>"
  },
  "api/Netick.IMemoryAllocator.html": {
    "href": "api/Netick.IMemoryAllocator.html",
    "title": "Interface IMemoryAllocator | Netick Networking Engine",
    "summary": "Interface IMemoryAllocator Namespace Netick Assembly Netick.dll public interface IMemoryAllocator Methods Clear(void*, long) void Clear(void* ptr, long sizeBytes) Parameters ptr void* sizeBytes long Cmp(void*, void*, long) bool Cmp(void* ptr1, void* ptr2, long sizeBytes) Parameters ptr1 void* ptr2 void* sizeBytes long Returns bool Copy(void*, void*, long) void Copy(void* dest, void* source, long sizeBytes) Parameters dest void* source void* sizeBytes long Free(void*) void Free(void* ptr) Parameters ptr void* Malloc(long, int) void* Malloc(long size, int alignment = 4) Parameters size long alignment int Returns void*"
  },
  "api/Netick.INetickComponent.html": {
    "href": "api/Netick.INetickComponent.html",
    "title": "Interface INetickComponent | Netick Networking Engine",
    "summary": "Interface INetickComponent Namespace Netick Assembly Netick.dll public interface INetickComponent Methods Init(NetickEngine) void Init(NetickEngine engine) Parameters engine NetickEngine NetworkFixedUpdate() void NetworkFixedUpdate() NetworkRender() void NetworkRender() Reset() void Reset()"
  },
  "api/Netick.INetickEntity.html": {
    "href": "api/Netick.INetickEntity.html",
    "title": "Interface INetickEntity | Netick Networking Engine",
    "summary": "Interface INetickEntity Namespace Netick Assembly Netick.dll public interface INetickEntity Properties AddToNetworkLoop bool AddToNetworkLoop { get; } Property Value bool AllScripts INetickScript[] AllScripts { get; } Property Value INetickScript[] BroadPhaseFilter BroadPhaseFilter BroadPhaseFilter { get; } Property Value BroadPhaseFilter Engine NetickEngine Engine { get; } Property Value NetickEngine Entity Entity Entity { get; } Property Value Entity NarrowPhaseFilter bool NarrowPhaseFilter { get; } Property Value bool NetworkScripts INetickNetworkScript[] NetworkScripts { get; } Property Value INetickNetworkScript[] PredictionMode Relevancy PredictionMode { get; } Property Value Relevancy UseSAP bool UseSAP { get; } Property Value bool WorldPosition Vector3 WorldPosition { get; } Property Value Vector3 Methods Initialize(NetickEngine, Entity) Used to initialize the user entity and assign Engine and Entity void Initialize(NetickEngine netickEngine, Entity entity) Parameters netickEngine NetickEngine entity Entity NetworkRegister(int, NetworkPlayer, SpawnPredictionKey) void NetworkRegister(int id, NetworkPlayer user, SpawnPredictionKey spawnKey = default) Parameters id int user NetworkPlayer spawnKey SpawnPredictionKey NetworkStart() void NetworkStart() NetworkUnregister() void NetworkUnregister()"
  },
  "api/Netick.INetickLogger.html": {
    "href": "api/Netick.INetickLogger.html",
    "title": "Interface INetickLogger | Netick Networking Engine",
    "summary": "Interface INetickLogger Namespace Netick Assembly Netick.dll public interface INetickLogger Methods Log(object) void Log(object message) Parameters message object LogError(object) void LogError(object message) Parameters message object LogException(object, object) void LogException(object message, object targetScript) Parameters message object targetScript object LogWarning(object) void LogWarning(object message) Parameters message object"
  },
  "api/Netick.INetickNetworkScript.html": {
    "href": "api/Netick.INetickNetworkScript.html",
    "title": "Interface INetickNetworkScript | Netick Networking Engine",
    "summary": "Interface INetickNetworkScript Namespace Netick Assembly Netick.dll A network scripts which can have networked properties and rpcs. public interface INetickNetworkScript : INetickScript Inherited Members INetickScript.Initialize(NetickEngine) INetickScript.NetworkStart() INetickScript.NetworkDestroy() INetickScript.NetworkUpdate() INetickScript.NetworkFixedUpdate() INetickScript.NetworkRender() INetickScript.OnBecameSimulated() INetickScript.OnBecameUnsimulated() INetickScript.Engine Properties Entity Entity Entity { get; } Property Value Entity Index int Index { get; } Property Value int RelatedRpcs List<NetworkRpc> RelatedRpcs { get; } Property Value List<NetworkRpc> State int* State { get; } Property Value int* Methods GameEngineIntoNetcode() void GameEngineIntoNetcode() InternalGetStateSizeWords() int InternalGetStateSizeWords() Returns int InternalInit() void InternalInit() InternalReset() void InternalReset() NetcodeIntoGameEngine() void NetcodeIntoGameEngine() NetworkAwake() void NetworkAwake() NetworkReset() void NetworkReset() OnBecameInterested() void OnBecameInterested() OnBecameUninterested() void OnBecameUninterested() OnInputSourceChanged(NetworkPlayer) void OnInputSourceChanged(NetworkPlayer previous) Parameters previous NetworkPlayer OnInputSourceLeft() void OnInputSourceLeft()"
  },
  "api/Netick.INetickScript.html": {
    "href": "api/Netick.INetickScript.html",
    "title": "Interface INetickScript | Netick Networking Engine",
    "summary": "Interface INetickScript Namespace Netick Assembly Netick.dll A script which can be added to Netick internal simulation loop. public interface INetickScript Properties Engine NetickEngine Engine { get; } Property Value NetickEngine Entity Entity Entity { get; } Property Value Entity Index int Index { get; set; } Property Value int Methods Initialize(NetickEngine) Used to initialize the user script and assign Engine. void Initialize(NetickEngine netickEngine) Parameters netickEngine NetickEngine NetworkDestroy() Called when this script has been removed from the simulation. void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Entity.PredictionMode is set to None, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. void NetworkFixedUpdate() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. void NetworkRender() NetworkStart() Called when this script has been added to the simulation. void NetworkStart() NetworkUpdate() Called every frame. Executed before NetworkFixedUpdate. void NetworkUpdate() OnBecameSimulated() void OnBecameSimulated() OnBecameUnsimulated() void OnBecameUnsimulated()"
  },
  "api/Netick.INetickSocket.html": {
    "href": "api/Netick.INetickSocket.html",
    "title": "Interface INetickSocket | Netick Networking Engine",
    "summary": "Interface INetickSocket Namespace Netick Assembly Netick.dll public interface INetickSocket Methods Connect(ref IEndPoint) bool Connect(ref IEndPoint address) Parameters address IEndPoint Returns bool CreateFromIpPort(string, int) IEndPoint CreateFromIpPort(string ip, int port) Parameters ip string port int Returns IEndPoint Deinitialize() void Deinitialize() Initialize() bool Initialize() Returns bool Poll() int Poll() Returns int Receive(out IEndPoint, byte*, int) int Receive(out IEndPoint address, byte* buffer, int bufferSize) Parameters address IEndPoint buffer byte* bufferSize int Returns int Send(IEndPoint, byte*, int) void Send(IEndPoint address, byte* data, int dataLength) Parameters address IEndPoint data byte* dataLength int Shutdown() void Shutdown() StartClient(long, long) void StartClient(long sendBufferSize, long receiveBufferSize) Parameters sendBufferSize long receiveBufferSize long StartServer(int, long, long) void StartServer(int port, long sendBufferSize, long receiveBufferSize) Parameters port int sendBufferSize long receiveBufferSize long"
  },
  "api/Netick.INetworkArray.html": {
    "href": "api/Netick.INetworkArray.html",
    "title": "Interface INetworkArray | Netick Networking Engine",
    "summary": "Interface INetworkArray Namespace Netick Assembly Netick.dll public interface INetworkArray Methods InternalInit(INetickNetworkScript, int*, int, int) void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int isInputSourceOnly) Parameters beh INetickNetworkScript state int* elementSizeWords int isInputSourceOnly int InternalReset() void InternalReset()"
  },
  "api/Netick.INetworkCollection.html": {
    "href": "api/Netick.INetworkCollection.html",
    "title": "Interface INetworkCollection | Netick Networking Engine",
    "summary": "Interface INetworkCollection Namespace Netick Assembly Netick.dll public interface INetworkCollection Methods InternalInit(INetickNetworkScript, int*, int, int) void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int isInputSourceOnly) Parameters beh INetickNetworkScript state int* elementSizeWords int isInputSourceOnly int InternalReset() void InternalReset()"
  },
  "api/Netick.INetworkInput.html": {
    "href": "api/Netick.INetworkInput.html",
    "title": "Interface INetworkInput | Netick Networking Engine",
    "summary": "Interface INetworkInput Namespace Netick Assembly Netick.dll public interface INetworkInput"
  },
  "api/Netick.IPEndPointExt.html": {
    "href": "api/Netick.IPEndPointExt.html",
    "title": "Class IPEndPointExt | Netick Networking Engine",
    "summary": "Class IPEndPointExt Namespace Netick Assembly Netick.dll public static class IPEndPointExt Inheritance object IPEndPointExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNetickEndPoint(IPEndPoint) public static NetickEndPoint ToNetickEndPoint(this IPEndPoint iPEndPoint) Parameters iPEndPoint IPEndPoint Returns NetickEndPoint"
  },
  "api/Netick.IPhysicsComponent.html": {
    "href": "api/Netick.IPhysicsComponent.html",
    "title": "Interface IPhysicsComponent | Netick Networking Engine",
    "summary": "Interface IPhysicsComponent Namespace Netick Assembly Netick.Unity.dll public interface IPhysicsComponent"
  },
  "api/Netick.IgnoreCodeGen.html": {
    "href": "api/Netick.IgnoreCodeGen.html",
    "title": "Class IgnoreCodeGen | Netick Networking Engine",
    "summary": "Class IgnoreCodeGen Namespace Netick Assembly Netick.dll [AttributeUsage(AttributeTargets.Class, Inherited = true)] public class IgnoreCodeGen : Attribute Inheritance object Attribute IgnoreCodeGen Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors IgnoreCodeGen() public IgnoreCodeGen()"
  },
  "api/Netick.InterestManagement.html": {
    "href": "api/Netick.InterestManagement.html",
    "title": "Class InterestManagement | Netick Networking Engine",
    "summary": "Class InterestManagement Namespace Netick Assembly Netick.dll public sealed class InterestManagement Inheritance object InterestManagement Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AllGroups public readonly InterestManagementGroup[] AllGroups Field Value InterestManagementGroup[] CellSize public readonly int CellSize Field Value int Cells public readonly InterestManagementGroup[,,] Cells Field Value InterestManagementGroup[,,] CellsCountPerRowX public readonly int CellsCountPerRowX Field Value int CellsCountPerRowY public readonly int CellsCountPerRowY Field Value int CellsCountPerRowZ public readonly int CellsCountPerRowZ Field Value int CustomGroups public readonly InterestManagementGroup[] CustomGroups Field Value InterestManagementGroup[] Engine public readonly NetickEngine Engine Field Value NetickEngine SimulationList public readonly ExecutionListLL SimulationList Field Value ExecutionListLL TotalGroupCount public readonly int TotalGroupCount Field Value int Methods CalcTotalGroupCount(NetickEngine) public static int CalcTotalGroupCount(NetickEngine engine) Parameters engine NetickEngine Returns int ConvertFromWorldToCell3D(Vector3) public NetickVector3Int ConvertFromWorldToCell3D(Vector3 pos) Parameters pos Vector3 Returns NetickVector3Int"
  },
  "api/Netick.InterestManagementGroup.html": {
    "href": "api/Netick.InterestManagementGroup.html",
    "title": "Class InterestManagementGroup | Netick Networking Engine",
    "summary": "Class InterestManagementGroup Namespace Netick Assembly Netick.dll public sealed class InterestManagementGroup Inheritance object InterestManagementGroup Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields GridPosition public readonly NetickVector3Int GridPosition Field Value NetickVector3Int Position public readonly Vector3 Position Field Value Vector3 Properties Entities public IReadOnlyCollection<Entity> Entities { get; } Property Value IReadOnlyCollection<Entity>"
  },
  "api/Netick.InternalNetworkRpcSize.html": {
    "href": "api/Netick.InternalNetworkRpcSize.html",
    "title": "Class InternalNetworkRpcSize | Netick Networking Engine",
    "summary": "Class InternalNetworkRpcSize Namespace Netick Assembly Netick.dll public class InternalNetworkRpcSize : Attribute Inheritance object Attribute InternalNetworkRpcSize Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InternalNetworkRpcSize(int) public InternalNetworkRpcSize(int size = -1) Parameters size int Fields Size public int Size Field Value int"
  },
  "api/Netick.Interpolation.html": {
    "href": "api/Netick.Interpolation.html",
    "title": "Class Interpolation | Netick Networking Engine",
    "summary": "Class Interpolation Namespace Netick Assembly Netick.dll A class representing an abstract interpolation interface, which is implemented by RemoteInterpolation and LocalInterpolation public abstract class Interpolation Inheritance object Interpolation Derived AdaptiveRemoteInterpolation LocalInterpolation RemoteInterpolation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields FromSnapshot public NetickAllocator FromSnapshot Field Value NetickAllocator ToSnapshot public NetickAllocator ToSnapshot Field Value NetickAllocator Properties Alpha public abstract float Alpha { get; } Property Value float From public abstract Tick From { get; } Property Value Tick HasSnapshots public abstract bool HasSnapshots { get; } Property Value bool Time public abstract float Time { get; } Property Value float To public abstract Tick To { get; } Property Value Tick"
  },
  "api/Netick.InterpolationMode.html": {
    "href": "api/Netick.InterpolationMode.html",
    "title": "Enum InterpolationMode | Netick Networking Engine",
    "summary": "Enum InterpolationMode Namespace Netick Assembly Netick.dll public enum InterpolationMode Fields Auto = 0 PredictedSnapshot = 1 RemoteSnapshot = 2"
  },
  "api/Netick.InterpolationSource.html": {
    "href": "api/Netick.InterpolationSource.html",
    "title": "Enum InterpolationSource | Netick Networking Engine",
    "summary": "Enum InterpolationSource Namespace Netick Assembly Netick.dll public enum InterpolationSource Fields Auto = 0 PredictedSnapshot = 1 RemoteSnapshot = 2"
  },
  "api/Netick.Interpolator-1.html": {
    "href": "api/Netick.Interpolator-1.html",
    "title": "Struct Interpolator<T> | Netick Networking Engine",
    "summary": "Struct Interpolator<T> Namespace Netick Assembly Netick.dll A struct that is used to obtain interpolation data for a network property. public struct Interpolator<T> where T : unmanaged Type Parameters T Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Interpolator(Entity, int*, int) public Interpolator(Entity entity, int* s, int offsetInWords) Parameters entity Entity s int* offsetInWords int Methods GetInterpolationData(InterpolationMode, out T, out T, out float) Tries to obtain interpolation data for this frame. public bool GetInterpolationData(InterpolationMode interpolationMode, out T from, out T to, out float alpha) Parameters interpolationMode InterpolationMode from T to T alpha float Returns bool"
  },
  "api/Netick.Interpolator.html": {
    "href": "api/Netick.Interpolator.html",
    "title": "Struct Interpolator | Netick Networking Engine",
    "summary": "Struct Interpolator Namespace Netick Assembly Netick.dll A struct that is used to obtain interpolation data for a network property. public struct Interpolator Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Interpolator(Entity, int*, int, float, int) public Interpolator(Entity entity, int* s, int offsetInWords, float precision, int vectorFloatFieldsCount) Parameters entity Entity s int* offsetInWords int precision float vectorFloatFieldsCount int Fields Precision public readonly float Precision Field Value float Methods GetInterpolationDataPtr(InterpolationSource, out int*, out int*, out float) public bool GetInterpolationDataPtr(InterpolationSource interpolationSource, out int* from, out int* to, out float alpha) Parameters interpolationSource InterpolationSource from int* to int* alpha float Returns bool GetInterpolationData<T>(InterpolationSource, int, out T, out T, out float) Tries to obtain interpolation data for this frame. This is the array version. public bool GetInterpolationData<T>(InterpolationSource interpolationSource, int index, out T from, out T to, out float alpha) where T : unmanaged Parameters interpolationSource InterpolationSource index int from T to T alpha float Returns bool Returns true if there was interpolation data for this frame. Type Parameters T GetInterpolationData<T>(InterpolationSource, out T, out T, out float) Tries to obtain interpolation data for this frame. public bool GetInterpolationData<T>(InterpolationSource interpolationSource, out T from, out T to, out float alpha) where T : unmanaged Parameters interpolationSource InterpolationSource from T to T alpha float Returns bool Returns true if there was interpolation data for this frame. Type Parameters T"
  },
  "api/Netick.LagCompContainer.html": {
    "href": "api/Netick.LagCompContainer.html",
    "title": "Class LagCompContainer | Netick Networking Engine",
    "summary": "Class LagCompContainer Namespace Netick Assembly Netick.Pro.dll public class LagCompContainer Inheritance object LagCompContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LagCompContainer(IHitShapeContainer) public LagCompContainer(IHitShapeContainer container) Parameters container IHitShapeContainer Fields Engine public NetickEngine Engine Field Value NetickEngine Entity public Entity Entity Field Value Entity UserHitShapeContainer public readonly IHitShapeContainer UserHitShapeContainer Field Value IHitShapeContainer Properties Bounds public NetickBounds Bounds { get; } Property Value NetickBounds Methods Deinitialize() public void Deinitialize() GetBounds() public NetickBounds GetBounds() Returns NetickBounds Initialize(NetickEngine, Entity) public void Initialize(NetickEngine engine, Entity entity) Parameters engine NetickEngine entity Entity"
  },
  "api/Netick.LagCompHit.html": {
    "href": "api/Netick.LagCompHit.html",
    "title": "Struct LagCompHit | Netick Networking Engine",
    "summary": "Struct LagCompHit Namespace Netick Assembly Netick.Premium.Unity.dll public struct LagCompHit Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Collider public Collider Collider Field Value Collider Distance public float Distance Field Value float GameObject public GameObject GameObject Field Value GameObject HitShape public HitShape HitShape Field Value HitShape Point public Vector3 Point Field Value Vector3 Type public NetHitType Type Field Value NetHitType Properties Transform public Transform Transform { get; } Property Value Transform"
  },
  "api/Netick.LagCompShape.html": {
    "href": "api/Netick.LagCompShape.html",
    "title": "Class LagCompShape | Netick Networking Engine",
    "summary": "Class LagCompShape Namespace Netick Assembly Netick.Pro.dll public class LagCompShape Inheritance object LagCompShape Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LagCompShape(IHitShape) public LagCompShape(IHitShape hitShape) Parameters hitShape IHitShape Properties Container public LagCompContainer Container { get; } Property Value LagCompContainer Index public int Index { get; } Property Value int Sandbox public NetickEngine Sandbox { get; } Property Value NetickEngine UserHitShape public IHitShape UserHitShape { get; } Property Value IHitShape Methods GetBounds() public NetickBounds GetBounds() Returns NetickBounds"
  },
  "api/Netick.LagCompUnityUtils.html": {
    "href": "api/Netick.LagCompUnityUtils.html",
    "title": "Class LagCompUnityUtils | Netick Networking Engine",
    "summary": "Class LagCompUnityUtils Namespace Netick Assembly Netick.Premium.Unity.dll public static class LagCompUnityUtils Inheritance object LagCompUnityUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromNumerics(Quaternion) public static Quaternion FromNumerics(this Quaternion vec) Parameters vec Quaternion Returns Quaternion FromNumerics(Vector3) public static Vector3 FromNumerics(this Vector3 vec) Parameters vec Vector3 Returns Vector3 ToNumerics(Quaternion) public static Quaternion ToNumerics(this Quaternion vec) Parameters vec Quaternion Returns Quaternion ToNumerics(Vector3) public static Vector3 ToNumerics(this Vector3 vec) Parameters vec Vector3 Returns Vector3 ToUnityBounds(NetickBounds) public static Bounds ToUnityBounds(this NetickBounds bounds) Parameters bounds NetickBounds Returns Bounds"
  },
  "api/Netick.LagCompensation.html": {
    "href": "api/Netick.LagCompensation.html",
    "title": "Class LagCompensation | Netick Networking Engine",
    "summary": "Class LagCompensation Namespace Netick Assembly Netick.Pro.dll public sealed class LagCompensation : INetickComponent Inheritance object LagCompensation Implements INetickComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LagCompensation() public LagCompensation() Fields Compensate public bool Compensate Field Value bool Methods CanRewind(ServerConnection) public static bool CanRewind(ServerConnection inputSource) Parameters inputSource ServerConnection Returns bool FetchHitShapePosAndRot(LagCompShape, NetworkPlayer, out Vector3, out Quaternion) public void FetchHitShapePosAndRot(LagCompShape hitShape, NetworkPlayer inputSource, out Vector3 pos, out Quaternion rot) Parameters hitShape LagCompShape inputSource NetworkPlayer pos Vector3 rot Quaternion OverlapSphere(Vector3, float, List<NetHit>, NetworkPlayer, int, bool, bool) Performs a lag compensated OverlapSphere which computes and stores HitShapes and Colliders (if includeUnityColliders is equal to true) touching or inside the sphere. public void OverlapSphere(Vector3 center, float radius, List<NetHit> hits, NetworkPlayer inputSource, int layerMask = -1, bool includeInputSource = false, bool oneHitPerHitShapeContainer = false) Parameters center Vector3 Center of the sphere. radius float Radius of the sphere. hits List<NetHit> inputSource NetworkPlayer The input source to compensate for. layerMask int A defines which layers of colliders to include in the query. includeInputSource bool oneHitPerHitShapeContainer bool Choose whether you want to include only one HitShape per HitShapeContainer Raycast(Vector3, Vector3, out NetHit, NetworkPlayer, float, int, bool) Casts a lag compensated ray, from point origin, in direction direction, of length maxDistance, against all HitShapes and Colliders (if includeUnityColliders is equal to true) in the Scene. public bool Raycast(Vector3 origin, Vector3 direction, out NetHit hitData, NetworkPlayer inputSource, float maxDistance = Infinity, int layerMask = -1, bool includeInputSource = false) Parameters origin Vector3 The starting point of the ray in world coordinates. direction Vector3 The direction of the ray. hitData NetHit inputSource NetworkPlayer The input source to compensate for. maxDistance float The max distance the ray should check for collisions. layerMask int A that is used to selectively ignore Colliders when casting a ray. includeInputSource bool Returns bool Returns true if the ray intersects with a Collider/HitShape, otherwise false."
  },
  "api/Netick.LocalInterpolation.html": {
    "href": "api/Netick.LocalInterpolation.html",
    "title": "Class LocalInterpolation | Netick Networking Engine",
    "summary": "Class LocalInterpolation Namespace Netick Assembly Netick.dll A class representing the local interpolation of this instance NetickEngine. This should be used whenever you want to use Predicted Timeline on the client. public sealed class LocalInterpolation : Interpolation Inheritance object Interpolation LocalInterpolation Inherited Members Interpolation.FromSnapshot Interpolation.ToSnapshot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LocalInterpolation(NetickEngine) public LocalInterpolation(NetickEngine sandbox) Parameters sandbox NetickEngine Properties Alpha public override float Alpha { get; } Property Value float From public override Tick From { get; } Property Value Tick HasSnapshots public override bool HasSnapshots { get; } Property Value bool Time Time in seconds. public override float Time { get; } Property Value float To public override Tick To { get; } Property Value Tick"
  },
  "api/Netick.MemoryAllocation.html": {
    "href": "api/Netick.MemoryAllocation.html",
    "title": "Class MemoryAllocation | Netick Networking Engine",
    "summary": "Class MemoryAllocation Namespace Netick Assembly Netick.dll public static class MemoryAllocation Inheritance object MemoryAllocation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Clear(void*, long) public static void Clear(void* ptr, long sizeBytes) Parameters ptr void* sizeBytes long Cmp(void*, void*, long) public static bool Cmp(void* ptr1, void* ptr2, long sizeBytes) Parameters ptr1 void* ptr2 void* sizeBytes long Returns bool Copy(void*, void*, long) public static void Copy(void* dest, void* source, long sizeBytes) Parameters dest void* source void* sizeBytes long Free(void*) public static void Free(void* ptr) Parameters ptr void* Malloc(long, int) public static void* Malloc(long size, int alignment = 8) Parameters size long alignment int Returns void*"
  },
  "api/Netick.Monitor.html": {
    "href": "api/Netick.Monitor.html",
    "title": "Class Monitor | Netick Networking Engine",
    "summary": "Class Monitor Namespace Netick Assembly Netick.dll public sealed class Monitor Inheritance object Monitor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors Monitor() public Monitor() Fields AckProfiler public NetcodeProfiler AckProfiler Field Value NetcodeProfiler ChangesProfiler public NetcodeProfiler ChangesProfiler Field Value NetcodeProfiler FixedUpdateProfiler public NetcodeProfiler FixedUpdateProfiler Field Value NetcodeProfiler PacketSizeProfiler public NetcodeProfiler PacketSizeProfiler Field Value NetcodeProfiler ReadProfiler public NetcodeProfiler ReadProfiler Field Value NetcodeProfiler RenderProfiler public NetcodeProfiler RenderProfiler Field Value NetcodeProfiler ReplicatorProfiler public NetcodeProfiler ReplicatorProfiler Field Value NetcodeProfiler TickTimeProfiler public NetcodeProfiler TickTimeProfiler Field Value NetcodeProfiler WriteProfiler public NetcodeProfiler WriteProfiler Field Value NetcodeProfiler Properties FPS public FloatStats FPS { get; } Property Value FloatStats RTT public FloatStats RTT { get; } Property Value FloatStats Resimulations public FloatStats Resimulations { get; } Property Value FloatStats ServerTickTime public FloatStats ServerTickTime { get; } Property Value FloatStats"
  },
  "api/Netick.NativeUDPSocket.html": {
    "href": "api/Netick.NativeUDPSocket.html",
    "title": "Class NativeUDPSocket | Netick Networking Engine",
    "summary": "Class NativeUDPSocket Namespace Netick Assembly Netick.dll public class NativeUDPSocket : INetickSocket Inheritance object NativeUDPSocket Implements INetickSocket Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NativeUDPSocket() public NativeUDPSocket() Methods Connect(ref IEndPoint) public bool Connect(ref IEndPoint address) Parameters address IEndPoint Returns bool CreateFromIpPort(string, int) public IEndPoint CreateFromIpPort(string ip, int port) Parameters ip string port int Returns IEndPoint Deinitialize() public void Deinitialize() Initialize() public bool Initialize() Returns bool Poll() public int Poll() Returns int Receive(out IEndPoint, byte*, int) public int Receive(out IEndPoint address, byte* buffer, int bufferSize) Parameters address IEndPoint buffer byte* bufferSize int Returns int Send(IEndPoint, byte*, int) public void Send(IEndPoint address, byte* data, int dataLength) Parameters address IEndPoint data byte* dataLength int Shutdown() public void Shutdown() StartClient(long, long) public void StartClient(long sendBufferSize, long receiveBufferSize) Parameters sendBufferSize long receiveBufferSize long StartServer(int, long, long) public void StartServer(int port, long sendBufferSize, long receiveBufferSize) Parameters port int sendBufferSize long receiveBufferSize long"
  },
  "api/Netick.NetHit.html": {
    "href": "api/Netick.NetHit.html",
    "title": "Struct NetHit | Netick Networking Engine",
    "summary": "Struct NetHit Namespace Netick Assembly Netick.Pro.dll public struct NetHit Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Distance public float Distance Field Value float HitShape public LagCompShape HitShape Field Value LagCompShape Point public Vector3 Point Field Value Vector3 Type public NetHitType Type Field Value NetHitType"
  },
  "api/Netick.NetHitType.html": {
    "href": "api/Netick.NetHitType.html",
    "title": "Enum NetHitType | Netick Networking Engine",
    "summary": "Enum NetHitType Namespace Netick Assembly Netick.Pro.dll public enum NetHitType Fields Netick = 0 PhysicsEngine = 1"
  },
  "api/Netick.NetcodeProfiler.html": {
    "href": "api/Netick.NetcodeProfiler.html",
    "title": "Class NetcodeProfiler | Netick Networking Engine",
    "summary": "Class NetcodeProfiler Namespace Netick Assembly Netick.dll public sealed class NetcodeProfiler Inheritance object NetcodeProfiler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetcodeProfiler(string) public NetcodeProfiler(string name) Parameters name string Fields Name public readonly string Name Field Value string Stats public readonly FloatStats Stats Field Value FloatStats Methods Begin() public void Begin() End() public void End() GetStats() public string GetStats() Returns string Update(float) public void Update(float v) Parameters v float"
  },
  "api/Netick.NetickAllocator.MemoryPool.html": {
    "href": "api/Netick.NetickAllocator.MemoryPool.html",
    "title": "Struct NetickAllocator.MemoryPool | Netick Networking Engine",
    "summary": "Struct NetickAllocator.MemoryPool Namespace Netick Assembly Netick.dll public struct NetickAllocator.MemoryPool Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ByteSize public long ByteSize Field Value long Ptr public void* Ptr Field Value void*"
  },
  "api/Netick.NetickAllocator.html": {
    "href": "api/Netick.NetickAllocator.html",
    "title": "Class NetickAllocator | Netick Networking Engine",
    "summary": "Class NetickAllocator Namespace Netick Assembly Netick.dll public sealed class NetickAllocator Inheritance object NetickAllocator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Pools public List<NetickAllocator.MemoryPool> Pools Field Value List<NetickAllocator.MemoryPool> Methods AddNewPool(bool) public void AddNewPool(bool isMain) Parameters isMain bool CopyTo(NetickAllocator) public void CopyTo(NetickAllocator dest) Parameters dest NetickAllocator ~NetickAllocator() protected ~NetickAllocator() Free(void*) public void Free(void* ptr) Parameters ptr void* Malloc(ulong, out int, out long) public void* Malloc(ulong size, out int poolIndex, out long offset) Parameters size ulong poolIndex int offset long Returns void* SafeMalloc(ulong, out int, out long) public void* SafeMalloc(ulong size, out int poolIndex, out long offset) Parameters size ulong poolIndex int offset long Returns void*"
  },
  "api/Netick.NetickArrayExt.html": {
    "href": "api/Netick.NetickArrayExt.html",
    "title": "Class NetickArrayExt | Netick Networking Engine",
    "summary": "Class NetickArrayExt Namespace Netick Assembly Netick.dll public static class NetickArrayExt Inheritance object NetickArrayExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNetworkArrayStruct16<T>(T[]) public static NetworkArrayStruct16<T> ToNetworkArrayStruct16<T>(this T[] array) where T : unmanaged Parameters array T[] Returns NetworkArrayStruct16<T> Type Parameters T ToNetworkArrayStruct32<T>(T[]) public static NetworkArrayStruct32<T> ToNetworkArrayStruct32<T>(this T[] array) where T : unmanaged Parameters array T[] Returns NetworkArrayStruct32<T> Type Parameters T ToNetworkArrayStruct64<T>(T[]) public static NetworkArrayStruct64<T> ToNetworkArrayStruct64<T>(this T[] array) where T : unmanaged Parameters array T[] Returns NetworkArrayStruct64<T> Type Parameters T ToNetworkStructArray8<T>(T[]) public static NetworkArrayStruct8<T> ToNetworkStructArray8<T>(this T[] array) where T : unmanaged Parameters array T[] Returns NetworkArrayStruct8<T> Type Parameters T"
  },
  "api/Netick.NetickBehaviour.html": {
    "href": "api/Netick.NetickBehaviour.html",
    "title": "Class NetickBehaviour | Netick Networking Engine",
    "summary": "Class NetickBehaviour Namespace Netick Assembly Netick.Unity.dll public abstract class NetickBehaviour : MonoBehaviour, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour Implements INetickScript Derived HitShapeContainer NetickCoreComponent NetworkBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetickBehaviour() protected NetickBehaviour() Properties Engine public NetickEngine Engine { get; } Property Value NetickEngine Entity public Entity Entity { get; } Property Value Entity Object The NetworkObject this behaviour is attached to. public NetworkObject Object { get; } Property Value NetworkObject Sandbox The NetworkSandbox containing this Object. public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox Methods NetworkAwake() public virtual void NetworkAwake() NetworkDestroy() Called when this behaviour has been removed from the simulation. public virtual void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public virtual void NetworkFixedUpdate() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. public virtual void NetworkRender() NetworkStart() Called when this behaviour has been added to the simulation. public virtual void NetworkStart() NetworkUpdate() Called every frame. Executed before NetworkFixedUpdate. public virtual void NetworkUpdate()"
  },
  "api/Netick.NetickBounds.html": {
    "href": "api/Netick.NetickBounds.html",
    "title": "Struct NetickBounds | Netick Networking Engine",
    "summary": "Struct NetickBounds Namespace Netick Assembly Netick.dll public struct NetickBounds : IEquatable<NetickBounds> Implements IEquatable<NetickBounds> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickBounds(Vector3, Vector3) public NetickBounds(Vector3 center, Vector3 size) Parameters center Vector3 size Vector3 Fields Center public Vector3 Center Field Value Vector3 Extents public Vector3 Extents Field Value Vector3 Properties Max public Vector3 Max { get; set; } Property Value Vector3 Min public Vector3 Min { get; set; } Property Value Vector3 Size public Vector3 Size { get; set; } Property Value Vector3 Methods Encapsulate(NetickBounds) public void Encapsulate(NetickBounds bounds) Parameters bounds NetickBounds Encapsulate(Vector3) public void Encapsulate(Vector3 point) Parameters point Vector3 Equals(NetickBounds) public bool Equals(NetickBounds other) Parameters other NetickBounds Returns bool Equals(object) public override bool Equals(object other) Parameters other object Returns bool Expand(Vector3) public void Expand(Vector3 amount) Parameters amount Vector3 Expand(float) public void Expand(float amount) Parameters amount float GetHashCode() public override int GetHashCode() Returns int Intersects(NetickBounds) public bool Intersects(NetickBounds bounds) Parameters bounds NetickBounds Returns bool SetMinMax(Vector3, Vector3) public void SetMinMax(Vector3 min, Vector3 max) Parameters min Vector3 max Vector3 Operators operator ==(NetickBounds, NetickBounds) public static bool operator ==(NetickBounds lhs, NetickBounds rhs) Parameters lhs NetickBounds rhs NetickBounds Returns bool operator !=(NetickBounds, NetickBounds) public static bool operator !=(NetickBounds lhs, NetickBounds rhs) Parameters lhs NetickBounds rhs NetickBounds Returns bool"
  },
  "api/Netick.NetickConfig.html": {
    "href": "api/Netick.NetickConfig.html",
    "title": "Class NetickConfig | Netick Networking Engine",
    "summary": "Class NetickConfig Namespace Netick Assembly Netick.Unity.dll Config class for Netick. public class NetickConfig : ScriptableObject Inheritance object Object ScriptableObject NetickConfig Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NetickConfig() public NetickConfig() Fields AllocatorBlockSize [SerializeField] public int AllocatorBlockSize Field Value int AoI [HideInInspector] public bool AoI Field Value bool Assemblies [SerializeField] public List<string> Assemblies Field Value List<string> CellSize [HideInInspector] public int CellSize Field Value int ClientDivisor [Range(1, 5)] [SerializeField] public int ClientDivisor Field Value int EnableLagCompensation [Tooltip(\"Enable this if you want to use the Lag Compensation module.\")] [HideInInspector] public bool EnableLagCompensation Field Value bool EnableLogging [Tooltip(\"Disable this before doing a production build because you don't want Netick to log to the console.\")] public bool EnableLogging Field Value bool InvokeRenderInHeadless [Tooltip(\"Disable this if you want Netick to not invoke Network Render (and thus not calculate interpolation) callbacks in headless builds.\")] public bool InvokeRenderInHeadless Field Value bool LAN_DISCOVERY public const ulong LAN_DISCOVERY = 17392885680301928799 Field Value ulong LAN_DISCOVERY_RESPONSE public const ulong LAN_DISCOVERY_RESPONSE = 1251984615806071114 Field Value ulong LagCompensationDebug [HideInInspector] public bool LagCompensationDebug Field Value bool MaxPredicatedTicks [Tooltip(\"Max number of ticks the client is allowed to predict.\")] [Range(1, 128)] public int MaxPredicatedTicks Field Value int MaxSendableDataSize [Tooltip(\"Max data size [bytes] that can be sent to a peer in a single tick. Default: 13000\")] [SerializeField] public int MaxSendableDataSize Field Value int PhysicsType [Tooltip(\"Type of the physics scene. If you choose None, Netick will not step the simulation. If you want to use Box2D physics (Rigidbody 2D) select Physics 2D. Or if you want to use NVIDIA PhysX (Rigidbody), select 3D Physics.\")] public PhysicsType PhysicsType Field Value PhysicsType PredictedClientPhysics [Tooltip(\"Enable this if you want to be able to have client-side prediction over Rigidbody objects. \\n\\nIt's recommended to keep this disabled if you don't have any predictable rigidbody objects in your game, because it comes at a performance hit due to calling the physics system Simulate method several times per tick.\")] [SerializeField] public bool PredictedClientPhysics Field Value bool ReceiveBufferSize [SerializeField] public int ReceiveBufferSize Field Value int RenderInvokeOrder [Tooltip(\"Choose the place where Network Render will be invoked. Update means it will be invoked after all Netick NetworkUpdate callbacks, but before any of Unity LateUpdate callbacks. LateUpdate means it will be invoked after all Unity Update callbacks and all Netick NetworkUpdate callbacks. \")] public NetworkRenderInvokeOrder RenderInvokeOrder Field Value NetworkRenderInvokeOrder Replication [Tooltip(\"Replication mode used in replicating game state to clients.\")] public ReplicationMode Replication Field Value ReplicationMode SendBufferSize [SerializeField] public int SendBufferSize Field Value int ServerDivisor [Range(1, 5)] [SerializeField] public int ServerDivisor Field Value int SimClientLoss [Tooltip(\"Simulated client outward packet loss.\")] [HideInInspector] public float SimClientLoss Field Value float SimServerLoss [Tooltip(\"Simulated server outward packet loss.\")] [HideInInspector] public float SimServerLoss Field Value float TickRate [HideInInspector] [Range(1, 240)] [Tooltip(\"Network simulation rate [ticks per second]. Overrides <b>Time.fixedDeltaTime</b> when starting Netick. Must not be changed at runtime. Default: 33\")] public float TickRate Field Value float Timeout [SerializeField] public int Timeout Field Value int UseSceneSwitchThread [HideInInspector] public bool UseSceneSwitchThread Field Value bool WorldSize [HideInInspector] public int WorldSize Field Value int Properties GetMaxPlayers public int GetMaxPlayers { get; } Property Value int TickPeriod [Tooltip(\"Time period between network simulation steps. Same as UnityEngine.Time.fixedDeltaTime\")] public float TickPeriod { get; } Property Value float Methods GetTransport() public NetworkTransport GetTransport() Returns NetworkTransport"
  },
  "api/Netick.NetickConfigData.html": {
    "href": "api/Netick.NetickConfigData.html",
    "title": "Struct NetickConfigData | Netick Networking Engine",
    "summary": "Struct NetickConfigData Namespace Netick Assembly Netick.dll public struct NetickConfigData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields AllocatorMetaBlockSize public int AllocatorMetaBlockSize Field Value int AllocatorStateBlockSize public int AllocatorStateBlockSize Field Value int AoICellSize public float AoICellSize Field Value float AoIWorldSize public Vector3 AoIWorldSize Field Value Vector3 BurstBuffering public bool BurstBuffering Field Value bool EnableInterestManagement public bool EnableInterestManagement Field Value bool EnableLagCompensation public bool EnableLagCompensation Field Value bool EnableLagCompensationDebug public bool EnableLagCompensationDebug Field Value bool EnableLogging public bool EnableLogging Field Value bool EnableSimulationCulling public bool EnableSimulationCulling Field Value bool EnableSpatialPrioritization public bool EnableSpatialPrioritization Field Value bool InputReuseAtLowFPS public bool InputReuseAtLowFPS Field Value bool InterestGroupCount public int InterestGroupCount Field Value int InvokeNetworkUpdate public bool InvokeNetworkUpdate Field Value bool KickClientForBadRpc public bool KickClientForBadRpc Field Value bool MaxDataPerConnectionPerTickInBytes public int MaxDataPerConnectionPerTickInBytes Field Value int MaxInterpolationBufferCount public int MaxInterpolationBufferCount Field Value int MaxObjects public int MaxObjects Field Value int MaxPlayers public int MaxPlayers Field Value int MaxPredictedTicks public int MaxPredictedTicks Field Value int SavedSnapshotsCount public int SavedSnapshotsCount Field Value int ServerDivisor public int ServerDivisor Field Value int TickRate public float TickRate Field Value float TransportReceiveBufferSize public int TransportReceiveBufferSize Field Value int TransportSendBufferSize public int TransportSendBufferSize Field Value int TransportTimeout public int TransportTimeout Field Value int"
  },
  "api/Netick.NetickCoreComponent.html": {
    "href": "api/Netick.NetickCoreComponent.html",
    "title": "Class NetickCoreComponent | Netick Networking Engine",
    "summary": "Class NetickCoreComponent Namespace Netick Assembly Netick.Unity.dll public class NetickCoreComponent : NetickBehaviour, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetickCoreComponent Implements INetickScript Derived PhysicsSimulationStep Inherited Members NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetickCoreComponent() public NetickCoreComponent()"
  },
  "api/Netick.NetickEndPoint.html": {
    "href": "api/Netick.NetickEndPoint.html",
    "title": "Class NetickEndPoint | Netick Networking Engine",
    "summary": "Class NetickEndPoint Namespace Netick Assembly Netick.dll public class NetickEndPoint : IPEndPoint, IEndPoint Inheritance object EndPoint IPEndPoint NetickEndPoint Implements IEndPoint Inherited Members IPEndPoint.MaxPort IPEndPoint.MinPort IPEndPoint.Create(SocketAddress) IPEndPoint.Equals(object) IPEndPoint.GetHashCode() IPEndPoint.Serialize() IPEndPoint.ToString() IPEndPoint.Address IPEndPoint.AddressFamily IPEndPoint.Port object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods IPEndPointExt.ToNetickEndPoint(IPEndPoint) Constructors NetickEndPoint(IPAddress, int) public NetickEndPoint(IPAddress ip, int port) Parameters ip IPAddress port int"
  },
  "api/Netick.NetickEngine.html": {
    "href": "api/Netick.NetickEngine.html",
    "title": "Class NetickEngine | Netick Networking Engine",
    "summary": "Class NetickEngine Namespace Netick Assembly Netick.dll public sealed class NetickEngine Inheritance object NetickEngine Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetickEngine() public NetickEngine() Fields ClientSimulationCallbacks public readonly List<IClientSimulationCallbacks> ClientSimulationCallbacks Field Value List<IClientSimulationCallbacks> SimulatedLossIn public float SimulatedLossIn Field Value float SimulatedLossOut public float SimulatedLossOut Field Value float Properties AuthoritativeTick public Tick AuthoritativeTick { get; } Property Value Tick Client public Client Client { get; } Property Value Client ClientSimulation public ClientSimulation ClientSimulation { get; } Property Value ClientSimulation Config public NetickConfigData Config { get; } Property Value NetickConfigData ConnectedClients A list containing all connected clients currently. Note: if you want the clients + the server, use ConnectedPlayers. public IReadOnlyList<ServerConnection> ConnectedClients { get; } Property Value IReadOnlyList<ServerConnection> ConnectedPlayers A list containing all connected clients currently, in addition to the server. Note: if you only want the clients, use ConnectedClients. public IReadOnlyList<NetworkPlayer> ConnectedPlayers { get; } Property Value IReadOnlyList<NetworkPlayer> CurrentRpcCaller public NetworkPlayer CurrentRpcCaller { get; } Property Value NetworkPlayer CurrentRpcSource public NetworkConnection CurrentRpcSource { get; } Property Value NetworkConnection Entities public IReadOnlyDictionary<int, Entity> Entities { get; } Property Value IReadOnlyDictionary<int, Entity> FixedDeltaTime Time period between simulation ticks. public float FixedDeltaTime { get; } Property Value float InKBps Incoming data in kilobytes per second (KBps). public float InKBps { get; } Property Value float InPacketLoss [Client Only] Estimation of incoming packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost. public float InPacketLoss { get; } Property Value float InputEnabled public bool InputEnabled { get; set; } Property Value bool InterestManagement public InterestManagement InterestManagement { get; } Property Value InterestManagement InterpolationDelay [Client Only] Interpolation delay in seconds. public float InterpolationDelay { get; } Property Value float IsClient public bool IsClient { get; } Property Value bool IsConnected [Client Only] Returns true if this client is currently connected to a server. public bool IsConnected { get; } Property Value bool IsIMEnabled public bool IsIMEnabled { get; } Property Value bool IsInvokingNetworkRender public bool IsInvokingNetworkRender { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input/tick of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsRunning public bool IsRunning { get; } Property Value bool IsServer public bool IsServer { get; } Property Value bool LagCompensation public INetickComponent LagCompensation { get; } Property Value INetickComponent LocalInterpolation public LocalInterpolation LocalInterpolation { get; } Property Value LocalInterpolation LocalPeer public NetworkPeer LocalPeer { get; } Property Value NetworkPeer LocalPlayer public NetworkPeer LocalPlayer { get; } Property Value NetworkPeer MaxClients public int MaxClients { get; } Property Value int Monitor public Monitor Monitor { get; } Property Value Monitor Name public string Name { get; } Property Value string OnPostNetworkStart public Action OnPostNetworkStart { get; set; } Property Value Action OnTickEnd public Action OnTickEnd { get; set; } Property Value Action OnTickStart public Action OnTickStart { get; set; } Property Value Action OutKBps Outgoing data in kilobytes per second (KBps). public float OutKBps { get; } Property Value float OutPacketLoss [Client Only] Estimation of outgoing packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost. public float OutPacketLoss { get; } Property Value float Port public int Port { get; } Property Value int PostNetworkFixedUpdate public Action PostNetworkFixedUpdate { get; set; } Property Value Action PostResimulation public Action PostResimulation { get; set; } Property Value Action PostRollback public Action PostRollback { get; set; } Property Value Action PreClientResimulation public Action PreClientResimulation { get; set; } Property Value Action PreNetworkFixedUpdate public Action PreNetworkFixedUpdate { get; set; } Property Value Action PreResimulation public Action PreResimulation { get; set; } Property Value Action PreRollback public Action PreRollback { get; set; } Property Value Action PredictedTick public Tick PredictedTick { get; } Property Value Tick RTT [Client Only] The round-trip time (RTT) of the client in seconds. public double RTT { get; } Property Value double RemoteInterpolation public RemoteInterpolation RemoteInterpolation { get; } Property Value RemoteInterpolation Server public Server Server { get; } Property Value Server ServerEndPoint [Client Only] The IPEndPoint of the server you are connected to. Returns null if you are not connected to any server, or if you are the server. public IEndPoint ServerEndPoint { get; } Property Value IEndPoint ServerSimulation public ServerSimulation ServerSimulation { get; } Property Value ServerSimulation Simulate public bool Simulate { get; set; } Property Value bool Simulation public Simulation Simulation { get; } Property Value Simulation SimulationTick public Tick SimulationTick { get; } Property Value Tick SnapshotTick public Tick SnapshotTick { get; } Property Value Tick StartMode public NetickStartMode StartMode { get; } Property Value NetickStartMode Tick public Tick Tick { get; } Property Value Tick Timer public SimulationClock Timer { get; } Property Value SimulationClock Transport public NetworkTransport Transport { get; } Property Value NetworkTransport UserObject public object UserObject { get; set; } Property Value object Methods AttachBehaviour(INetickScript) Attachs a INetickScript to the simulation. public void AttachBehaviour(INetickScript behaviour) Parameters behaviour INetickScript ClientAddEntity(INetickEntity, int, int, NetworkPlayer, bool, NetickEntityMeta) public void ClientAddEntity(INetickEntity entity, int id, int worldIndex, NetworkPlayer player, bool wasUnliked, NetickEntityMeta meta) Parameters entity INetickEntity id int worldIndex int player NetworkPlayer wasUnliked bool meta NetickEntityMeta ClientAddUnlinkedEntity(Entity, int, int) public void ClientAddUnlinkedEntity(Entity entity, int id, int worldIndex) Parameters entity Entity id int worldIndex int Connect(int, string, byte[], int) public void Connect(int port, string ip, byte[] connectionData = null, int connectionDataLength = 0) Parameters port int ip string connectionData byte[] connectionDataLength int CreateAndLinkEntityLocal(INetickEntity) public Entity CreateAndLinkEntityLocal(INetickEntity userEntity) Parameters userEntity INetickEntity Returns Entity CreateEntity(int) public Entity CreateEntity(int stateSizeWords) Parameters stateSizeWords int Returns Entity DeattachBehaviour(INetickScript) Deattachs a INetickScript from the simulation. public void DeattachBehaviour(INetickScript behaviour) Parameters behaviour INetickScript DestroyEntity(Entity, bool, bool) public void DestroyEntity(Entity entity, bool instant, bool freeMemory) Parameters entity Entity instant bool freeMemory bool DisconnectFromServer() [Client Only] Disconnects this client from the server. public void DisconnectFromServer() DisconnectHost() public void DisconnectHost() FetchInput<T>(out T, ref bool, Entity, int) public bool FetchInput<T>(out T input, ref bool isDuplicated, Entity entity, int localPlayerIndex) where T : unmanaged Parameters input T isDuplicated bool entity Entity localPlayerIndex int Returns bool Type Parameters T ~NetickEngine() protected ~NetickEngine() GetBehaviourOrder(Type) public int GetBehaviourOrder(Type type) Parameters type Type Returns int GetEntityMeta(Entity) public NetickEntityMeta* GetEntityMeta(Entity entity) Parameters entity Entity Returns NetickEntityMeta* GetEntityUserMeta(Entity) public byte* GetEntityUserMeta(Entity entity) Parameters entity Entity Returns byte* GetInput<T>(int) public T GetInput<T>(int index = 0) where T : unmanaged Parameters index int Returns T Type Parameters T InvokeOnPlayerConnectedForHost() public void InvokeOnPlayerConnectedForHost() Kick(ServerConnection) public void Kick(ServerConnection connection) Parameters connection ServerConnection LinkEntity(INetickEntity, Entity) public Entity LinkEntity(INetickEntity userEntity, Entity entity) Parameters userEntity INetickEntity entity Entity Returns Entity Render() Call this to invoke NetworkRender on simulated entities. This might not be needed if you are running a headless build. public void Render() ResetForSceneSwitch() public void ResetForSceneSwitch() ServerAddEntity(NetworkPlayer, INetickEntity) public void ServerAddEntity(NetworkPlayer inputSource, INetickEntity obj) Parameters inputSource NetworkPlayer obj INetickEntity SetEntityMetaDirty(Entity) public void SetEntityMetaDirty(Entity entity) Parameters entity Entity SetEntityUserMetaDirty(Entity, int*) public void SetEntityUserMetaDirty(Entity entity, int* userData) Parameters entity Entity userData int* SetInput<T>(T, int) public void SetInput<T>(T input, int index = 0) where T : unmanaged Parameters input T index int Type Parameters T Shutdown() public void Shutdown() Start(string, int, NetickStartMode, IGameEngine, NetickConfigData, NetworkTransport, ReflectionData, INetickLogger, IMemoryAllocator) public void Start(string name, int serverPort, NetickStartMode startMode, IGameEngine gameEngine, NetickConfigData config, NetworkTransport transport, ReflectionData reflectionData, INetickLogger logger, IMemoryAllocator allocator) Parameters name string serverPort int startMode NetickStartMode gameEngine IGameEngine config NetickConfigData transport NetworkTransport reflectionData ReflectionData logger INetickLogger allocator IMemoryAllocator Update(float, float) Update Netick's logic. public void Update(float deltaTime, float timeScale) Parameters deltaTime float timeScale float"
  },
  "api/Netick.NetickEntityMeta.html": {
    "href": "api/Netick.NetickEntityMeta.html",
    "title": "Struct NetickEntityMeta | Netick Networking Engine",
    "summary": "Struct NetickEntityMeta Namespace Netick Assembly Netick.dll public struct NetickEntityMeta Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Id public int Id Field Value int InputSourceId public int InputSourceId Field Value int InstanceCounter public int InstanceCounter Field Value int InterestIndex public int InterestIndex Field Value int StateSizeWords public int StateSizeWords Field Value int Properties IsDestroyed public bool IsDestroyed { get; } Property Value bool"
  },
  "api/Netick.NetickList-1.html": {
    "href": "api/Netick.NetickList-1.html",
    "title": "Class NetickList<T> | Netick Networking Engine",
    "summary": "Class NetickList<T> Namespace Netick Assembly Netick.dll public sealed class NetickList<T> : IEnumerable<T>, IEnumerable Type Parameters T Inheritance object NetickList<T> Implements IEnumerable<T> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetickList(int) public NetickList(int count = 4) Parameters count int Properties Count public int Count { get; } Property Value int this[int] public T this[int i] { get; } Parameters i int Property Value T Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/Netick.NetickLogger.html": {
    "href": "api/Netick.NetickLogger.html",
    "title": "Class NetickLogger | Netick Networking Engine",
    "summary": "Class NetickLogger Namespace Netick Assembly Netick.dll public static class NetickLogger Inheritance object NetickLogger Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Assert(bool) public static void Assert(bool condition) Parameters condition bool Assert(bool, object) public static void Assert(bool condition, object message) Parameters condition bool message object Log(NetickEngine, object) public static void Log(NetickEngine engine, object message) Parameters engine NetickEngine message object Log(object) public static void Log(object message) Parameters message object LogError(Entity, object, object) public static void LogError(Entity obj, object message, object targetScript = null) Parameters obj Entity message object targetScript object LogError(NetickEngine, object) public static void LogError(NetickEngine engine, object message) Parameters engine NetickEngine message object LogError(object, object) public static void LogError(object message, object targetScript = null) Parameters message object targetScript object LogWarning(object) public static void LogWarning(object message) Parameters message object SetLogger(INetickLogger) public static void SetLogger(INetickLogger logger) Parameters logger INetickLogger"
  },
  "api/Netick.NetickProfiler.html": {
    "href": "api/Netick.NetickProfiler.html",
    "title": "Class NetickProfiler | Netick Networking Engine",
    "summary": "Class NetickProfiler Namespace Netick Assembly Netick.dll public sealed class NetickProfiler Inheritance object NetickProfiler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetickProfiler() public NetickProfiler() Properties BytesPerPacketIn public FloatStats BytesPerPacketIn { get; } Property Value FloatStats BytesPerPacketOut public FloatStats BytesPerPacketOut { get; } Property Value FloatStats FPS public FloatStats FPS { get; } Property Value FloatStats RTT public FloatStats RTT { get; } Property Value FloatStats Resimulations public FloatStats Resimulations { get; } Property Value FloatStats"
  },
  "api/Netick.NetickRay.html": {
    "href": "api/Netick.NetickRay.html",
    "title": "Struct NetickRay | Netick Networking Engine",
    "summary": "Struct NetickRay Namespace Netick Assembly Netick.Pro.dll public struct NetickRay Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickRay(Vector3, Vector3) public NetickRay(Vector3 origin, Vector3 direction) Parameters origin Vector3 direction Vector3 Fields Direction public Vector3 Direction Field Value Vector3 Origin public Vector3 Origin Field Value Vector3"
  },
  "api/Netick.NetickStartMode.html": {
    "href": "api/Netick.NetickStartMode.html",
    "title": "Enum NetickStartMode | Netick Networking Engine",
    "summary": "Enum NetickStartMode Namespace Netick Assembly Netick.dll public enum NetickStartMode Fields Client = 1 Host = 2 Server = 0 SinglePlayer = 3"
  },
  "api/Netick.NetickTransport.html": {
    "href": "api/Netick.NetickTransport.html",
    "title": "Class NetickTransport | Netick Networking Engine",
    "summary": "Class NetickTransport Namespace Netick Assembly Netick.dll public class NetickTransport : NetworkTransport Inheritance object NetworkTransport NetickTransport Inherited Members NetworkTransport.ForceUpdate() NetworkTransport.OnMatchListUpdate(List<Session>) NetworkTransport.UpdateMatchList() NetworkTransport.HostMatch(string) NetworkTransport.NetworkPeer NetworkTransport.Engine object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetickTransport() public NetickTransport() Methods Connect(string, int, byte[], int) public override void Connect(string address, int port, byte[] connectionData, int connectionDataLength) Parameters address string port int connectionData byte[] connectionDataLength int Disconnect(TransportConnection) public override void Disconnect(TransportConnection connection) Parameters connection TransportConnection Init() public override void Init() OnConnectFailed(IEndPoint, ConnectionFailedReason) public void OnConnectFailed(IEndPoint address, ConnectionFailedReason reason) Parameters address IEndPoint reason ConnectionFailedReason OnConnectRequest(NetworkConnectionRequest) public void OnConnectRequest(NetworkConnectionRequest request) Parameters request NetworkConnectionRequest OnReceive(Connection, BitBuffer) public void OnReceive(Connection peer, BitBuffer reader) Parameters peer Connection reader BitBuffer PollEvents() public override void PollEvents() Run(RunMode, int) public override void Run(RunMode mode, int port) Parameters mode RunMode port int Shutdown() public override void Shutdown()"
  },
  "api/Netick.NetickTransportConnection.html": {
    "href": "api/Netick.NetickTransportConnection.html",
    "title": "Class NetickTransportConnection | Netick Networking Engine",
    "summary": "Class NetickTransportConnection Namespace Netick Assembly Netick.dll public class NetickTransportConnection : TransportConnection Inheritance object TransportConnection NetickTransportConnection Inherited Members TransportConnection.SendUserData(IntPtr, int, TransportDeliveryMethod) TransportConnection.AssociatedNetworkConnection object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetickTransportConnection() public NetickTransportConnection() Fields Peer public Connection Peer Field Value Connection Properties EndPoint public override IEndPoint EndPoint { get; } Property Value IEndPoint Mtu public override int Mtu { get; } Property Value int Methods Send(IntPtr, int) public override void Send(IntPtr ptr, int length) Parameters ptr IntPtr length int"
  },
  "api/Netick.NetickUniqueObjectMeta.html": {
    "href": "api/Netick.NetickUniqueObjectMeta.html",
    "title": "Class NetickUniqueObjectMeta | Netick Networking Engine",
    "summary": "Class NetickUniqueObjectMeta Namespace Netick Assembly Netick.dll public sealed class NetickUniqueObjectMeta Inheritance object NetickUniqueObjectMeta Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetickUniqueObjectMeta() public NetickUniqueObjectMeta() Fields BehaviourToOffset public List<int> BehaviourToOffset Field Value List<int> Hash public int Hash Field Value int PropertyElementsToPropertyStartIndex public Dictionary<int, OnChangedMethod> PropertyElementsToPropertyStartIndex Field Value Dictionary<int, OnChangedMethod> PropertyNameToSmoothMetaData public Dictionary<string, SmoothMetaData> PropertyNameToSmoothMetaData Field Value Dictionary<string, SmoothMetaData>"
  },
  "api/Netick.NetickUnityUtils.html": {
    "href": "api/Netick.NetickUnityUtils.html",
    "title": "Class NetickUnityUtils | Netick Networking Engine",
    "summary": "Class NetickUnityUtils Namespace Netick Assembly Netick.Unity.dll public class NetickUnityUtils Inheritance object NetickUnityUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetickUnityUtils() public NetickUnityUtils() Methods GetColor(int*, float) public static Color GetColor(int* data, float precision) Parameters data int* precision float Returns Color GetFloat(int*, float) public static float GetFloat(int* data, float precision) Parameters data int* precision float Returns float GetQuaternion(int*, float) public static Quaternion GetQuaternion(int* data, float precision) Parameters data int* precision float Returns Quaternion GetVector2(int*, float) public static Vector2 GetVector2(int* data, float precision) Parameters data int* precision float Returns Vector2 GetVector3(int*, float) public static Vector3 GetVector3(int* data, float precision) Parameters data int* precision float Returns Vector3 SetColor(int*, Color, float) public static void SetColor(int* data, Color value, float precisionInverse) Parameters data int* value Color precisionInverse float SetFloat(int*, float, float) public static void SetFloat(int* data, float value, float precisionInverse) Parameters data int* value float precisionInverse float SetQuaternion(int*, Quaternion, float) public static void SetQuaternion(int* data, Quaternion value, float precisionInverse) Parameters data int* value Quaternion precisionInverse float SetVector2(int*, Vector2, float) public static void SetVector2(int* data, Vector2 value, float precisionInverse) Parameters data int* value Vector2 precisionInverse float SetVector3(int*, Vector3, float) public static void SetVector3(int* data, Vector3 value, float precisionInverse) Parameters data int* value Vector3 precisionInverse float Vector3NetickToUnity(NetickVector3) public static Vector3 Vector3NetickToUnity(NetickVector3 from) Parameters from NetickVector3 Returns Vector3 Vector3UnityToNetick(Vector3) public static NetickVector3 Vector3UnityToNetick(Vector3 from) Parameters from Vector3 Returns NetickVector3"
  },
  "api/Netick.NetickUtils.html": {
    "href": "api/Netick.NetickUtils.html",
    "title": "Class NetickUtils | Netick Networking Engine",
    "summary": "Class NetickUtils Namespace Netick Assembly Netick.dll public static class NetickUtils Inheritance object NetickUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ceiling(int) public static int Ceiling(int v) Parameters v int Returns int Clamp01(float) public static float Clamp01(float a) Parameters a float Returns float GetAllSubclassOf(Type) public static List<Type> GetAllSubclassOf(Type parent) Parameters parent Type Returns List<Type> GetMethodName(MethodInfo) public static string GetMethodName(MethodInfo method) Parameters method MethodInfo Returns string GetStableHashCode(string) public static int GetStableHashCode(this string str) Parameters str string Returns int GetWordSize(int) public static int GetWordSize(int byteSize) Parameters byteSize int Returns int GetWordSize(int, int) public static int GetWordSize(int byteSize, int alignment) Parameters byteSize int alignment int Returns int Lerp(float, float, float) public static float Lerp(float a, float b, float t) Parameters a float b float t float Returns float LoadStringFromPtr(StringBuilder, int*, int) public static string LoadStringFromPtr(StringBuilder cache, int* ptr, int charCount) Parameters cache StringBuilder ptr int* charCount int Returns string PowerOfTwo(int) public static int PowerOfTwo(int depth) Parameters depth int Returns int SetPtrString(INetickNetworkScript, string, int*, int, int, int) public static void SetPtrString(INetickNetworkScript beh, string newVal, int* ptr, int charCount, int hasOnChanged, int isInputSourceOnly) Parameters beh INetickNetworkScript newVal string ptr int* charCount int hasOnChanged int isInputSourceOnly int"
  },
  "api/Netick.NetickVector2Int.html": {
    "href": "api/Netick.NetickVector2Int.html",
    "title": "Struct NetickVector2Int | Netick Networking Engine",
    "summary": "Struct NetickVector2Int Namespace Netick Assembly Netick.dll public struct NetickVector2Int Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickVector2Int(int, int) public NetickVector2Int(int x, int z) Parameters x int z int Fields X public int X Field Value int Z public int Z Field Value int Methods ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetickVector3.html": {
    "href": "api/Netick.NetickVector3.html",
    "title": "Struct NetickVector3 | Netick Networking Engine",
    "summary": "Struct NetickVector3 Namespace Netick Assembly Netick.dll public struct NetickVector3 Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickVector3(float, float, float) public NetickVector3(float x, float y, float z) Parameters x float y float z float Fields X public float X Field Value float Y public float Y Field Value float Z public float Z Field Value float Properties this[int] public float this[int index] { get; set; } Parameters index int Property Value float SqrMagnitude public float SqrMagnitude { get; } Property Value float Methods Equals(NetickVector3) public bool Equals(NetickVector3 other) Parameters other NetickVector3 Returns bool Equals(object) public override bool Equals(object other) Parameters other object Returns bool GetHashCode() public override int GetHashCode() Returns int Max(NetickVector3, NetickVector3) public static NetickVector3 Max(NetickVector3 lhs, NetickVector3 rhs) Parameters lhs NetickVector3 rhs NetickVector3 Returns NetickVector3 Min(NetickVector3, NetickVector3) public static NetickVector3 Min(NetickVector3 lhs, NetickVector3 rhs) Parameters lhs NetickVector3 rhs NetickVector3 Returns NetickVector3 Operators operator +(NetickVector3, NetickVector3) public static NetickVector3 operator +(NetickVector3 a, NetickVector3 b) Parameters a NetickVector3 b NetickVector3 Returns NetickVector3 operator /(NetickVector3, float) public static NetickVector3 operator /(NetickVector3 a, float d) Parameters a NetickVector3 d float Returns NetickVector3 operator ==(NetickVector3, NetickVector3) public static bool operator ==(NetickVector3 lhs, NetickVector3 rhs) Parameters lhs NetickVector3 rhs NetickVector3 Returns bool operator !=(NetickVector3, NetickVector3) public static bool operator !=(NetickVector3 lhs, NetickVector3 rhs) Parameters lhs NetickVector3 rhs NetickVector3 Returns bool operator *(NetickVector3, float) public static NetickVector3 operator *(NetickVector3 a, float d) Parameters a NetickVector3 d float Returns NetickVector3 operator *(float, NetickVector3) public static NetickVector3 operator *(float d, NetickVector3 a) Parameters d float a NetickVector3 Returns NetickVector3 operator -(NetickVector3, NetickVector3) public static NetickVector3 operator -(NetickVector3 a, NetickVector3 b) Parameters a NetickVector3 b NetickVector3 Returns NetickVector3 operator -(NetickVector3) public static NetickVector3 operator -(NetickVector3 a) Parameters a NetickVector3 Returns NetickVector3"
  },
  "api/Netick.NetickVector3Int.html": {
    "href": "api/Netick.NetickVector3Int.html",
    "title": "Struct NetickVector3Int | Netick Networking Engine",
    "summary": "Struct NetickVector3Int Namespace Netick Assembly Netick.dll public struct NetickVector3Int Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickVector3Int(int, int, int) public NetickVector3Int(int x, int y, int z) Parameters x int y int z int Fields X public int X Field Value int Y public int Y Field Value int Z public int Z Field Value int Methods ToString() public override string ToString() Returns string"
  },
  "api/Netick.Network.Sandboxs.html": {
    "href": "api/Netick.Network.Sandboxs.html",
    "title": "Struct Network.Sandboxs | Netick Networking Engine",
    "summary": "Struct Network.Sandboxs Namespace Netick Assembly Netick.Unity.dll public struct Network.Sandboxs Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Clients public NetworkSandbox[] Clients Field Value NetworkSandbox[] Server public NetworkSandbox Server Field Value NetworkSandbox"
  },
  "api/Netick.Network.html": {
    "href": "api/Netick.Network.html",
    "title": "Class Network | Netick Networking Engine",
    "summary": "Class Network Namespace Netick Assembly Netick.Unity.dll [HideInInspector] [DisallowMultipleComponent] public sealed class Network : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Network Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Properties Config public static NetickConfig Config { get; } Property Value NetickConfig Instance public static Network Instance { get; } Property Value Network IsHeadless public static bool IsHeadless { get; } Property Value bool IsRunning public static bool IsRunning { get; } Property Value bool StartMode public StartMode StartMode { get; } Property Value StartMode Version public static string Version { get; } Property Value string Methods Focus(NetworkSandbox) Focus on a specific sandbox. public static void Focus(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox The sandbox to focus on. Init(NetworkTransport, NetickConfig, int) Initializes Netick. This is automatically called when you start Netick. If you don't provide a NetickConfig, Netick will use the default config, which can be modified/found in (Netick -> Settings). If you don't provide a NetworkTransport, Netick will use the transport assigned in (Netick -> Settings -> Transport). public static void Init(NetworkTransport transport = null, NetickConfig config = null, int sceneBuildIndex = -1) Parameters transport NetworkTransport config NetickConfig sceneBuildIndex int Shutdown(bool) Shuts down Netick and destroys all sandboxes. The shutdown will occur in the next frame. For immediate shutdown, use: ShutdownImmediately(bool) public static void Shutdown(bool destroyAllNetworkObjects = false) Parameters destroyAllNetworkObjects bool ShutdownImmediately(bool) Shuts down Netick and destroys all sandboxes immediately. public static void ShutdownImmediately(bool destroyAllNetworkObjects = false) Parameters destroyAllNetworkObjects bool ShutdownSandbox(NetworkSandbox, bool) Shuts down a specific sandbox. public static void ShutdownSandbox(NetworkSandbox sandbox, bool destroyAllNetworkObjects = false) Parameters sandbox NetworkSandbox The sandbox to shut down. destroyAllNetworkObjects bool StartAsClient(NetworkTransportProvider, int, GameObject) Starts Netick as a client. public static NetworkSandbox StartAsClient(NetworkTransportProvider transportProvider, int port, GameObject prefab = null) Parameters transportProvider NetworkTransportProvider port int prefab GameObject Returns NetworkSandbox The sandbox representing the client StartAsServer(NetworkTransportProvider, int, GameObject) Starts Netick as a server. public static NetworkSandbox StartAsServer(NetworkTransportProvider transportProvider, int port, GameObject prefab = null) Parameters transportProvider NetworkTransportProvider port int Network port. prefab GameObject Returns NetworkSandbox The sandbox representing the server StartAsServerAndClient(NetworkTransportProvider, int, GameObject, int) Starts both a client (or clients) and a server. public static Network.Sandboxs StartAsServerAndClient(NetworkTransportProvider transportProvider, int serverPort, GameObject prefab = null, int numOfClients = 1) Parameters transportProvider NetworkTransportProvider serverPort int Network port. prefab GameObject numOfClients int Number of client sandboxs to create. Returns Network.Sandboxs"
  },
  "api/Netick.NetworkAnimator.html": {
    "href": "api/Netick.NetworkAnimator.html",
    "title": "Class NetworkAnimator | Netick Networking Engine",
    "summary": "Class NetworkAnimator Namespace Netick Assembly Netick.Unity.dll [IgnoreCodeGen] public class NetworkAnimator : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour NetworkAnimator Implements INetickNetworkScript INetickScript Inherited Members NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator<T>(string) NetworkBehaviour.GameEngineIntoNetcode() NetworkBehaviour.NetcodeIntoGameEngine() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.InternalGetStateSizeWords() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkAnimator() public NetworkAnimator()"
  },
  "api/Netick.NetworkArray-1.html": {
    "href": "api/Netick.NetworkArray-1.html",
    "title": "Class NetworkArray<T> | Netick Networking Engine",
    "summary": "Class NetworkArray<T> Namespace Netick Assembly Netick.Unity.dll [HideInInspector] public class NetworkArray<T> : NetworkArray, INetworkArray, IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Inheritance object NetworkArray NetworkArray<T> Implements INetworkArray IEnumerable<T> IEnumerable Inherited Members NetworkArray.Length object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkArray(int) public NetworkArray(int capacity) Parameters capacity int Properties this[int] public T this[int i] { get; set; } Parameters i int Property Value T Methods Add(T) public void Add(T element) Parameters element T GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> InternalInit(INetickNetworkScript, int*, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords) Parameters beh INetickNetworkScript state int* elementSizeWords int InternalReset() public override void InternalReset()"
  },
  "api/Netick.NetworkArray.html": {
    "href": "api/Netick.NetworkArray.html",
    "title": "Class NetworkArray | Netick Networking Engine",
    "summary": "Class NetworkArray Namespace Netick Assembly Netick.Unity.dll public class NetworkArray : INetworkArray Inheritance object NetworkArray Implements INetworkArray Derived NetworkArray<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkArray() public NetworkArray() Properties Length public int Length { get; } Property Value int Methods InternalInit(INetickNetworkScript, int*, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords) Parameters beh INetickNetworkScript state int* elementSizeWords int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.NetworkArrayMeta.html": {
    "href": "api/Netick.NetworkArrayMeta.html",
    "title": "Enum NetworkArrayMeta | Netick Networking Engine",
    "summary": "Enum NetworkArrayMeta Namespace Netick Assembly Netick.dll [Flags] public enum NetworkArrayMeta Fields HasOnChanged = 2 IsInputSourceOnly = 1 None = 0"
  },
  "api/Netick.NetworkArrayStruct16-1.html": {
    "href": "api/Netick.NetworkArrayStruct16-1.html",
    "title": "Struct NetworkArrayStruct16<T> | Netick Networking Engine",
    "summary": "Struct NetworkArrayStruct16<T> Namespace Netick Assembly Netick.dll [Networked(16, Relevancy.Everyone, 0.001)] public struct NetworkArrayStruct16<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties this[int] public T this[int i] { get; set; } Parameters i int Property Value T Length public int Length { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> Set(int, T) public NetworkArrayStruct16<T> Set(int index, T value) Parameters index int value T Returns NetworkArrayStruct16<T> ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkArrayStruct32-1.html": {
    "href": "api/Netick.NetworkArrayStruct32-1.html",
    "title": "Struct NetworkArrayStruct32<T> | Netick Networking Engine",
    "summary": "Struct NetworkArrayStruct32<T> Namespace Netick Assembly Netick.dll [Networked(32, Relevancy.Everyone, 0.001)] public struct NetworkArrayStruct32<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties this[int] public T this[int i] { get; set; } Parameters i int Property Value T Length public int Length { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> Set(int, T) public NetworkArrayStruct32<T> Set(int index, T value) Parameters index int value T Returns NetworkArrayStruct32<T> ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkArrayStruct4-1.html": {
    "href": "api/Netick.NetworkArrayStruct4-1.html",
    "title": "Struct NetworkArrayStruct4<T> | Netick Networking Engine",
    "summary": "Struct NetworkArrayStruct4<T> Namespace Netick Assembly Netick.dll [Networked(4, Relevancy.Everyone, 0.001)] public struct NetworkArrayStruct4<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties this[int] public T this[int i] { get; set; } Parameters i int Property Value T Length public int Length { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> Set(int, T) public NetworkArrayStruct4<T> Set(int index, T value) Parameters index int value T Returns NetworkArrayStruct4<T> ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkArrayStruct64-1.html": {
    "href": "api/Netick.NetworkArrayStruct64-1.html",
    "title": "Struct NetworkArrayStruct64<T> | Netick Networking Engine",
    "summary": "Struct NetworkArrayStruct64<T> Namespace Netick Assembly Netick.dll [Networked(64, Relevancy.Everyone, 0.001)] public struct NetworkArrayStruct64<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties this[int] public T this[int i] { get; set; } Parameters i int Property Value T Length public int Length { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> Set(int, T) public NetworkArrayStruct64<T> Set(int index, T value) Parameters index int value T Returns NetworkArrayStruct64<T> ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkArrayStruct8-1.html": {
    "href": "api/Netick.NetworkArrayStruct8-1.html",
    "title": "Struct NetworkArrayStruct8<T> | Netick Networking Engine",
    "summary": "Struct NetworkArrayStruct8<T> Namespace Netick Assembly Netick.dll [Networked(8, Relevancy.Everyone, 0.001)] public struct NetworkArrayStruct8<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties this[int] public T this[int i] { get; set; } Parameters i int Property Value T Length public int Length { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> Set(int, T) public NetworkArrayStruct8<T> Set(int index, T value) Parameters index int value T Returns NetworkArrayStruct8<T> ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkBehaviour.html": {
    "href": "api/Netick.NetworkBehaviour.html",
    "title": "Class NetworkBehaviour | Netick Networking Engine",
    "summary": "Class NetworkBehaviour Namespace Netick Assembly Netick.Unity.dll public abstract class NetworkBehaviour : NetickBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour Implements INetickNetworkScript INetickScript Derived GeneratedBehaviourExample NetworkAnimator NetworkTransform Inherited Members NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkBehaviour() protected NetworkBehaviour() Fields S public int* S Field Value int* Properties BehaviourId The network id of this NetworkBehaviour. public int BehaviourId { get; } Property Value int Id The network id of this object. public int Id { get; } Property Value int IsClient Returns true if this NetickEngine is a client. public bool IsClient { get; } Property Value bool IsInputSource Returns true if this LocalPlayer is providing inputs to this Object. public bool IsInputSource { get; } Property Value bool IsOwner Returns true if this NetickEngine is the owner of this Object. In this version of Netick: Server=Owner. public bool IsOwner { get; } Property Value bool IsPredicted public bool IsPredicted { get; } Property Value bool IsProxy Returns true if we neither provide inputs nor own this object. public bool IsProxy { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsServer Returns true if this NetickEngine is the server. public bool IsServer { get; } Property Value bool Methods FetchInput<T>(out T) Fetchs a network input for this tick. Returns false if no input source is currently providing inputs to this Object, or when input loss occurs (in case of a remote input source). public bool FetchInput<T>(out T input) where T : unmanaged Parameters input T Returns bool Type Parameters T FindInterpolator<T>(string) public Interpolator<T> FindInterpolator<T>(string propertyName) where T : unmanaged Parameters propertyName string Returns Interpolator<T> Type Parameters T GameEngineIntoNetcode() public virtual void GameEngineIntoNetcode() InternalGetStateSizeWords() public virtual int InternalGetStateSizeWords() Returns int InternalInit() public virtual void InternalInit() InternalReset() public virtual void InternalReset() NetcodeIntoGameEngine() public virtual void NetcodeIntoGameEngine() NetworkReset() public virtual void NetworkReset() OnInputSourceChanged(NetworkPlayer) public virtual void OnInputSourceChanged(NetworkPlayer previous) Parameters previous NetworkPlayer OnInputSourceLeft() Called on the server when the input source of this Object has disconnected. public virtual void OnInputSourceLeft() OnSpawnPredictionSucceeded() Called on the client when the server confirms that this object has been successfully spawn-predicted and therefore has a valid Id. public virtual void OnSpawnPredictionSucceeded()"
  },
  "api/Netick.NetworkBool.html": {
    "href": "api/Netick.NetworkBool.html",
    "title": "Struct NetworkBool | Netick Networking Engine",
    "summary": "Struct NetworkBool Namespace Netick Assembly Netick.dll public struct NetworkBool : IEquatable<NetworkBool> Implements IEquatable<NetworkBool> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkBool(bool) public NetworkBool(bool value) Parameters value bool Fields RawValue public int RawValue Field Value int Methods Equals(NetworkBool) public bool Equals(NetworkBool other) Parameters other NetworkBool Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToBool() public bool ToBool() Returns bool ToString() public override string ToString() Returns string Operators operator ==(NetworkBool, NetworkBool) public static bool operator ==(NetworkBool a, NetworkBool b) Parameters a NetworkBool b NetworkBool Returns bool operator ==(NetworkBool, bool) public static bool operator ==(NetworkBool a, bool b) Parameters a NetworkBool b bool Returns bool operator ==(bool, NetworkBool) public static bool operator ==(bool a, NetworkBool b) Parameters a bool b NetworkBool Returns bool implicit operator bool(NetworkBool) public static implicit operator bool(NetworkBool val) Parameters val NetworkBool Returns bool implicit operator NetworkBool(bool) public static implicit operator NetworkBool(bool val) Parameters val bool Returns NetworkBool operator !=(NetworkBool, NetworkBool) public static bool operator !=(NetworkBool a, NetworkBool b) Parameters a NetworkBool b NetworkBool Returns bool operator !=(NetworkBool, bool) public static bool operator !=(NetworkBool a, bool b) Parameters a NetworkBool b bool Returns bool operator !=(bool, NetworkBool) public static bool operator !=(bool a, NetworkBool b) Parameters a bool b NetworkBool Returns bool"
  },
  "api/Netick.NetworkBoolExt.html": {
    "href": "api/Netick.NetworkBoolExt.html",
    "title": "Class NetworkBoolExt | Netick Networking Engine",
    "summary": "Class NetworkBoolExt Namespace Netick Assembly Netick.dll public static class NetworkBoolExt Inheritance object NetworkBoolExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ToNetworkBool(bool) public static NetworkBool ToNetworkBool(this bool boolean) Parameters boolean bool Returns NetworkBool"
  },
  "api/Netick.NetworkChannel.html": {
    "href": "api/Netick.NetworkChannel.html",
    "title": "Class NetworkChannel | Netick Networking Engine",
    "summary": "Class NetworkChannel Namespace Netick Assembly Netick.dll public abstract class NetworkChannel Inheritance object NetworkChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkChannel(NetickEngine, NetworkConnection) public NetworkChannel(NetickEngine sandbox, NetworkConnection connection) Parameters sandbox NetickEngine connection NetworkConnection Methods Clear() public abstract void Clear() PostRead() public abstract void PostRead() PostSend() public abstract void PostSend() Read(BitBuffer, Tick, Tick) public abstract void Read(BitBuffer buffer, Tick senderTick, Tick lastTick) Parameters buffer BitBuffer senderTick Tick lastTick Tick Reset() public abstract void Reset() Write(BitBuffer) public abstract void Write(BitBuffer buffer) Parameters buffer BitBuffer"
  },
  "api/Netick.NetworkCollectionMeta.html": {
    "href": "api/Netick.NetworkCollectionMeta.html",
    "title": "Enum NetworkCollectionMeta | Netick Networking Engine",
    "summary": "Enum NetworkCollectionMeta Namespace Netick Assembly Netick.dll [Flags] public enum NetworkCollectionMeta Fields HasOnChanged = 2 IsInputSourceOnly = 1 None = 0"
  },
  "api/Netick.NetworkConnection.html": {
    "href": "api/Netick.NetworkConnection.html",
    "title": "Class NetworkConnection | Netick Networking Engine",
    "summary": "Class NetworkConnection Namespace Netick Assembly Netick.dll public abstract class NetworkConnection : NetworkPlayer Inheritance object NetworkPlayer NetworkConnection Derived ClientConnection ServerConnection Inherited Members NetworkPlayer.Engine NetworkPlayer.AddInterestGroup(int) NetworkPlayer.AddInterestGroup(InterestManagementGroup) NetworkPlayer.AddInterestBoxArea(NetickBounds) NetworkPlayer.Position NetworkPlayer.ViewDirection NetworkPlayer.Distance NetworkPlayer.FieldOfViewAngle NetworkPlayer.PlayerId NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields LocalUserData public int* LocalUserData Field Value int* MaxOutgoingDataPerTickInBytes public int MaxOutgoingDataPerTickInBytes Field Value int RTT public readonly DoubleStats RTT Field Value DoubleStats RemoteUserData public int* RemoteUserData Field Value int* Properties BytesIn public DataAccumulator BytesIn { get; } Property Value DataAccumulator BytesOut public DataAccumulator BytesOut { get; } Property Value DataAccumulator EndPoint public IEndPoint EndPoint { get; } Property Value IEndPoint Id public int Id { get; } Property Value int InPacketLoss Estimation of incoming packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost. public float InPacketLoss { get; } Property Value float InPacketLossBurst The longest inward packet loss burst (more than 2 packets lost in a row) in the last 10 seconds. public int InPacketLossBurst { get; } Property Value int OutPacketLoss Estimation of outgoing packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost. public float OutPacketLoss { get; } Property Value float ReplicateEntities public bool ReplicateEntities { get; set; } Property Value bool TransportConnection public TransportConnection TransportConnection { get; } Property Value TransportConnection Methods ~NetworkConnection() protected ~NetworkConnection() SendData(byte, byte*, int, TransportDeliveryMethod) Sends data to this connection. Note: the low-level transport must implement SendUserData(IntPtr, int, TransportDeliveryMethod) for this method to have an effect. public void SendData(byte id, byte* data, int length, TransportDeliveryMethod deliveryMethod) Parameters id byte data byte* length int deliveryMethod TransportDeliveryMethod SendData(byte, byte[], int, TransportDeliveryMethod) public void SendData(byte id, byte[] data, int length, TransportDeliveryMethod deliveryMethod) Parameters id byte data byte[] length int deliveryMethod TransportDeliveryMethod"
  },
  "api/Netick.NetworkConnectionRequest.html": {
    "href": "api/Netick.NetworkConnectionRequest.html",
    "title": "Class NetworkConnectionRequest | Netick Networking Engine",
    "summary": "Class NetworkConnectionRequest Namespace Netick Assembly Netick.dll public sealed class NetworkConnectionRequest Inheritance object NetworkConnectionRequest Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields AllowConnection public bool AllowConnection Field Value bool Properties Data public byte[] Data { get; } Property Value byte[] DataLength public int DataLength { get; set; } Property Value int Source public IEndPoint Source { get; } Property Value IEndPoint Methods Accept() public void Accept() Refuse() public void Refuse()"
  },
  "api/Netick.NetworkDictionary-2.html": {
    "href": "api/Netick.NetworkDictionary-2.html",
    "title": "Class NetworkDictionary<TKey, TValue> | Netick Networking Engine",
    "summary": "Class NetworkDictionary<TKey, TValue> Namespace Netick Assembly Netick.dll A networked Dictionary<TKey, TValue> collection. public sealed class NetworkDictionary<TKey, TValue> : NetworkDictionary, INetworkCollection, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable where TKey : unmanaged where TValue : unmanaged Type Parameters TKey TValue Inheritance object NetworkDictionary NetworkDictionary<TKey, TValue> Implements INetworkCollection IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members NetworkDictionary.OffsetToElements NetworkDictionary.HeaderMetaSizeWords object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkDictionary(int) public NetworkDictionary(int capacity) Parameters capacity int Properties Count public int Count { get; } Property Value int this[TKey] public TValue this[TKey key] { get; set; } Parameters key TKey Property Value TValue Methods Add(TKey, TValue) public bool Add(TKey key, TValue value) Parameters key TKey value TValue Returns bool Clear() public void Clear() ContainsKey(TKey) public bool ContainsKey(TKey key) Parameters key TKey Returns bool ContainsValue(TValue) public bool ContainsValue(TValue value) Parameters value TValue Returns bool GetEnumerator() public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> InternalInit(INetickNetworkScript, int*, int, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public override void InternalReset() Remove(TKey) public bool Remove(TKey key) Parameters key TKey Returns bool SetKeyValue(TKey, TValue) public bool SetKeyValue(TKey key, TValue value) Parameters key TKey value TValue Returns bool TryGetValue(TKey, out TValue) public bool TryGetValue(TKey key, out TValue value) Parameters key TKey value TValue Returns bool"
  },
  "api/Netick.NetworkDictionary.html": {
    "href": "api/Netick.NetworkDictionary.html",
    "title": "Class NetworkDictionary | Netick Networking Engine",
    "summary": "Class NetworkDictionary Namespace Netick Assembly Netick.dll public class NetworkDictionary : INetworkCollection Inheritance object NetworkDictionary Implements INetworkCollection Derived NetworkDictionary<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkDictionary() public NetworkDictionary() Fields HeaderMetaSizeWords public const int HeaderMetaSizeWords = 1 Field Value int OffsetToElements public const int OffsetToElements = 1 Field Value int Methods InternalInit(INetickNetworkScript, int*, int, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.NetworkDictionarySnapshot-2.html": {
    "href": "api/Netick.NetworkDictionarySnapshot-2.html",
    "title": "Struct NetworkDictionarySnapshot<TKey, TValue> | Netick Networking Engine",
    "summary": "Struct NetworkDictionarySnapshot<TKey, TValue> Namespace Netick Assembly Netick.dll A snapshot of the state of a NetworkDictionary<TKey, TValue> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. public struct NetworkDictionarySnapshot<TKey, TValue> : IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable where TKey : unmanaged where TValue : unmanaged Type Parameters TKey TValue Implements IEnumerable<KeyValuePair<TKey, TValue>> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Count public int Count { get; } Property Value int this[TKey] public TValue this[TKey key] { get; } Parameters key TKey Property Value TValue Methods ContainsKey(TKey) public bool ContainsKey(TKey key) Parameters key TKey Returns bool ContainsValue(TValue) public bool ContainsValue(TValue value) Parameters value TValue Returns bool GetEnumerator() public IEnumerator<KeyValuePair<TKey, TValue>> GetEnumerator() Returns IEnumerator<KeyValuePair<TKey, TValue>> TryGetValue(TKey, out TValue) public bool TryGetValue(TKey key, out TValue value) Parameters key TKey value TValue Returns bool"
  },
  "api/Netick.NetworkEvents.OnClientConnectedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnClientConnectedEvent.html",
    "title": "Class NetworkEvents.OnClientConnectedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnClientConnectedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnClientConnectedEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnClientConnectedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientConnectedEvent() public OnClientConnectedEvent()"
  },
  "api/Netick.NetworkEvents.OnClientDisconnectedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnClientDisconnectedEvent.html",
    "title": "Class NetworkEvents.OnClientDisconnectedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnClientDisconnectedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnClientDisconnectedEvent : UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason> NetworkEvents.OnClientDisconnectedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.AddListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientDisconnectedEvent() public OnClientDisconnectedEvent()"
  },
  "api/Netick.NetworkEvents.OnClientSceneLoadeddEvent.html": {
    "href": "api/Netick.NetworkEvents.OnClientSceneLoadeddEvent.html",
    "title": "Class NetworkEvents.OnClientSceneLoadeddEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnClientSceneLoadeddEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnClientSceneLoadeddEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnClientSceneLoadeddEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientSceneLoadeddEvent() public OnClientSceneLoadeddEvent()"
  },
  "api/Netick.NetworkEvents.OnConnectFailedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnConnectFailedEvent.html",
    "title": "Class NetworkEvents.OnConnectFailedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnConnectFailedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnConnectFailedEvent : UnityEvent<NetworkSandbox, ConnectionFailedReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, ConnectionFailedReason> NetworkEvents.OnConnectFailedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, ConnectionFailedReason>.AddListener(UnityAction<NetworkSandbox, ConnectionFailedReason>) UnityEvent<NetworkSandbox, ConnectionFailedReason>.RemoveListener(UnityAction<NetworkSandbox, ConnectionFailedReason>) UnityEvent<NetworkSandbox, ConnectionFailedReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, ConnectionFailedReason>.Invoke(NetworkSandbox, ConnectionFailedReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectFailedEvent() public OnConnectFailedEvent()"
  },
  "api/Netick.NetworkEvents.OnConnectRequestEvent.html": {
    "href": "api/Netick.NetworkEvents.OnConnectRequestEvent.html",
    "title": "Class NetworkEvents.OnConnectRequestEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnConnectRequestEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnConnectRequestEvent : UnityEvent<NetworkSandbox, NetworkConnectionRequest>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnectionRequest> NetworkEvents.OnConnectRequestEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnectionRequest>.AddListener(UnityAction<NetworkSandbox, NetworkConnectionRequest>) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnectionRequest>) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.Invoke(NetworkSandbox, NetworkConnectionRequest) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectRequestEvent() public OnConnectRequestEvent()"
  },
  "api/Netick.NetworkEvents.OnConnectedToServerEvent.html": {
    "href": "api/Netick.NetworkEvents.OnConnectedToServerEvent.html",
    "title": "Class NetworkEvents.OnConnectedToServerEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnConnectedToServerEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnConnectedToServerEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnConnectedToServerEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectedToServerEvent() public OnConnectedToServerEvent()"
  },
  "api/Netick.NetworkEvents.OnDisconnectedFromServerEvent.html": {
    "href": "api/Netick.NetworkEvents.OnDisconnectedFromServerEvent.html",
    "title": "Class NetworkEvents.OnDisconnectedFromServerEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnDisconnectedFromServerEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnDisconnectedFromServerEvent : UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason> NetworkEvents.OnDisconnectedFromServerEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.AddListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnDisconnectedFromServerEvent() public OnDisconnectedFromServerEvent()"
  },
  "api/Netick.NetworkEvents.OnInputEvent.html": {
    "href": "api/Netick.NetworkEvents.OnInputEvent.html",
    "title": "Class NetworkEvents.OnInputEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnInputEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnInputEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnInputEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnInputEvent() public OnInputEvent()"
  },
  "api/Netick.NetworkEvents.OnMatchCreatedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnMatchCreatedEvent.html",
    "title": "Class NetworkEvents.OnMatchCreatedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnMatchCreatedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnMatchCreatedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnMatchCreatedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnMatchCreatedEvent() public OnMatchCreatedEvent()"
  },
  "api/Netick.NetworkEvents.OnMatchListUpdateEvent.html": {
    "href": "api/Netick.NetworkEvents.OnMatchListUpdateEvent.html",
    "title": "Class NetworkEvents.OnMatchListUpdateEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnMatchListUpdateEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnMatchListUpdateEvent : UnityEvent<NetworkSandbox, List<Session>>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, List<Session>> NetworkEvents.OnMatchListUpdateEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, List<Session>>.AddListener(UnityAction<NetworkSandbox, List<Session>>) UnityEvent<NetworkSandbox, List<Session>>.RemoveListener(UnityAction<NetworkSandbox, List<Session>>) UnityEvent<NetworkSandbox, List<Session>>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, List<Session>>.Invoke(NetworkSandbox, List<Session>) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnMatchListUpdateEvent() public OnMatchListUpdateEvent()"
  },
  "api/Netick.NetworkEvents.OnObjectCreatedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnObjectCreatedEvent.html",
    "title": "Class NetworkEvents.OnObjectCreatedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnObjectCreatedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnObjectCreatedEvent : UnityEvent<NetworkObject>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkObject> NetworkEvents.OnObjectCreatedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkObject>.AddListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.RemoveListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.FindMethod_Impl(string, Type) UnityEvent<NetworkObject>.Invoke(NetworkObject) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnObjectCreatedEvent() public OnObjectCreatedEvent()"
  },
  "api/Netick.NetworkEvents.OnObjectDestroyedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnObjectDestroyedEvent.html",
    "title": "Class NetworkEvents.OnObjectDestroyedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnObjectDestroyedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnObjectDestroyedEvent : UnityEvent<NetworkObject>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkObject> NetworkEvents.OnObjectDestroyedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkObject>.AddListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.RemoveListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.FindMethod_Impl(string, Type) UnityEvent<NetworkObject>.Invoke(NetworkObject) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnObjectDestroyedEvent() public OnObjectDestroyedEvent()"
  },
  "api/Netick.NetworkEvents.OnSceneLoadStartedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnSceneLoadStartedEvent.html",
    "title": "Class NetworkEvents.OnSceneLoadStartedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnSceneLoadStartedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnSceneLoadStartedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnSceneLoadStartedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnSceneLoadStartedEvent() public OnSceneLoadStartedEvent()"
  },
  "api/Netick.NetworkEvents.OnSceneLoadedEvent.html": {
    "href": "api/Netick.NetworkEvents.OnSceneLoadedEvent.html",
    "title": "Class NetworkEvents.OnSceneLoadedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnSceneLoadedEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnSceneLoadedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnSceneLoadedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnSceneLoadedEvent() public OnSceneLoadedEvent()"
  },
  "api/Netick.NetworkEvents.OnShutdownEvent.html": {
    "href": "api/Netick.NetworkEvents.OnShutdownEvent.html",
    "title": "Class NetworkEvents.OnShutdownEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnShutdownEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnShutdownEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnShutdownEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnShutdownEvent() public OnShutdownEvent()"
  },
  "api/Netick.NetworkEvents.OnStartupEvent.html": {
    "href": "api/Netick.NetworkEvents.OnStartupEvent.html",
    "title": "Class NetworkEvents.OnStartupEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnStartupEvent Namespace Netick Assembly Netick.Unity.dll public class NetworkEvents.OnStartupEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnStartupEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnStartupEvent() public OnStartupEvent()"
  },
  "api/Netick.NetworkEvents.html": {
    "href": "api/Netick.NetworkEvents.html",
    "title": "Class NetworkEvents | Netick Networking Engine",
    "summary": "Class NetworkEvents Namespace Netick Assembly Netick.Unity.dll [AddComponentMenu(\"Netick/Network Events\")] public class NetworkEvents : NetworkEventsListner Inheritance object Object Component Behaviour MonoBehaviour NetworkEventsListner NetworkEvents Inherited Members NetworkEventsListner.UnlinkFromNetick() NetworkEventsListner.Sandbox MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkEvents() public NetworkEvents() Fields onClientConnected public NetworkEvents.OnClientConnectedEvent onClientConnected Field Value NetworkEvents.OnClientConnectedEvent onClientDisconnected public NetworkEvents.OnClientDisconnectedEvent onClientDisconnected Field Value NetworkEvents.OnClientDisconnectedEvent onClientSceneLoaded public NetworkEvents.OnClientSceneLoadeddEvent onClientSceneLoaded Field Value NetworkEvents.OnClientSceneLoadeddEvent onConnectFailedEvent public NetworkEvents.OnConnectFailedEvent onConnectFailedEvent Field Value NetworkEvents.OnConnectFailedEvent onConnectRequest public NetworkEvents.OnConnectRequestEvent onConnectRequest Field Value NetworkEvents.OnConnectRequestEvent onConnectedToServer public NetworkEvents.OnConnectedToServerEvent onConnectedToServer Field Value NetworkEvents.OnConnectedToServerEvent onDisconnectedFromServer public NetworkEvents.OnDisconnectedFromServerEvent onDisconnectedFromServer Field Value NetworkEvents.OnDisconnectedFromServerEvent onInput public NetworkEvents.OnInputEvent onInput Field Value NetworkEvents.OnInputEvent onMatchCreated public NetworkEvents.OnMatchCreatedEvent onMatchCreated Field Value NetworkEvents.OnMatchCreatedEvent onMatchList public NetworkEvents.OnMatchListUpdateEvent onMatchList Field Value NetworkEvents.OnMatchListUpdateEvent onObjectCreated public NetworkEvents.OnObjectCreatedEvent onObjectCreated Field Value NetworkEvents.OnObjectCreatedEvent onObjectDestroyed public NetworkEvents.OnObjectDestroyedEvent onObjectDestroyed Field Value NetworkEvents.OnObjectDestroyedEvent onSceneLoadStarted public NetworkEvents.OnSceneLoadStartedEvent onSceneLoadStarted Field Value NetworkEvents.OnSceneLoadStartedEvent onSceneLoaded public NetworkEvents.OnSceneLoadedEvent onSceneLoaded Field Value NetworkEvents.OnSceneLoadedEvent onShutdown public NetworkEvents.OnShutdownEvent onShutdown Field Value NetworkEvents.OnShutdownEvent onStartup public NetworkEvents.OnStartupEvent onStartup Field Value NetworkEvents.OnStartupEvent Methods OnClientConnected(NetworkSandbox, NetworkConnection) Called on the server when a specific client has connected. public override void OnClientConnected(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnClientDisconnected(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the server when a specific client has disconnected. public override void OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason OnClientSceneLoaded(NetworkSandbox, NetworkConnection) Called on the server when a specific client finished loading the scene. public override void OnClientSceneLoaded(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnConnectFailed(NetworkSandbox, ConnectionFailedReason) Called on the client when the connection to the server was refused, or simply failed. public override void OnConnectFailed(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason OnConnectRequest(NetworkSandbox, NetworkConnectionRequest) Called on the server when a client tries to connect. Use request to decide whether or not to allow this client to connect. public override void OnConnectRequest(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest OnConnectedToServer(NetworkSandbox, NetworkConnection) Called on the client when connection to the server has been initiated. public override void OnConnectedToServer(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection OnDisconnectedFromServer(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the client when connection to the server ended, or when a network error caused the disconnection. public override void OnDisconnectedFromServer(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason OnInput(NetworkSandbox) Called to read inputs. public override void OnInput(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchCreated(NetworkSandbox) public override void OnMatchCreated(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchListUpdate(NetworkSandbox, List<Session>) public override void OnMatchListUpdate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> OnObjectCreated(NetworkObject) Called when a network object has been created/initialized. public override void OnObjectCreated(NetworkObject obj) Parameters obj NetworkObject OnObjectDestroyed(NetworkObject) Called when a network object has been destroyed/recycled. public override void OnObjectDestroyed(NetworkObject obj) Parameters obj NetworkObject OnSceneLoadStarted(NetworkSandbox) Called on both the client and the server before beginning to load the new scene. public override void OnSceneLoadStarted(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnSceneLoaded(NetworkSandbox) Called on both the client and the server when the scene has been loaded. public override void OnSceneLoaded(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnShutdown(NetworkSandbox) Called when Netick has been shut down. public override void OnShutdown(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnStartup(NetworkSandbox) Called when Netick has been started. public override void OnStartup(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.NetworkEventsListner.html": {
    "href": "api/Netick.NetworkEventsListner.html",
    "title": "Class NetworkEventsListner | Netick Networking Engine",
    "summary": "Class NetworkEventsListner Namespace Netick Assembly Netick.Unity.dll public abstract class NetworkEventsListner : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour NetworkEventsListner Derived NetworkEvents Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkEventsListner() protected NetworkEventsListner() Properties Sandbox public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox Methods OnClientConnected(NetworkSandbox, NetworkConnection) Called on the server when a specific client has connected. public virtual void OnClientConnected(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnClientDisconnected(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the server when a specific client has disconnected. public virtual void OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason OnClientSceneLoaded(NetworkSandbox, NetworkConnection) Called on the server when a specific client finished loading the scene. public virtual void OnClientSceneLoaded(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnConnectFailed(NetworkSandbox, ConnectionFailedReason) Called on the client when the connection to the server was refused, or simply failed. public virtual void OnConnectFailed(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason OnConnectRequest(NetworkSandbox, NetworkConnectionRequest) Called on the server when a client tries to connect. Use request to decide whether or not to allow this client to connect. public virtual void OnConnectRequest(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest OnConnectedToServer(NetworkSandbox, NetworkConnection) Called on the client when connection to the server has been initiated. public virtual void OnConnectedToServer(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection OnDisconnectedFromServer(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the client when connection to the server ended, or when a network error caused the disconnection. public virtual void OnDisconnectedFromServer(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason OnInput(NetworkSandbox) Called to read inputs. public virtual void OnInput(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchCreated(NetworkSandbox) public virtual void OnMatchCreated(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchListUpdate(NetworkSandbox, List<Session>) public virtual void OnMatchListUpdate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> OnObjectCreated(NetworkObject) Called when a network object has been created/initialized. public virtual void OnObjectCreated(NetworkObject entity) Parameters entity NetworkObject OnObjectDestroyed(NetworkObject) Called when a network object has been destroyed/recycled. public virtual void OnObjectDestroyed(NetworkObject entity) Parameters entity NetworkObject OnSceneLoadStarted(NetworkSandbox) Called on both the client and the server before beginning to load the new scene. public virtual void OnSceneLoadStarted(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnSceneLoaded(NetworkSandbox) Called on both the client and the server when the scene has been loaded. public virtual void OnSceneLoaded(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnShutdown(NetworkSandbox) Called when Netick has been shut down. public virtual void OnShutdown(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnStartup(NetworkSandbox) Called when Netick has been started. public virtual void OnStartup(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox UnlinkFromNetick() public void UnlinkFromNetick()"
  },
  "api/Netick.NetworkHashSet-1.html": {
    "href": "api/Netick.NetworkHashSet-1.html",
    "title": "Class NetworkHashSet<T> | Netick Networking Engine",
    "summary": "Class NetworkHashSet<T> Namespace Netick Assembly Netick.dll A networked HashSet<T> collection. public sealed class NetworkHashSet<T> : NetworkHashSet, INetworkCollection, IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Inheritance object NetworkHashSet NetworkHashSet<T> Implements INetworkCollection IEnumerable<T> IEnumerable Inherited Members NetworkHashSet.OffsetToElements NetworkHashSet.HeaderMetaSizeWords NetworkHashSet.GetEntrySizeWords(int) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkHashSet(int) public NetworkHashSet(int capacity) Parameters capacity int Properties Count public int Count { get; } Property Value int Methods Add(T) public bool Add(T item) Parameters item T Returns bool Clear() public void Clear() Contains(T) public bool Contains(T item) Parameters item T Returns bool ExceptWith(IEnumerable<T>) public void ExceptWith(IEnumerable<T> other) Parameters other IEnumerable<T> GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> InternalInit(INetickNetworkScript, int*, int, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public override void InternalReset() IntersectWith(IEnumerable<T>) public void IntersectWith(IEnumerable<T> other) Parameters other IEnumerable<T> Overlaps(IEnumerable<T>) public bool Overlaps(IEnumerable<T> other) Parameters other IEnumerable<T> Returns bool Remove(T) public bool Remove(T item) Parameters item T Returns bool SymmetricExceptWith(IEnumerable<T>) public void SymmetricExceptWith(IEnumerable<T> other) Parameters other IEnumerable<T> UnionWith(IEnumerable<T>) public void UnionWith(IEnumerable<T> other) Parameters other IEnumerable<T>"
  },
  "api/Netick.NetworkHashSet.html": {
    "href": "api/Netick.NetworkHashSet.html",
    "title": "Class NetworkHashSet | Netick Networking Engine",
    "summary": "Class NetworkHashSet Namespace Netick Assembly Netick.dll public class NetworkHashSet : INetworkCollection Inheritance object NetworkHashSet Implements INetworkCollection Derived NetworkHashSet<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkHashSet() public NetworkHashSet() Fields HeaderMetaSizeWords public const int HeaderMetaSizeWords = 1 Field Value int OffsetToElements public const int OffsetToElements = 1 Field Value int Methods GetEntrySizeWords(int) public static int GetEntrySizeWords(int keyWordSize) Parameters keyWordSize int Returns int InternalInit(INetickNetworkScript, int*, int, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.NetworkHashSetSnapshot-1.html": {
    "href": "api/Netick.NetworkHashSetSnapshot-1.html",
    "title": "Struct NetworkHashSetSnapshot<T> | Netick Networking Engine",
    "summary": "Struct NetworkHashSetSnapshot<T> Namespace Netick Assembly Netick.dll A snapshot of the state of a NetworkHashSet<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. public struct NetworkHashSetSnapshot<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Count public int Count { get; } Property Value int Methods Contains(T) public bool Contains(T item) Parameters item T Returns bool GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/Netick.NetworkLinkedList-1.html": {
    "href": "api/Netick.NetworkLinkedList-1.html",
    "title": "Class NetworkLinkedList<T> | Netick Networking Engine",
    "summary": "Class NetworkLinkedList<T> Namespace Netick Assembly Netick.dll A networked linked list collection. This is an ordered list meaning that the elements insertion order is maintained when iterating through the collection. public sealed class NetworkLinkedList<T> : NetworkLinkedList, INetworkCollection, IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Inheritance object NetworkLinkedList NetworkLinkedList<T> Implements INetworkCollection IEnumerable<T> IEnumerable Inherited Members NetworkLinkedList.OffsetToElements NetworkLinkedList.ElementMetaSizeWords NetworkLinkedList.HeaderMetaSizeWords NetworkLinkedList.Capacity object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkLinkedList(int) public NetworkLinkedList(int capacity) Parameters capacity int Properties Count public int Count { get; } Property Value int Methods Add(T) public bool Add(T item) Parameters item T Returns bool Clear() public void Clear() GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> InternalInit(INetickNetworkScript, int*, int, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public override void InternalReset() Remove(T) public bool Remove(T item) Parameters item T Returns bool"
  },
  "api/Netick.NetworkLinkedList.html": {
    "href": "api/Netick.NetworkLinkedList.html",
    "title": "Class NetworkLinkedList | Netick Networking Engine",
    "summary": "Class NetworkLinkedList Namespace Netick Assembly Netick.dll public class NetworkLinkedList : INetworkCollection Inheritance object NetworkLinkedList Implements INetworkCollection Derived NetworkLinkedList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkLinkedList() public NetworkLinkedList() Fields ElementMetaSizeWords public const int ElementMetaSizeWords = 2 Field Value int HeaderMetaSizeWords public const int HeaderMetaSizeWords = 4 Field Value int OffsetToElements public const int OffsetToElements = 4 Field Value int Properties Capacity public int Capacity { get; } Property Value int Methods InternalInit(INetickNetworkScript, int*, int, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.NetworkLinkedListSnapshot-1.html": {
    "href": "api/Netick.NetworkLinkedListSnapshot-1.html",
    "title": "Struct NetworkLinkedListSnapshot<T> | Netick Networking Engine",
    "summary": "Struct NetworkLinkedListSnapshot<T> Namespace Netick Assembly Netick.dll A snapshot of the state of a NetworkLinkedList<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. public struct NetworkLinkedListSnapshot<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Count public int Count { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/Netick.NetworkObject.html": {
    "href": "api/Netick.NetworkObject.html",
    "title": "Class NetworkObject | Netick Networking Engine",
    "summary": "Class NetworkObject Namespace Netick Assembly Netick.Unity.dll public class NetworkObject : MonoBehaviour, INetickEntity Inheritance object Object Component Behaviour MonoBehaviour NetworkObject Implements INetickEntity Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkObject() public NetworkObject() Fields UseAoI public bool UseAoI Field Value bool Properties Engine public NetickEngine Engine { get; } Property Value NetickEngine Entity public Entity Entity { get; } Property Value Entity HasValidId Returns true if this NetworkObject has been added to the simulation by Netick, and thus has a valid id. [SerializeField] public bool HasValidId { get; } Property Value bool Id public int Id { get; } Property Value int InputSource Returns the source NetworkPlayer (NetworkPeer/ServerConnection) of inputs for this NetworkObject. If the source of inputs is remote (from a client) it returns that ServerConnection, while on the input source itself it returns the local NetworkPlayer. public NetworkPlayer InputSource { get; set; } Property Value NetworkPlayer IsClient Returns true if this Engine is a client. public bool IsClient { get; } Property Value bool IsInputSource Returns true if this LocalPlayer is providing inputs for this NetworkObject. public bool IsInputSource { get; } Property Value bool IsOwner Returns true if this Engine is the owner of this Object. In this version of Netick: Server=Owner. public bool IsOwner { get; } Property Value bool IsPrefab public bool IsPrefab { get; } Property Value bool IsPrefabObject public bool IsPrefabObject { get; } Property Value bool IsProxy Returns true if we neither provide inputs nor own this object. public bool IsProxy { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsSceneObject [SerializeField] public bool IsSceneObject { get; } Property Value bool IsServer Returns true if this Engine is the server. public bool IsServer { get; } Property Value bool IsSpawnPredicted public bool IsSpawnPredicted { get; } Property Value bool Parent The NetworkObject parent of this object. public NetworkObject Parent { get; } Property Value NetworkObject PredictionMode public Relevancy PredictionMode { get; } Property Value Relevancy Sandbox public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox SpawnPredictionKey public SpawnPredictionKey SpawnPredictionKey { get; } Property Value SpawnPredictionKey SpawnTick The tick which this object was spawned at. public Tick SpawnTick { get; } Property Value Tick Methods GetBehaviourById<T>(int) public T GetBehaviourById<T>(int id) where T : NetworkBehaviour Parameters id int Returns T Type Parameters T GetBehaviour<T>() public T GetBehaviour<T>() where T : NetworkBehaviour Returns T Type Parameters T GetSceneId() public int GetSceneId() Returns int Initialize(NetickEngine, Entity) Used to initialize the user entity and assign Engine and Entity public void Initialize(NetickEngine sandbox, Entity entity) Parameters sandbox NetickEngine entity Entity SetParent(NetworkObject) [Owner/InputSource Only] Changes the parent of this object. public void SetParent(NetworkObject obj) Parameters obj NetworkObject The object which will become the parent of this object."
  },
  "api/Netick.NetworkPeer.html": {
    "href": "api/Netick.NetworkPeer.html",
    "title": "Class NetworkPeer | Netick Networking Engine",
    "summary": "Class NetworkPeer Namespace Netick Assembly Netick.dll public abstract class NetworkPeer : NetworkPlayer Inheritance object NetworkPlayer NetworkPeer Derived Client Server Inherited Members NetworkPlayer.Engine NetworkPlayer.AddInterestGroup(int) NetworkPlayer.AddInterestGroup(InterestManagementGroup) NetworkPlayer.AddInterestBoxArea(NetickBounds) NetworkPlayer.Position NetworkPlayer.ViewDirection NetworkPlayer.Distance NetworkPlayer.FieldOfViewAngle NetworkPlayer.PlayerId NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Transport public readonly NetworkTransport Transport Field Value NetworkTransport Properties InKBps public abstract float InKBps { get; } Property Value float OutKBps public abstract float OutKBps { get; } Property Value float Methods OnConnectFailed(ConnectionFailedReason) public abstract void OnConnectFailed(ConnectionFailedReason reason) Parameters reason ConnectionFailedReason OnConnectRequest(byte[], int, IEndPoint) public virtual bool OnConnectRequest(byte[] data, int length, IEndPoint source) Parameters data byte[] length int source IEndPoint Returns bool OnConnected(TransportConnection) public abstract void OnConnected(TransportConnection peer) Parameters peer TransportConnection OnDisconnected(TransportConnection, TransportDisconnectReason) public abstract void OnDisconnected(TransportConnection peer, TransportDisconnectReason transportDisconnectReason) Parameters peer TransportConnection transportDisconnectReason TransportDisconnectReason Receive(TransportConnection, BitBuffer, TransportDeliveryMethod) public abstract void Receive(TransportConnection connection, BitBuffer reader, TransportDeliveryMethod transportDeliveryMethod = TransportDeliveryMethod.Unreliable) Parameters connection TransportConnection reader BitBuffer transportDeliveryMethod TransportDeliveryMethod"
  },
  "api/Netick.NetworkPlayer.html": {
    "href": "api/Netick.NetworkPlayer.html",
    "title": "Class NetworkPlayer | Netick Networking Engine",
    "summary": "Class NetworkPlayer Namespace Netick Assembly Netick.dll Represents a network player, which can be either a local player (representing this sandbox) or a remote connection (representing a connected client)). public abstract class NetworkPlayer Inheritance object NetworkPlayer Derived NetworkConnection NetworkPeer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Engine public readonly NetickEngine Engine Field Value NetickEngine Properties Distance public float Distance { get; set; } Property Value float FieldOfViewAngle public float FieldOfViewAngle { get; set; } Property Value float PlayerId The networked index of this player. Note: it returns -1 on the client for the local player when not connected to a server. Note: the server player always has Id 0. public int PlayerId { get; } Property Value int PlayerObject Use this to associate an object with this player. public object PlayerObject { get; set; } Property Value object Position public Vector3 Position { get; set; } Property Value Vector3 ViewDirection public Vector3 ViewDirection { get; set; } Property Value Vector3 Methods AddInterestBoxArea(NetickBounds) public void AddInterestBoxArea(NetickBounds box) Parameters box NetickBounds AddInterestGroup(InterestManagementGroup) public void AddInterestGroup(InterestManagementGroup group) Parameters group InterestManagementGroup AddInterestGroup(int) public void AddInterestGroup(int groupId) Parameters groupId int"
  },
  "api/Netick.NetworkPlayerExtension.html": {
    "href": "api/Netick.NetworkPlayerExtension.html",
    "title": "Class NetworkPlayerExtension | Netick Networking Engine",
    "summary": "Class NetworkPlayerExtension Namespace Netick Assembly Netick.Unity.dll public static class NetworkPlayerExtension Inheritance object NetworkPlayerExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBehaviour<T>(ChangedInfo) public static T GetBehaviour<T>(this ChangedInfo change) where T : NetworkBehaviour Parameters change ChangedInfo Returns T Type Parameters T SetAoIPosition(NetworkPlayer, Vector3) public static void SetAoIPosition(this NetworkPlayer conn, Vector3 position) Parameters conn NetworkPlayer position Vector3"
  },
  "api/Netick.NetworkQueue-1.html": {
    "href": "api/Netick.NetworkQueue-1.html",
    "title": "Class NetworkQueue<T> | Netick Networking Engine",
    "summary": "Class NetworkQueue<T> Namespace Netick Assembly Netick.dll A networked Queue<T> collection. public sealed class NetworkQueue<T> : NetworkQueue, INetworkCollection, IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Inheritance object NetworkQueue NetworkQueue<T> Implements INetworkCollection IEnumerable<T> IEnumerable Inherited Members NetworkQueue.OffsetToElements NetworkQueue.HeaderMetaSizeWords object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkQueue(int) public NetworkQueue(int capacity) Parameters capacity int Properties Count public int Count { get; } Property Value int Methods Add(T) public void Add(T item) Parameters item T Clear() public void Clear() Dequeue() public T Dequeue() Returns T Enqueue(T) public bool Enqueue(T item) Parameters item T Returns bool GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> InternalInit(INetickNetworkScript, int*, int, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public override void InternalReset() Peek() public T Peek() Returns T TryDequeue(out T) public bool TryDequeue(out T result) Parameters result T Returns bool TryPeek(out T) public bool TryPeek(out T result) Parameters result T Returns bool"
  },
  "api/Netick.NetworkQueue.html": {
    "href": "api/Netick.NetworkQueue.html",
    "title": "Class NetworkQueue | Netick Networking Engine",
    "summary": "Class NetworkQueue Namespace Netick Assembly Netick.dll public class NetworkQueue : INetworkCollection Inheritance object NetworkQueue Implements INetworkCollection Derived NetworkQueue<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkQueue() public NetworkQueue() Fields HeaderMetaSizeWords public const int HeaderMetaSizeWords = 3 Field Value int OffsetToElements public const int OffsetToElements = 3 Field Value int Methods InternalInit(INetickNetworkScript, int*, int, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.NetworkQueueSnapshot-1.html": {
    "href": "api/Netick.NetworkQueueSnapshot-1.html",
    "title": "Struct NetworkQueueSnapshot<T> | Netick Networking Engine",
    "summary": "Struct NetworkQueueSnapshot<T> Namespace Netick Assembly Netick.dll A snapshot of the state of a NetworkQueue<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. public struct NetworkQueueSnapshot<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Count public int Count { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/Netick.NetworkRenderInvokeOrder.html": {
    "href": "api/Netick.NetworkRenderInvokeOrder.html",
    "title": "Enum NetworkRenderInvokeOrder | Netick Networking Engine",
    "summary": "Enum NetworkRenderInvokeOrder Namespace Netick Assembly Netick.Unity.dll public enum NetworkRenderInvokeOrder Fields LateUpdate = 1 Update = 0"
  },
  "api/Netick.NetworkRigidbody.html": {
    "href": "api/Netick.NetworkRigidbody.html",
    "title": "Class NetworkRigidbody | Netick Networking Engine",
    "summary": "Class NetworkRigidbody Namespace Netick Assembly Netick.Unity.dll This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody must be used if you want to have client-side prediction over PhysX objects since it replicates several other properties necessary for correct prediction. [IgnoreCodeGen] [AddComponentMenu(\"Netick/Network Rigidbody\")] [RequireComponent(typeof(Rigidbody))] [DisallowMultipleComponent] public sealed class NetworkRigidbody : NetworkTransform, INetickNetworkScript, INetickScript, IPhysicsComponent Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour NetworkTransform NetworkRigidbody Implements INetickNetworkScript INetickScript IPhysicsComponent Inherited Members NetworkTransform.RenderTransform NetworkTransform.NetworkRender() NetworkTransform.Interpolate() NetworkTransform.InterpolationSource NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator<T>(string) NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetickBehaviour.NetworkUpdate() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkRigidbody() public NetworkRigidbody() Methods GameEngineIntoNetcode() public override void GameEngineIntoNetcode() InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int NetcodeIntoGameEngine() public override void NetcodeIntoGameEngine() NetworkAwake() public override void NetworkAwake() NetworkDestroy() Called when this behaviour has been removed from the simulation. public override void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.NetworkRpc.html": {
    "href": "api/Netick.NetworkRpc.html",
    "title": "Class NetworkRpc | Netick Networking Engine",
    "summary": "Class NetworkRpc Namespace Netick Assembly Netick.dll public class NetworkRpc Inheritance object NetworkRpc Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkRpc(int) public NetworkRpc(int maxPlayers) Parameters maxPlayers int Fields Data public int* Data Field Value int* Id public int Id Field Value int SizeWords public int SizeWords Field Value int Target public RpcPeers Target Field Value RpcPeers Methods Init(int, INetickNetworkScript, bool, RpcPeers, int) public NetworkRpc Init(int id, INetickNetworkScript behaviour, bool isReliable, RpcPeers target, int sizeWords) Parameters id int behaviour INetickNetworkScript isReliable bool target RpcPeers sizeWords int Returns NetworkRpc InternalCanInvoke(NetickEngine, Entity, RpcPeers, RpcPeers, bool, int) Internal method. Never call this. public static bool InternalCanInvoke(NetickEngine engine, Entity obj, RpcPeers source, RpcPeers target, bool localInvoke, int rpcId) Parameters engine NetickEngine obj Entity source RpcPeers target RpcPeers localInvoke bool rpcId int Returns bool InternalCanSend(NetickEngine, Entity, RpcPeers, RpcPeers, int) Internal method. Never call this. public static bool InternalCanSend(NetickEngine engine, Entity entity, RpcPeers source, RpcPeers target, int id) Parameters engine NetickEngine entity Entity source RpcPeers target RpcPeers id int Returns bool InternalCreateRpc(NetickEngine, NetworkConnection, int, INetickNetworkScript, bool, RpcPeers, int) Internal method. Never call this. public static NetworkRpc InternalCreateRpc(NetickEngine sandbox, NetworkConnection connection, int id, INetickNetworkScript behaviour, bool isReliable, RpcPeers target, int wordSize) Parameters sandbox NetickEngine connection NetworkConnection id int behaviour INetickNetworkScript isReliable bool target RpcPeers wordSize int Returns NetworkRpc InternalIsResim(NetickEngine) Internal method. Never call this. public static bool InternalIsResim(NetickEngine sandbox) Parameters sandbox NetickEngine Returns bool Recycle() public void Recycle() RegisterSent(NetworkConnection) public void RegisterSent(NetworkConnection connection) Parameters connection NetworkConnection"
  },
  "api/Netick.NetworkSandbox.html": {
    "href": "api/Netick.NetworkSandbox.html",
    "title": "Class NetworkSandbox | Netick Networking Engine",
    "summary": "Class NetworkSandbox Namespace Netick Assembly Netick.Unity.dll public class NetworkSandbox : MonoBehaviour, IGameEngine Inheritance object Object Component Behaviour MonoBehaviour NetworkSandbox Implements IGameEngine Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkSandbox() public NetworkSandbox() Fields ClientTransform public Transform ClientTransform Field Value Transform Radius public float Radius Field Value float Properties Config Configuration data for Netick. public NetickConfig Config { get; } Property Value NetickConfig ConnectedClients A list containing all connected clients currently. Note: if you want the clients + the server, use ConnectedPlayers. public NetickList<ServerConnection> ConnectedClients { get; } Property Value NetickList<ServerConnection> ConnectedPlayers A list containing all connected clients currently, in addition to the server. Note: if you only want the clients, use ConnectedClients. public NetickList<NetworkPlayer> ConnectedPlayers { get; } Property Value NetickList<NetworkPlayer> ConnectedServer The server the client is connected to. public NetworkConnection ConnectedServer { get; } Property Value NetworkConnection CurrentRpcCaller public NetworkPlayer CurrentRpcCaller { get; } Property Value NetworkPlayer CurrentRpcSource Always always returns null except when called inside the body of an RPC method, it returns the NetworkConnection we are executing RPCs from. public NetworkConnection CurrentRpcSource { get; } Property Value NetworkConnection DeltaTime public float DeltaTime { get; } Property Value float Engine public NetickEngine Engine { get; } Property Value NetickEngine FixedDeltaTime Time period between network simulation steps. Same as UnityEngine.Time.fixedDeltaTime public float FixedDeltaTime { get; } Property Value float HasLoadScene public bool HasLoadScene { get; set; } Property Value bool InKBps Incoming data in kilobytes per second (KBps). public float InKBps { get; } Property Value float InputEnabled public bool InputEnabled { get; set; } Property Value bool InterpolationDelay [Client Only] Interpolation delay in seconds. public float InterpolationDelay { get; } Property Value float IsClient Returns true if this NetworkSandbox is a client. public bool IsClient { get; } Property Value bool IsConnected [Client Only] Returns true if this client is currently connected to a server. public bool IsConnected { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input/tick of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsServer Returns true if this NetworkSandbox is the server. public bool IsServer { get; } Property Value bool IsVisiable public bool IsVisiable { get; set; } Property Value bool LocalInterpolation public LocalInterpolation LocalInterpolation { get; } Property Value LocalInterpolation LocalPlayer This player. public NetworkPlayer LocalPlayer { get; } Property Value NetworkPlayer Name public string Name { get; } Property Value string NetworkTime public float NetworkTime { get; } Property Value float Objects A list containing all simulated/registered network objects [NetworkObject] currently. Note: to get a network object by id, use: TryGetObject(int, out NetworkObject) public ObjectList Objects { get; } Property Value ObjectList OutKBps Outgoing data in kilobytes per second (KBps). public float OutKBps { get; } Property Value float Physics The UnityEngine.PhysicsScene associated with this NetworkSandbox. Always use this to perform physics queries inside the sandbox instead of UnityEngine.Physics. public PhysicsScene Physics { get; } Property Value PhysicsScene Physics2D The UnityEngine.PhysicsScene2D associated with this NetworkSandbox. Always use this to perform physics queries inside the sandbox instead of UnityEngine.Physics2D. public PhysicsScene2D Physics2D { get; } Property Value PhysicsScene2D RTT [Client Only] The round-trip time (RTT) of the client in seconds. public double RTT { get; } Property Value double RemoteInterpolation public RemoteInterpolation RemoteInterpolation { get; } Property Value RemoteInterpolation ResimulationStep public int ResimulationStep { get; } Property Value int Resimulations public int Resimulations { get; } Property Value int ScaledFixedDeltaTime public float ScaledFixedDeltaTime { get; } Property Value float Scene The UnityEngine.SceneManagement.Scene associated with this NetworkSandbox. public Scene Scene { get; } Property Value Scene SceneBuildIndex public int SceneBuildIndex { get; } Property Value int StartMode public StartMode StartMode { get; } Property Value StartMode Tick Current simulation tick. On the server, it's always going forward/increasing. On the client, during resimulations it returns the current resimulated tick. To check for resimulations, use IsResimulating. public Tick Tick { get; } Property Value Tick Timer public SimulationClock Timer { get; } Property Value SimulationClock UserObject Use this to associate an object with this sandbox. public object UserObject { get; set; } Property Value object Methods Connect(int, string, byte[], int) public void Connect(int port, string ip, byte[] connectionData = null, int connectionDataLength = 0) Parameters port int ip string connectionData byte[] connectionDataLength int CreateMatch(string) [Server Only] Creates a match. Only functional if the low-level transport has support for matchmaking. public void CreateMatch(string name) Parameters name string Name of the match. Destroy(NetworkObject) Destroys a network object. Only call this on the server or on the client for spawn-predicted objects which have -1 Ids. Note: never call this on a child NetworkObject of the original prefab, only the root of the prefab. public void Destroy(NetworkObject obj) Parameters obj NetworkObject The object to destroy. DestroyPool(GameObject) public void DestroyPool(GameObject networkedPrefab) Parameters networkedPrefab GameObject DisableComponent(Component) public void DisableComponent(Component component) Parameters component Component DisconnectFromServer() [Client Only] Disconnects this client from the server. public void DisconnectFromServer() EnableComponent(Component) public void EnableComponent(Component component) Parameters component Component FindGameObjectWithTag(string, bool) public GameObject FindGameObjectWithTag(string tag, bool activeOnly = true) Parameters tag string activeOnly bool Returns GameObject FindGameObjectsWithTag(string, bool) public List<GameObject> FindGameObjectsWithTag(string tag, bool activeOnly = true) Parameters tag string activeOnly bool Returns List<GameObject> FindGameObjectsWithTag(string, List<GameObject>, bool) public List<GameObject> FindGameObjectsWithTag(string tag, List<GameObject> results, bool activeOnly = true) Parameters tag string results List<GameObject> activeOnly bool Returns List<GameObject> FindObjectOfType<T>(bool) public T FindObjectOfType<T>(bool activeOnly = true) where T : Component Parameters activeOnly bool Returns T Type Parameters T FindObjectsOfType<T>(bool) public List<T> FindObjectsOfType<T>(bool activeOnly = true) where T : Component Parameters activeOnly bool Returns List<T> Type Parameters T FindObjectsOfType<T>(List<T>, bool) public void FindObjectsOfType<T>(List<T> results, bool activeOnly = true) where T : Component Parameters results List<T> activeOnly bool Type Parameters T GetInput<T>() public T GetInput<T>() where T : unmanaged Returns T Type Parameters T GetObject(int) Gets the NetworkObject with the specified id. Returns null in case no object with that id exists. public NetworkObject GetObject(int id) Parameters id int The id of the NetworkObject Returns NetworkObject GetPrefab(string) Gets a Network Prefab by name. Note: this causes GC. public GameObject GetPrefab(string name) Parameters name string Returns GameObject The Network Prefab Hide() protected void Hide() InitializePool(GameObject, int, bool) Initializes the pool for the specified prefab. After this method has been called for a certain prefab, all instances of that prefab will be recycled and reset when created/destroyed. Note: this method should only be called on OnStartup(NetworkSandbox), in other words, just after Netick has been started. public void InitializePool(GameObject networkedPrefab, int preloadedAmount, bool hideInactiveMembers = false) Parameters networkedPrefab GameObject Prefab to enable pooling for. preloadedAmount int How many instances to be preloaded. hideInactiveMembers bool Pass true to hide inactive pool members. Kick(ServerConnection) [Server Only] Disconnects a client from the server. public void Kick(ServerConnection client) Parameters client ServerConnection The client to be disconnected. Log(object) public void Log(object message) Parameters message object LogError(object) public void LogError(object message) Parameters message object LogWarning(object) public void LogWarning(object message) Parameters message object NetworkInstantiate(GameObject, Vector3, Quaternion, NetworkPlayer, SpawnPredictionKey) Instantiates a network prefab. Commonly, this should only be called on the server, since only the server can instantiate network prefabs. However, the client can also call this to spawn-predict a prefab by providing a spawn key which must be the same on the server and client when this method is called. Read the docs to learn more about how to use spawn-prediction. Note: make sure the prefab has been registered. Note: the specified input source will be given to every NetworkObject child of this prefab. public NetworkObject NetworkInstantiate(GameObject prefab, Vector3 position, Quaternion rotation, NetworkPlayer inputSource = null, SpawnPredictionKey predictedSpawnKey = default) Parameters prefab GameObject The prefab to be instantiated. position Vector3 Position of the instantiated object. rotation Quaternion Rotation of the instantiated object. inputSource NetworkPlayer Input source of the instantiated object. predictedSpawnKey SpawnPredictionKey Returns NetworkObject NetworkUpdate() public void NetworkUpdate() OnSceneSwitchStart(int) public void OnSceneSwitchStart(int sceneBuildIndex) Parameters sceneBuildIndex int RefreshMatchList() Requests an update to the match list. Only functional if the low-level transport has support for matchmaking. public void RefreshMatchList() SetComponentEnabled(Component, bool) public void SetComponentEnabled(Component component, bool enabled) Parameters component Component enabled bool SetInput<T>(T) public void SetInput<T>(T input) where T : unmanaged Parameters input T Type Parameters T Show() protected void Show() SwitchScene(int) [Server Only] Switches to a different scene. This must be called instead of LoadSceneAsync(int) or its variations. public void SwitchScene(int sceneBuildIndex) Parameters sceneBuildIndex int Index of the desired scene. TickToTime(Tick) Converts tick to time in seconds. public float TickToTime(Tick tick) Parameters tick Tick Returns float TickToTime(float) Converts tick to time in seconds. public float TickToTime(float tick) Parameters tick float Returns float TryGetBehaviour<T>(int, out T) Trys to get the NetworkBehaviour of a NetworkObject with the specified id. public bool TryGetBehaviour<T>(int id, out T behaviour) where T : NetworkBehaviour Parameters id int The id of the network object behaviour T Returns bool Type Parameters T TryGetObject(int, out NetworkObject) Trys to get the NetworkObject with the specified id. public bool TryGetObject(int id, out NetworkObject obj) Parameters id int The id of the NetworkObject obj NetworkObject Returns bool"
  },
  "api/Netick.NetworkSandboxExts.html": {
    "href": "api/Netick.NetworkSandboxExts.html",
    "title": "Class NetworkSandboxExts | Netick Networking Engine",
    "summary": "Class NetworkSandboxExts Namespace Netick Assembly Netick.Premium.Unity.dll public static class NetworkSandboxExts Inheritance object NetworkSandboxExts Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods OverlapSphere(NetworkSandbox, Vector3, float, List<LagCompHit>, NetworkPlayer, int, QueryTriggerInteraction, bool, bool, bool) public static void OverlapSphere(this NetworkSandbox sandbox, Vector3 center, float radius, List<LagCompHit> hits, NetworkPlayer inputSource, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal, bool includeUnityColliders = true, bool includeInputSource = false, bool oneHitPerHitshapeContainer = false) Parameters sandbox NetworkSandbox center Vector3 radius float hits List<LagCompHit> inputSource NetworkPlayer layerMask int queryTriggerInteraction QueryTriggerInteraction includeUnityColliders bool includeInputSource bool oneHitPerHitshapeContainer bool Raycast(NetworkSandbox, Vector3, Vector3, out LagCompHit, NetworkPlayer, float, int, QueryTriggerInteraction, bool, bool) public static bool Raycast(this NetworkSandbox sandbox, Vector3 origin, Vector3 direction, out LagCompHit hitData, NetworkPlayer inputSource, float maxDistance = Infinity, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal, bool includeUnityColliders = true, bool includeInputSource = false) Parameters sandbox NetworkSandbox origin Vector3 direction Vector3 hitData LagCompHit inputSource NetworkPlayer maxDistance float layerMask int queryTriggerInteraction QueryTriggerInteraction includeUnityColliders bool includeInputSource bool Returns bool"
  },
  "api/Netick.NetworkStack-1.html": {
    "href": "api/Netick.NetworkStack-1.html",
    "title": "Class NetworkStack<T> | Netick Networking Engine",
    "summary": "Class NetworkStack<T> Namespace Netick Assembly Netick.dll A networked Stack<T> collection. public sealed class NetworkStack<T> : NetworkStack, INetworkCollection, IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Inheritance object NetworkStack NetworkStack<T> Implements INetworkCollection IEnumerable<T> IEnumerable Inherited Members NetworkStack.OffsetToElements NetworkStack.HeaderMetaSizeWords object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkStack(int) public NetworkStack(int capacity) Parameters capacity int Properties Count public int Count { get; } Property Value int Methods Add(T) public void Add(T element) Parameters element T Clear() public void Clear() GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> InternalInit(INetickNetworkScript, int*, int, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public override void InternalReset() Peek() public T Peek() Returns T Pop() public T Pop() Returns T Push(T) public bool Push(T item) Parameters item T Returns bool TryPeek(out T) public bool TryPeek(out T result) Parameters result T Returns bool TryPop(out T) public bool TryPop(out T result) Parameters result T Returns bool"
  },
  "api/Netick.NetworkStack.html": {
    "href": "api/Netick.NetworkStack.html",
    "title": "Class NetworkStack | Netick Networking Engine",
    "summary": "Class NetworkStack Namespace Netick Assembly Netick.dll public class NetworkStack : INetworkCollection Inheritance object NetworkStack Implements INetworkCollection Derived NetworkStack<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkStack() public NetworkStack() Fields HeaderMetaSizeWords public const int HeaderMetaSizeWords = 1 Field Value int OffsetToElements public const int OffsetToElements = 1 Field Value int Methods InternalInit(INetickNetworkScript, int*, int, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.NetworkStackSnapshot-1.html": {
    "href": "api/Netick.NetworkStackSnapshot-1.html",
    "title": "Struct NetworkStackSnapshot<T> | Netick Networking Engine",
    "summary": "Struct NetworkStackSnapshot<T> Namespace Netick Assembly Netick.dll A snapshot of the state of a NetworkStack<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. public struct NetworkStackSnapshot<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Count public int Count { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/Netick.NetworkString128.html": {
    "href": "api/Netick.NetworkString128.html",
    "title": "Struct NetworkString128 | Netick Networking Engine",
    "summary": "Struct NetworkString128 Namespace Netick Assembly Netick.dll public struct NetworkString128 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString128(string) public NetworkString128(string value) Parameters value string Fields RawValue public FixedSize128<ushort> RawValue Field Value FixedSize128<ushort> Methods LoadIntoStringBuilder(StringBuilder) public void LoadIntoStringBuilder(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder ToString() public override string ToString() Returns string Operators implicit operator string(NetworkString128) public static implicit operator string(NetworkString128 val) Parameters val NetworkString128 Returns string implicit operator NetworkString128(string) public static implicit operator NetworkString128(string val) Parameters val string Returns NetworkString128"
  },
  "api/Netick.NetworkString16.html": {
    "href": "api/Netick.NetworkString16.html",
    "title": "Struct NetworkString16 | Netick Networking Engine",
    "summary": "Struct NetworkString16 Namespace Netick Assembly Netick.dll public struct NetworkString16 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString16(string) public NetworkString16(string value) Parameters value string Fields RawValue public FixedSize16<ushort> RawValue Field Value FixedSize16<ushort> Methods LoadIntoStringBuilder(StringBuilder) public void LoadIntoStringBuilder(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder ToString() public override string ToString() Returns string Operators implicit operator string(NetworkString16) public static implicit operator string(NetworkString16 val) Parameters val NetworkString16 Returns string implicit operator NetworkString16(string) public static implicit operator NetworkString16(string val) Parameters val string Returns NetworkString16"
  },
  "api/Netick.NetworkString256.html": {
    "href": "api/Netick.NetworkString256.html",
    "title": "Struct NetworkString256 | Netick Networking Engine",
    "summary": "Struct NetworkString256 Namespace Netick Assembly Netick.dll public struct NetworkString256 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString256(string) public NetworkString256(string value) Parameters value string Fields RawValue public FixedSize256<ushort> RawValue Field Value FixedSize256<ushort> Methods LoadIntoStringBuilder(StringBuilder) public void LoadIntoStringBuilder(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder ToString() public override string ToString() Returns string Operators implicit operator string(NetworkString256) public static implicit operator string(NetworkString256 val) Parameters val NetworkString256 Returns string implicit operator NetworkString256(string) public static implicit operator NetworkString256(string val) Parameters val string Returns NetworkString256"
  },
  "api/Netick.NetworkString32.html": {
    "href": "api/Netick.NetworkString32.html",
    "title": "Struct NetworkString32 | Netick Networking Engine",
    "summary": "Struct NetworkString32 Namespace Netick Assembly Netick.dll public struct NetworkString32 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString32(string) public NetworkString32(string value) Parameters value string Fields RawValue public FixedSize32<ushort> RawValue Field Value FixedSize32<ushort> Methods LoadIntoStringBuilder(StringBuilder) public void LoadIntoStringBuilder(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder ToString() public override string ToString() Returns string Operators implicit operator string(NetworkString32) public static implicit operator string(NetworkString32 val) Parameters val NetworkString32 Returns string implicit operator NetworkString32(string) public static implicit operator NetworkString32(string val) Parameters val string Returns NetworkString32"
  },
  "api/Netick.NetworkString64.html": {
    "href": "api/Netick.NetworkString64.html",
    "title": "Struct NetworkString64 | Netick Networking Engine",
    "summary": "Struct NetworkString64 Namespace Netick Assembly Netick.dll public struct NetworkString64 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString64(string) public NetworkString64(string value) Parameters value string Fields RawValue public FixedSize64<ushort> RawValue Field Value FixedSize64<ushort> Methods LoadIntoStringBuilder(StringBuilder) public void LoadIntoStringBuilder(StringBuilder stringBuilder) Parameters stringBuilder StringBuilder ToString() public override string ToString() Returns string Operators implicit operator string(NetworkString64) public static implicit operator string(NetworkString64 val) Parameters val NetworkString64 Returns string implicit operator NetworkString64(string) public static implicit operator NetworkString64(string val) Parameters val string Returns NetworkString64"
  },
  "api/Netick.NetworkString8.html": {
    "href": "api/Netick.NetworkString8.html",
    "title": "Struct NetworkString8 | Netick Networking Engine",
    "summary": "Struct NetworkString8 Namespace Netick Assembly Netick.dll public struct NetworkString8 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkString8(string) public NetworkString8(string value) Parameters value string Fields RawValue public FixedSize8<ushort> RawValue Field Value FixedSize8<ushort> Methods ToString() public override string ToString() Returns string Operators implicit operator string(NetworkString8) public static implicit operator string(NetworkString8 val) Parameters val NetworkString8 Returns string implicit operator NetworkString8(string) public static implicit operator NetworkString8(string val) Parameters val string Returns NetworkString8"
  },
  "api/Netick.NetworkTimer.html": {
    "href": "api/Netick.NetworkTimer.html",
    "title": "Struct NetworkTimer | Netick Networking Engine",
    "summary": "Struct NetworkTimer Namespace Netick Assembly Netick.dll public struct NetworkTimer : IEquatable<NetworkTimer> Implements IEquatable<NetworkTimer> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties TargetTick public int TargetTick { get; } Property Value int Methods Equals(NetworkTimer) public bool Equals(NetworkTimer other) Parameters other NetworkTimer Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetElapsedTime(NetickEngine, bool) public float GetElapsedTime(NetickEngine engine, bool usePredictedTiming = false) Parameters engine NetickEngine usePredictedTiming bool Returns float GetHashCode() public override int GetHashCode() Returns int GetRemainingTime(NetickEngine, bool) public float GetRemainingTime(NetickEngine engine, bool usePredictedTiming = false) Parameters engine NetickEngine usePredictedTiming bool Returns float IsRunning(NetickEngine, bool) public bool IsRunning(NetickEngine engine, bool usePredictedTiming = false) Parameters engine NetickEngine usePredictedTiming bool Returns bool IsStopped(NetickEngine, bool) public bool IsStopped(NetickEngine engine, bool usePredictedTiming = false) Parameters engine NetickEngine usePredictedTiming bool Returns bool RestartTimer(float, NetickEngine, bool) public static NetworkTimer RestartTimer(float time, NetickEngine engine, bool usePredictedTiming = false) Parameters time float engine NetickEngine usePredictedTiming bool Returns NetworkTimer StartTimer(float, NetickEngine, bool) public static NetworkTimer StartTimer(float time, NetickEngine engine, bool usePredictedTiming = false) Parameters time float engine NetickEngine usePredictedTiming bool Returns NetworkTimer ToString() public override string ToString() Returns string"
  },
  "api/Netick.NetworkTransform.html": {
    "href": "api/Netick.NetworkTransform.html",
    "title": "Class NetworkTransform | Netick Networking Engine",
    "summary": "Class NetworkTransform Namespace Netick Assembly Netick.Unity.dll [IgnoreCodeGen] [ExecutionOrder(-1000)] [AddComponentMenu(\"Netick/Network Transform\")] [RequireComponent(typeof(Transform))] [DisallowMultipleComponent] public class NetworkTransform : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour NetworkTransform Implements INetickNetworkScript INetickScript Derived NetworkRigidbody Inherited Members NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator<T>(string) NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkTransform() public NetworkTransform() Fields RenderTransform public Transform RenderTransform Field Value Transform TransformSpace [SerializeField] protected TransformSpace TransformSpace Field Value TransformSpace _posInversePrecision protected float _posInversePrecision Field Value float _posPrecision protected float _posPrecision Field Value float _syncPosition protected bool _syncPosition Field Value bool _syncRot protected bool _syncRot Field Value bool Properties InterpolationSource public InterpolationMode InterpolationSource { get; set; } Property Value InterpolationMode Methods GameEngineIntoNetcode() public override void GameEngineIntoNetcode() InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int Interpolate() public void Interpolate() NetcodeIntoGameEngine() public override void NetcodeIntoGameEngine() NetworkAwake() public override void NetworkAwake() NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. public override void NetworkRender()"
  },
  "api/Netick.NetworkTransformRepConditions.html": {
    "href": "api/Netick.NetworkTransformRepConditions.html",
    "title": "Enum NetworkTransformRepConditions | Netick Networking Engine",
    "summary": "Enum NetworkTransformRepConditions Namespace Netick Assembly Netick.Unity.dll [Flags] public enum NetworkTransformRepConditions Fields CompressPosition = 8 CompressRotation = 16 SyncPosition = 1 SyncRotation = 2"
  },
  "api/Netick.NetworkTransport.html": {
    "href": "api/Netick.NetworkTransport.html",
    "title": "Class NetworkTransport | Netick Networking Engine",
    "summary": "Class NetworkTransport Namespace Netick Assembly Netick.dll public abstract class NetworkTransport Inheritance object NetworkTransport Derived NetickTransport Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkTransport() protected NetworkTransport() Properties Engine public NetickEngine Engine { get; } Property Value NetickEngine NetworkPeer public NetworkPeer NetworkPeer { get; } Property Value NetworkPeer Methods Connect(string, int, byte[], int) public abstract void Connect(string address, int port, byte[] connectionData, int connectionDataLength) Parameters address string port int connectionData byte[] connectionDataLength int Disconnect(TransportConnection) public abstract void Disconnect(TransportConnection connection) Parameters connection TransportConnection ForceUpdate() public virtual void ForceUpdate() HostMatch(string) public virtual void HostMatch(string name) Parameters name string Init() public virtual void Init() OnMatchListUpdate(List<Session>) public void OnMatchListUpdate(List<Session> sessions) Parameters sessions List<Session> PollEvents() public abstract void PollEvents() Run(RunMode, int) public abstract void Run(RunMode mode, int port) Parameters mode RunMode port int Shutdown() public abstract void Shutdown() UpdateMatchList() public virtual void UpdateMatchList()"
  },
  "api/Netick.NetworkTransportProvider.html": {
    "href": "api/Netick.NetworkTransportProvider.html",
    "title": "Class NetworkTransportProvider | Netick Networking Engine",
    "summary": "Class NetworkTransportProvider Namespace Netick Assembly Netick.Unity.dll public abstract class NetworkTransportProvider : ScriptableObject Inheritance object Object ScriptableObject NetworkTransportProvider Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NetworkTransportProvider() protected NetworkTransportProvider() Methods MakeTransportInstance() public abstract NetworkTransport MakeTransportInstance() Returns NetworkTransport"
  },
  "api/Netick.NetworkUnorderedList-1.html": {
    "href": "api/Netick.NetworkUnorderedList-1.html",
    "title": "Class NetworkUnorderedList<T> | Netick Networking Engine",
    "summary": "Class NetworkUnorderedList<T> Namespace Netick Assembly Netick.dll A networked list collection. This is an unordered list meaning that the order of the elements during iteration is undefined. public sealed class NetworkUnorderedList<T> : NetworkUnorderedList, INetworkCollection, IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Inheritance object NetworkUnorderedList NetworkUnorderedList<T> Implements INetworkCollection IEnumerable<T> IEnumerable Inherited Members NetworkUnorderedList.OffsetToElements NetworkUnorderedList.HeaderMetaSizeWords object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkUnorderedList(int) public NetworkUnorderedList(int capacity) Parameters capacity int Properties Count public int Count { get; } Property Value int Methods Add(T) public bool Add(T element) Parameters element T Returns bool Clear() public void Clear() GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> InternalInit(INetickNetworkScript, int*, int, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public override void InternalReset() Remove(T) public bool Remove(T element) Parameters element T Returns bool"
  },
  "api/Netick.NetworkUnorderedList.html": {
    "href": "api/Netick.NetworkUnorderedList.html",
    "title": "Class NetworkUnorderedList | Netick Networking Engine",
    "summary": "Class NetworkUnorderedList Namespace Netick Assembly Netick.dll public class NetworkUnorderedList : INetworkCollection Inheritance object NetworkUnorderedList Implements INetworkCollection Derived NetworkUnorderedList<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkUnorderedList() public NetworkUnorderedList() Fields HeaderMetaSizeWords public const int HeaderMetaSizeWords = 1 Field Value int OffsetToElements public const int OffsetToElements = 1 Field Value int Methods InternalInit(INetickNetworkScript, int*, int, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.NetworkUnorderedListSnapshot-1.html": {
    "href": "api/Netick.NetworkUnorderedListSnapshot-1.html",
    "title": "Struct NetworkUnorderedListSnapshot<T> | Netick Networking Engine",
    "summary": "Struct NetworkUnorderedListSnapshot<T> Namespace Netick Assembly Netick.dll A snapshot of the state of a NetworkUnorderedList<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. public struct NetworkUnorderedListSnapshot<T> : IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Implements IEnumerable<T> IEnumerable Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties Count public int Count { get; } Property Value int Methods GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T>"
  },
  "api/Netick.Networked.html": {
    "href": "api/Netick.Networked.html",
    "title": "Class Networked | Netick Networking Engine",
    "summary": "Class Networked Namespace Netick Assembly Netick.dll public class Networked : Attribute Inheritance object Attribute Networked Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Networked(int, Relevancy, float) public Networked(int size = 1, Relevancy relevancy = Relevancy.Everyone, float precision = 0.001) Parameters size int relevancy Relevancy precision float"
  },
  "api/Netick.NotClientException.html": {
    "href": "api/Netick.NotClientException.html",
    "title": "Class NotClientException | Netick Networking Engine",
    "summary": "Class NotClientException Namespace Netick Assembly Netick.dll public sealed class NotClientException : Exception, ISerializable Inheritance object Exception NotClientException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors NotClientException(string, Exception) Constructs a NotClientException with a message and a inner exception public NotClientException(string message, Exception inner) Parameters message string The exception message inner Exception The inner exception"
  },
  "api/Netick.NotServerException.html": {
    "href": "api/Netick.NotServerException.html",
    "title": "Class NotServerException | Netick Networking Engine",
    "summary": "Class NotServerException Namespace Netick Assembly Netick.dll public sealed class NotServerException : Exception, ISerializable Inheritance object Exception NotServerException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Constructors NotServerException() Constructs a NotServerException public NotServerException() NotServerException(string) Constructs a NotServerException with a message public NotServerException(string message) Parameters message string The exception message NotServerException(string, Exception) Constructs a NotServerException with a message and a inner exception public NotServerException(string message, Exception inner) Parameters message string The exception message inner Exception The inner exception"
  },
  "api/Netick.ObjectList.html": {
    "href": "api/Netick.ObjectList.html",
    "title": "Class ObjectList | Netick Networking Engine",
    "summary": "Class ObjectList Namespace Netick Assembly Netick.Unity.dll public sealed class ObjectList : IEnumerable<NetworkObject>, IEnumerable Inheritance object ObjectList Implements IEnumerable<NetworkObject> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetEnumerator() public IEnumerator<NetworkObject> GetEnumerator() Returns IEnumerator<NetworkObject>"
  },
  "api/Netick.OnChanged.html": {
    "href": "api/Netick.OnChanged.html",
    "title": "Class OnChanged | Netick Networking Engine",
    "summary": "Class OnChanged Namespace Netick Assembly Netick.dll Use this attribute on a method you want to call when a specific property value changes. Example: [OnChanged(nameof(PropertyName)] [AttributeUsage(AttributeTargets.Method, Inherited = true, AllowMultiple = false)] public class OnChanged : Attribute Inheritance object Attribute OnChanged Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors OnChanged(string, bool) public OnChanged(string propertyName, bool invokeDuringResimulation = false) Parameters propertyName string invokeDuringResimulation bool"
  },
  "api/Netick.OnChangedData.html": {
    "href": "api/Netick.OnChangedData.html",
    "title": "Struct OnChangedData | Netick Networking Engine",
    "summary": "Struct OnChangedData Namespace Netick Assembly Netick.dll public struct OnChangedData : IEquatable<OnChangedData> Implements IEquatable<OnChangedData> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties InvokedForMisprediction Returns true if this OnChanged callback is due to a mismatch between the state of this variable before rollback, and the state after rollback and resimulation. public bool InvokedForMisprediction { get; } Property Value bool Methods Equals(OnChangedData) public bool Equals(OnChangedData other) Parameters other OnChangedData Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetArrayChangedElementIndex() Gets the index of the changed element of the array. public int GetArrayChangedElementIndex() Returns int GetArrayPreviousElementValue<T>() Gets the index of the changed element of the array. public T GetArrayPreviousElementValue<T>() where T : unmanaged Returns T Type Parameters T GetArrayPreviousElementValue<T>(int) Gets the value of the changed element of the array. This is an unsafe method, use it carefully and make sure to never go outside range to avoid a crash. public T GetArrayPreviousElementValue<T>(int index) where T : unmanaged Parameters index int Returns T Type Parameters T GetHashCode() public override int GetHashCode() Returns int GetPreviousNetworkDictionary<TKey, TValue>(NetworkDictionary<TKey, TValue>) Gets a snapshot of the previous state of a NetworkDictionary collection. public NetworkDictionarySnapshot<TKey, TValue> GetPreviousNetworkDictionary<TKey, TValue>(NetworkDictionary<TKey, TValue> collection) where TKey : unmanaged where TValue : unmanaged Parameters collection NetworkDictionary<TKey, TValue> Returns NetworkDictionarySnapshot<TKey, TValue> Type Parameters TKey TValue GetPreviousNetworkHashSet<T>(NetworkHashSet<T>) Gets a snapshot of the previous state of a NetworkHashSet collection. public NetworkHashSetSnapshot<T> GetPreviousNetworkHashSet<T>(NetworkHashSet<T> collection) where T : unmanaged Parameters collection NetworkHashSet<T> Returns NetworkHashSetSnapshot<T> Type Parameters T GetPreviousNetworkLinkedList<T>(NetworkLinkedList<T>) Gets a snapshot of the previous state of a NetworkLinkedList collection. public NetworkLinkedListSnapshot<T> GetPreviousNetworkLinkedList<T>(NetworkLinkedList<T> collection) where T : unmanaged Parameters collection NetworkLinkedList<T> Returns NetworkLinkedListSnapshot<T> Type Parameters T GetPreviousNetworkQueue<T>(NetworkQueue<T>) Gets a snapshot of the previous state of a NetworkQueue collection. public NetworkQueueSnapshot<T> GetPreviousNetworkQueue<T>(NetworkQueue<T> collection) where T : unmanaged Parameters collection NetworkQueue<T> Returns NetworkQueueSnapshot<T> Type Parameters T GetPreviousNetworkStack<T>(NetworkStack<T>) Gets a snapshot of the previous state of a NetworkStack collection. public NetworkStackSnapshot<T> GetPreviousNetworkStack<T>(NetworkStack<T> collection) where T : unmanaged Parameters collection NetworkStack<T> Returns NetworkStackSnapshot<T> Type Parameters T GetPreviousValueAsPointer() Gets a pointer to the previous value public int* GetPreviousValueAsPointer() Returns int* GetPreviousValue<T>() Gets previous value for the changed network property. Note: this must only be used with non-array network properties. For arrays, use GetArrayPreviousElementValue<T>(int) instead. public T GetPreviousValue<T>() where T : unmanaged Returns T Type Parameters T"
  },
  "api/Netick.OnChangedEvent.html": {
    "href": "api/Netick.OnChangedEvent.html",
    "title": "Delegate OnChangedEvent | Netick Networking Engine",
    "summary": "Delegate OnChangedEvent Namespace Netick Assembly Netick.dll public delegate void OnChangedEvent(INetickScript beh, OnChangedData changeInfo) Parameters beh INetickScript changeInfo OnChangedData Constructors OnChangedEvent(object, IntPtr) public OnChangedEvent(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(INetickScript, OnChangedData, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(INetickScript beh, OnChangedData changeInfo, AsyncCallback callback, object @object) Parameters beh INetickScript changeInfo OnChangedData callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(INetickScript, OnChangedData) public virtual void Invoke(INetickScript beh, OnChangedData changeInfo) Parameters beh INetickScript changeInfo OnChangedData"
  },
  "api/Netick.OnChangedMethod.html": {
    "href": "api/Netick.OnChangedMethod.html",
    "title": "Struct OnChangedMethod | Netick Networking Engine",
    "summary": "Struct OnChangedMethod Namespace Netick Assembly Netick.dll public struct OnChangedMethod Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors OnChangedMethod(bool, int, bool, int, int, int, OnChangedEvent) public OnChangedMethod(bool isArray, int inversePrecision, bool invokeDuringResims, int propertyIndex, int propertySize, int behaviourIndex, OnChangedEvent evnt) Parameters isArray bool inversePrecision int invokeDuringResims bool propertyIndex int propertySize int behaviourIndex int evnt OnChangedEvent"
  },
  "api/Netick.OnClientConnectedDelegate.html": {
    "href": "api/Netick.OnClientConnectedDelegate.html",
    "title": "Delegate OnClientConnectedDelegate | Netick Networking Engine",
    "summary": "Delegate OnClientConnectedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnClientConnectedDelegate(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection Constructors OnClientConnectedDelegate(object, IntPtr) public OnClientConnectedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection"
  },
  "api/Netick.OnClientDisconnectedDelegate.html": {
    "href": "api/Netick.OnClientDisconnectedDelegate.html",
    "title": "Delegate OnClientDisconnectedDelegate | Netick Networking Engine",
    "summary": "Delegate OnClientDisconnectedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnClientDisconnectedDelegate(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason Constructors OnClientDisconnectedDelegate(object, IntPtr) public OnClientDisconnectedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason"
  },
  "api/Netick.OnClientSceneLoadedDelegate.html": {
    "href": "api/Netick.OnClientSceneLoadedDelegate.html",
    "title": "Delegate OnClientSceneLoadedDelegate | Netick Networking Engine",
    "summary": "Delegate OnClientSceneLoadedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnClientSceneLoadedDelegate(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection Constructors OnClientSceneLoadedDelegate(object, IntPtr) public OnClientSceneLoadedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection client, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox client NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection"
  },
  "api/Netick.OnConnectFailed.html": {
    "href": "api/Netick.OnConnectFailed.html",
    "title": "Delegate OnConnectFailed | Netick Networking Engine",
    "summary": "Delegate OnConnectFailed Namespace Netick Assembly Netick.dll public delegate void OnConnectFailed(IEndPoint address, ConnectionFailedReason reason) Parameters address IEndPoint reason ConnectionFailedReason Constructors OnConnectFailed(object, IntPtr) public OnConnectFailed(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(IEndPoint, ConnectionFailedReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(IEndPoint address, ConnectionFailedReason reason, AsyncCallback callback, object @object) Parameters address IEndPoint reason ConnectionFailedReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(IEndPoint, ConnectionFailedReason) public virtual void Invoke(IEndPoint address, ConnectionFailedReason reason) Parameters address IEndPoint reason ConnectionFailedReason"
  },
  "api/Netick.OnConnectFailedDelegate.html": {
    "href": "api/Netick.OnConnectFailedDelegate.html",
    "title": "Delegate OnConnectFailedDelegate | Netick Networking Engine",
    "summary": "Delegate OnConnectFailedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnConnectFailedDelegate(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason Constructors OnConnectFailedDelegate(object, IntPtr) public OnConnectFailedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, ConnectionFailedReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, ConnectionFailedReason reason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox reason ConnectionFailedReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, ConnectionFailedReason) public virtual void Invoke(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason"
  },
  "api/Netick.OnConnectRequestDelegate.html": {
    "href": "api/Netick.OnConnectRequestDelegate.html",
    "title": "Delegate OnConnectRequestDelegate | Netick Networking Engine",
    "summary": "Delegate OnConnectRequestDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnConnectRequestDelegate(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest Constructors OnConnectRequestDelegate(object, IntPtr) public OnConnectRequestDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnectionRequest, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnectionRequest request, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox request NetworkConnectionRequest callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnectionRequest) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest"
  },
  "api/Netick.OnConnectedToServerDelegate.html": {
    "href": "api/Netick.OnConnectedToServerDelegate.html",
    "title": "Delegate OnConnectedToServerDelegate | Netick Networking Engine",
    "summary": "Delegate OnConnectedToServerDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnConnectedToServerDelegate(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection Constructors OnConnectedToServerDelegate(object, IntPtr) public OnConnectedToServerDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection"
  },
  "api/Netick.OnConnectionRequest.html": {
    "href": "api/Netick.OnConnectionRequest.html",
    "title": "Delegate OnConnectionRequest | Netick Networking Engine",
    "summary": "Delegate OnConnectionRequest Namespace Netick Assembly Netick.dll public delegate void OnConnectionRequest(NetworkConnectionRequest request) Parameters request NetworkConnectionRequest Constructors OnConnectionRequest(object, IntPtr) public OnConnectionRequest(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkConnectionRequest, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkConnectionRequest request, AsyncCallback callback, object @object) Parameters request NetworkConnectionRequest callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkConnectionRequest) public virtual void Invoke(NetworkConnectionRequest request) Parameters request NetworkConnectionRequest"
  },
  "api/Netick.OnDisconnectedFromServerDelegate.html": {
    "href": "api/Netick.OnDisconnectedFromServerDelegate.html",
    "title": "Delegate OnDisconnectedFromServerDelegate | Netick Networking Engine",
    "summary": "Delegate OnDisconnectedFromServerDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnDisconnectedFromServerDelegate(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason Constructors OnDisconnectedFromServerDelegate(object, IntPtr) public OnDisconnectedFromServerDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason"
  },
  "api/Netick.OnEntityDestroyedDelegate.html": {
    "href": "api/Netick.OnEntityDestroyedDelegate.html",
    "title": "Delegate OnEntityDestroyedDelegate | Netick Networking Engine",
    "summary": "Delegate OnEntityDestroyedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnEntityDestroyedDelegate(NetworkObject entity) Parameters entity NetworkObject Constructors OnEntityDestroyedDelegate(object, IntPtr) public OnEntityDestroyedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkObject, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkObject entity, AsyncCallback callback, object @object) Parameters entity NetworkObject callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkObject) public virtual void Invoke(NetworkObject entity) Parameters entity NetworkObject"
  },
  "api/Netick.OnInputReadDelegate.html": {
    "href": "api/Netick.OnInputReadDelegate.html",
    "title": "Delegate OnInputReadDelegate | Netick Networking Engine",
    "summary": "Delegate OnInputReadDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnInputReadDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnInputReadDelegate(object, IntPtr) public OnInputReadDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnMatchCreatedDelegate.html": {
    "href": "api/Netick.OnMatchCreatedDelegate.html",
    "title": "Delegate OnMatchCreatedDelegate | Netick Networking Engine",
    "summary": "Delegate OnMatchCreatedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnMatchCreatedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnMatchCreatedDelegate(object, IntPtr) public OnMatchCreatedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnMatchListUpdateDelegate.html": {
    "href": "api/Netick.OnMatchListUpdateDelegate.html",
    "title": "Delegate OnMatchListUpdateDelegate | Netick Networking Engine",
    "summary": "Delegate OnMatchListUpdateDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnMatchListUpdateDelegate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> Constructors OnMatchListUpdateDelegate(object, IntPtr) public OnMatchListUpdateDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, List<Session>, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, List<Session> sessions, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox sessions List<Session> callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, List<Session>) public virtual void Invoke(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session>"
  },
  "api/Netick.OnNetworkReceive.html": {
    "href": "api/Netick.OnNetworkReceive.html",
    "title": "Delegate OnNetworkReceive | Netick Networking Engine",
    "summary": "Delegate OnNetworkReceive Namespace Netick Assembly Netick.dll public delegate void OnNetworkReceive(Connection peer, BitBuffer reader) Parameters peer Connection reader BitBuffer Constructors OnNetworkReceive(object, IntPtr) public OnNetworkReceive(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(Connection, BitBuffer, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(Connection peer, BitBuffer reader, AsyncCallback callback, object @object) Parameters peer Connection reader BitBuffer callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(Connection, BitBuffer) public virtual void Invoke(Connection peer, BitBuffer reader) Parameters peer Connection reader BitBuffer"
  },
  "api/Netick.OnObjectCreatedDelegate.html": {
    "href": "api/Netick.OnObjectCreatedDelegate.html",
    "title": "Delegate OnObjectCreatedDelegate | Netick Networking Engine",
    "summary": "Delegate OnObjectCreatedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnObjectCreatedDelegate(NetworkObject entity) Parameters entity NetworkObject Constructors OnObjectCreatedDelegate(object, IntPtr) public OnObjectCreatedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkObject, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkObject entity, AsyncCallback callback, object @object) Parameters entity NetworkObject callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkObject) public virtual void Invoke(NetworkObject entity) Parameters entity NetworkObject"
  },
  "api/Netick.OnPeerConnected.html": {
    "href": "api/Netick.OnPeerConnected.html",
    "title": "Delegate OnPeerConnected | Netick Networking Engine",
    "summary": "Delegate OnPeerConnected Namespace Netick Assembly Netick.dll public delegate void OnPeerConnected(Connection peer) Parameters peer Connection Constructors OnPeerConnected(object, IntPtr) public OnPeerConnected(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(Connection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(Connection peer, AsyncCallback callback, object @object) Parameters peer Connection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(Connection) public virtual void Invoke(Connection peer) Parameters peer Connection"
  },
  "api/Netick.OnPeerDisconnected.html": {
    "href": "api/Netick.OnPeerDisconnected.html",
    "title": "Delegate OnPeerDisconnected | Netick Networking Engine",
    "summary": "Delegate OnPeerDisconnected Namespace Netick Assembly Netick.dll public delegate void OnPeerDisconnected(Connection peer, TransportDisconnectReason disconnectReason) Parameters peer Connection disconnectReason TransportDisconnectReason Constructors OnPeerDisconnected(object, IntPtr) public OnPeerDisconnected(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(Connection, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(Connection peer, TransportDisconnectReason disconnectReason, AsyncCallback callback, object @object) Parameters peer Connection disconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(Connection, TransportDisconnectReason) public virtual void Invoke(Connection peer, TransportDisconnectReason disconnectReason) Parameters peer Connection disconnectReason TransportDisconnectReason"
  },
  "api/Netick.OnSceneLoadStartedDelegate.html": {
    "href": "api/Netick.OnSceneLoadStartedDelegate.html",
    "title": "Delegate OnSceneLoadStartedDelegate | Netick Networking Engine",
    "summary": "Delegate OnSceneLoadStartedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnSceneLoadStartedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnSceneLoadStartedDelegate(object, IntPtr) public OnSceneLoadStartedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnSceneLoadedDelegate.html": {
    "href": "api/Netick.OnSceneLoadedDelegate.html",
    "title": "Delegate OnSceneLoadedDelegate | Netick Networking Engine",
    "summary": "Delegate OnSceneLoadedDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnSceneLoadedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnSceneLoadedDelegate(object, IntPtr) public OnSceneLoadedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnShutdownDelegate.html": {
    "href": "api/Netick.OnShutdownDelegate.html",
    "title": "Delegate OnShutdownDelegate | Netick Networking Engine",
    "summary": "Delegate OnShutdownDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnShutdownDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnShutdownDelegate(object, IntPtr) public OnShutdownDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.OnStartupDelegate.html": {
    "href": "api/Netick.OnStartupDelegate.html",
    "title": "Delegate OnStartupDelegate | Netick Networking Engine",
    "summary": "Delegate OnStartupDelegate Namespace Netick Assembly Netick.Unity.dll public delegate void OnStartupDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnStartupDelegate(object, IntPtr) public OnStartupDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.PhysicsSimulationStep.html": {
    "href": "api/Netick.PhysicsSimulationStep.html",
    "title": "Class PhysicsSimulationStep | Netick Networking Engine",
    "summary": "Class PhysicsSimulationStep Namespace Netick Assembly Netick.Unity.dll [ExecutionOrder(1000)] public sealed class PhysicsSimulationStep : NetickCoreComponent, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetickCoreComponent PhysicsSimulationStep Implements INetickScript Inherited Members NetickBehaviour.NetworkAwake() NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Methods NetworkFixedUpdate() Called every fixed-time network update/tick. Any changes/updates to the network state must happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate()"
  },
  "api/Netick.PhysicsType.html": {
    "href": "api/Netick.PhysicsType.html",
    "title": "Enum PhysicsType | Netick Networking Engine",
    "summary": "Enum PhysicsType Namespace Netick Assembly Netick.Unity.dll public enum PhysicsType Fields None = 0 Physics2D = 2 Physics3D = 1"
  },
  "api/Netick.PredictionErrorSmootherVector3.html": {
    "href": "api/Netick.PredictionErrorSmootherVector3.html",
    "title": "Struct PredictionErrorSmootherVector3 | Netick Networking Engine",
    "summary": "Struct PredictionErrorSmootherVector3 Namespace Netick Assembly Netick.dll public struct PredictionErrorSmootherVector3 Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields ErrorAmount public Vector3 ErrorAmount Field Value Vector3 Methods OnAfterRollbackAndResim(Vector3) public void OnAfterRollbackAndResim(Vector3 value) Parameters value Vector3 OnBeforeRollback(Vector3) public void OnBeforeRollback(Vector3 value) Parameters value Vector3 Update(float, float, float) public void Update(float deltaTime, float smoothFactor, float addErrorSmoothFactor) Parameters deltaTime float smoothFactor float addErrorSmoothFactor float"
  },
  "api/Netick.Pro.HitShapeState.html": {
    "href": "api/Netick.Pro.HitShapeState.html",
    "title": "Struct HitShapeState | Netick Networking Engine",
    "summary": "Struct HitShapeState Namespace Netick.Pro Assembly Netick.Pro.dll public struct HitShapeState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Center public Vector3 Center Field Value Vector3 GlobalCenter public Vector3 GlobalCenter Field Value Vector3 GlobalPosition public Vector3 GlobalPosition Field Value Vector3 GlobalRotation public Quaternion GlobalRotation Field Value Quaternion IsEnabled public bool IsEnabled Field Value bool Layer public int Layer Field Value int Radius public float Radius Field Value float Shape public HitShapeType Shape Field Value HitShapeType Size public Vector3 Size Field Value Vector3"
  },
  "api/Netick.Pro.HitShapeType.html": {
    "href": "api/Netick.Pro.HitShapeType.html",
    "title": "Enum HitShapeType | Netick Networking Engine",
    "summary": "Enum HitShapeType Namespace Netick.Pro Assembly Netick.Pro.dll public enum HitShapeType Fields Box = 0 Sphere = 1"
  },
  "api/Netick.Pro.IHitShape.html": {
    "href": "api/Netick.Pro.IHitShape.html",
    "title": "Interface IHitShape | Netick Networking Engine",
    "summary": "Interface IHitShape Namespace Netick.Pro Assembly Netick.Pro.dll public interface IHitShape Properties Center Vector3 Center { get; } Property Value Vector3 GlobalCenter Vector3 GlobalCenter { get; } Property Value Vector3 GlobalPosition Vector3 GlobalPosition { get; } Property Value Vector3 GlobalRotation Quaternion GlobalRotation { get; } Property Value Quaternion IsEnabled bool IsEnabled { get; } Property Value bool Layer int Layer { get; } Property Value int Radius float Radius { get; } Property Value float Shape HitShapeType Shape { get; } Property Value HitShapeType Size Vector3 Size { get; } Property Value Vector3"
  },
  "api/Netick.Pro.IHitShapeContainer.html": {
    "href": "api/Netick.Pro.IHitShapeContainer.html",
    "title": "Interface IHitShapeContainer | Netick Networking Engine",
    "summary": "Interface IHitShapeContainer Namespace Netick.Pro Assembly Netick.Pro.dll public interface IHitShapeContainer Properties BoundsSize Vector3 BoundsSize { get; set; } Property Value Vector3 GlobalPosition Vector3 GlobalPosition { get; } Property Value Vector3 IsEnabled bool IsEnabled { get; } Property Value bool Layer int Layer { get; } Property Value int RecalculateBounds bool RecalculateBounds { get; } Property Value bool Shapes List<LagCompShape> Shapes { get; } Property Value List<LagCompShape>"
  },
  "api/Netick.Pro.LagCompContainer.html": {
    "href": "api/Netick.Pro.LagCompContainer.html",
    "title": "Class LagCompContainer | Netick Networking Engine",
    "summary": "Class LagCompContainer Namespace Netick.Pro Assembly Netick.Pro.dll public class LagCompContainer Inheritance object LagCompContainer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LagCompContainer(IHitShapeContainer) public LagCompContainer(IHitShapeContainer container) Parameters container IHitShapeContainer Fields Engine public NetickEngine Engine Field Value NetickEngine Entity public Entity Entity Field Value Entity UserHitShapeContainer public readonly IHitShapeContainer UserHitShapeContainer Field Value IHitShapeContainer Properties Bounds public NetickBounds Bounds { get; } Property Value NetickBounds Methods Deinit() public void Deinit() GetBounds() public NetickBounds GetBounds() Returns NetickBounds Init(NetickEngine, Entity) public void Init(NetickEngine engine, Entity entity) Parameters engine NetickEngine entity Entity"
  },
  "api/Netick.Pro.LagCompShape.html": {
    "href": "api/Netick.Pro.LagCompShape.html",
    "title": "Class LagCompShape | Netick Networking Engine",
    "summary": "Class LagCompShape Namespace Netick.Pro Assembly Netick.Pro.dll public class LagCompShape Inheritance object LagCompShape Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors LagCompShape(IHitShape) public LagCompShape(IHitShape hitShape) Parameters hitShape IHitShape Properties Container public LagCompContainer Container { get; } Property Value LagCompContainer Index public int Index { get; } Property Value int Sandbox public NetickEngine Sandbox { get; } Property Value NetickEngine UserHitShape public IHitShape UserHitShape { get; } Property Value IHitShape Methods GetBounds() public NetickBounds GetBounds() Returns NetickBounds"
  },
  "api/Netick.Pro.LagCompensation.html": {
    "href": "api/Netick.Pro.LagCompensation.html",
    "title": "Class LagCompensation | Netick Networking Engine",
    "summary": "Class LagCompensation Namespace Netick.Pro Assembly Netick.Pro.dll public sealed class LagCompensation : INetickComponent Inheritance object LagCompensation Implements INetickComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors LagCompensation() public LagCompensation() Fields Compensate public bool Compensate Field Value bool Epsilon public static readonly float Epsilon Field Value float FloatMinDenormal public static volatile float FloatMinDenormal Field Value float FloatMinNormal public static volatile float FloatMinNormal Field Value float IsFlushToZeroEnabled public static bool IsFlushToZeroEnabled Field Value bool Methods CanRewind(ServerConnection) public static bool CanRewind(ServerConnection inputSource) Parameters inputSource ServerConnection Returns bool FetchHitShapePosAndRot(LagCompShape, NetworkPlayer, out Vector3, out Quaternion) public void FetchHitShapePosAndRot(LagCompShape hitShape, NetworkPlayer inputSource, out Vector3 pos, out Quaternion rot) Parameters hitShape LagCompShape inputSource NetworkPlayer pos Vector3 rot Quaternion FloatEqualsApproximately(float, float) public static bool FloatEqualsApproximately(float a, float b) Parameters a float b float Returns bool OverlapSphere(Vector3, float, List<NetHit>, NetworkPlayer, int, bool, bool) Performs a lag compensated OverlapSphere which computes and stores HitShapes and Colliders (if includeUnityColliders is equal to true) touching or inside the sphere. public void OverlapSphere(Vector3 center, float radius, List<NetHit> hits, NetworkPlayer inputSource, int layerMask = -1, bool includeInputSource = false, bool oneHitPerHitShapeContainer = false) Parameters center Vector3 Center of the sphere. radius float Radius of the sphere. hits List<NetHit> inputSource NetworkPlayer The input source to compensate for. layerMask int A defines which layers of colliders to include in the query. includeInputSource bool oneHitPerHitShapeContainer bool Choose whether you want to include only one HitShape per HitShapeContainer Raycast(Vector3, Vector3, out NetHit, NetworkPlayer, float, int, bool) Casts a lag compensated ray, from point origin, in direction direction, of length maxDistance, against all HitShapes and Colliders (if includeUnityColliders is equal to true) in the Scene. public bool Raycast(Vector3 origin, Vector3 direction, out NetHit hitData, NetworkPlayer inputSource, float maxDistance = Infinity, int layerMask = -1, bool includeInputSource = false) Parameters origin Vector3 The starting point of the ray in world coordinates. direction Vector3 The direction of the ray. hitData NetHit inputSource NetworkPlayer The input source to compensate for. maxDistance float The max distance the ray should check for collisions. layerMask int A that is used to selectively ignore Colliders when casting a ray. includeInputSource bool Returns bool Returns true if the ray intersects with a Collider/HitShape, otherwise false. RaycastAll(Vector3, Vector3, List<NetHit>, NetworkPlayer, float, int, bool, bool) Casts a lag compensated ray, from point origin, in direction direction, of length maxDistance, against all HitShapes and in the Scene, and return all hits. public void RaycastAll(Vector3 origin, Vector3 direction, List<NetHit> hits, NetworkPlayer inputSource, float maxDistance = Infinity, int layerMask = -1, bool includeInputSource = false, bool oneHitPerHitShapeContainer = false) Parameters origin Vector3 The starting point of the ray in world coordinates. direction Vector3 The direction of the ray. hits List<NetHit> inputSource NetworkPlayer The input source to compensate for. maxDistance float The max distance the ray should check for collisions. layerMask int A that is used to selectively ignore Colliders when casting a ray. includeInputSource bool oneHitPerHitShapeContainer bool"
  },
  "api/Netick.Pro.NetHit.html": {
    "href": "api/Netick.Pro.NetHit.html",
    "title": "Struct NetHit | Netick Networking Engine",
    "summary": "Struct NetHit Namespace Netick.Pro Assembly Netick.Pro.dll public struct NetHit Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Distance public float Distance Field Value float HitShape public LagCompShape HitShape Field Value LagCompShape Point public Vector3 Point Field Value Vector3 Type public NetHitType Type Field Value NetHitType"
  },
  "api/Netick.Pro.NetHitType.html": {
    "href": "api/Netick.Pro.NetHitType.html",
    "title": "Enum NetHitType | Netick Networking Engine",
    "summary": "Enum NetHitType Namespace Netick.Pro Assembly Netick.Pro.dll public enum NetHitType Fields Netick = 0 PhysicsEngine = 1"
  },
  "api/Netick.Pro.NetickBounds.html": {
    "href": "api/Netick.Pro.NetickBounds.html",
    "title": "Struct NetickBounds | Netick Networking Engine",
    "summary": "Struct NetickBounds Namespace Netick.Pro Assembly Netick.Pro.dll public struct NetickBounds : IEquatable<NetickBounds> Implements IEquatable<NetickBounds> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickBounds(Vector3, Vector3) public NetickBounds(Vector3 center, Vector3 size) Parameters center Vector3 size Vector3 Fields Center public Vector3 Center Field Value Vector3 Extents public Vector3 Extents Field Value Vector3 Properties Max public Vector3 Max { get; set; } Property Value Vector3 Min public Vector3 Min { get; set; } Property Value Vector3 Size public Vector3 Size { get; set; } Property Value Vector3 Methods Encapsulate(NetickBounds) public void Encapsulate(NetickBounds bounds) Parameters bounds NetickBounds Encapsulate(Vector3) public void Encapsulate(Vector3 point) Parameters point Vector3 Equals(NetickBounds) public bool Equals(NetickBounds other) Parameters other NetickBounds Returns bool Equals(object) public override bool Equals(object other) Parameters other object Returns bool Expand(Vector3) public void Expand(Vector3 amount) Parameters amount Vector3 Expand(float) public void Expand(float amount) Parameters amount float GetHashCode() public override int GetHashCode() Returns int Intersects(NetickBounds) public bool Intersects(NetickBounds bounds) Parameters bounds NetickBounds Returns bool SetMinMax(Vector3, Vector3) public void SetMinMax(Vector3 min, Vector3 max) Parameters min Vector3 max Vector3 Operators operator ==(NetickBounds, NetickBounds) public static bool operator ==(NetickBounds lhs, NetickBounds rhs) Parameters lhs NetickBounds rhs NetickBounds Returns bool operator !=(NetickBounds, NetickBounds) public static bool operator !=(NetickBounds lhs, NetickBounds rhs) Parameters lhs NetickBounds rhs NetickBounds Returns bool"
  },
  "api/Netick.Pro.NetickProHelper.html": {
    "href": "api/Netick.Pro.NetickProHelper.html",
    "title": "Class NetickProHelper | Netick Networking Engine",
    "summary": "Class NetickProHelper Namespace Netick.Pro Assembly Netick.Pro.dll public static class NetickProHelper Inheritance object NetickProHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString()"
  },
  "api/Netick.Pro.NetickRay.html": {
    "href": "api/Netick.Pro.NetickRay.html",
    "title": "Struct NetickRay | Netick Networking Engine",
    "summary": "Struct NetickRay Namespace Netick.Pro Assembly Netick.Pro.dll public struct NetickRay Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetickRay(Vector3, Vector3) public NetickRay(Vector3 origin, Vector3 direction) Parameters origin Vector3 direction Vector3 Fields Direction public Vector3 Direction Field Value Vector3 Origin public Vector3 Origin Field Value Vector3"
  },
  "api/Netick.Pro.html": {
    "href": "api/Netick.Pro.html",
    "title": "Namespace Netick.Pro | Netick Networking Engine",
    "summary": "Namespace Netick.Pro Classes LagCompContainer LagCompShape LagCompensation Structs HitShapeState NetHit NetickRay Interfaces IHitShape IHitShapeContainer Enums HitShapeType NetHitType"
  },
  "api/Netick.ProfilerManager.html": {
    "href": "api/Netick.ProfilerManager.html",
    "title": "Class ProfilerManager | Netick Networking Engine",
    "summary": "Class ProfilerManager Namespace Netick Assembly Netick.Unity.dll public class ProfilerManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ProfilerManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors ProfilerManager() public ProfilerManager() Fields Instance public static ProfilerManager Instance Field Value ProfilerManager _profilerList public static List<NetcodeProfiler> _profilerList Field Value List<NetcodeProfiler> Methods AddProfiler(NetcodeProfiler) public void AddProfiler(NetcodeProfiler profiler) Parameters profiler NetcodeProfiler OnGUI() public void OnGUI()"
  },
  "api/Netick.ReflectionData.html": {
    "href": "api/Netick.ReflectionData.html",
    "title": "Class ReflectionData | Netick Networking Engine",
    "summary": "Class ReflectionData Namespace Netick Assembly Netick.dll public sealed class ReflectionData Inheritance object ReflectionData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ReflectionData(string[]) public ReflectionData(string[] assemblies) Parameters assemblies string[] Fields Assemblies public List<Assembly> Assemblies Field Value List<Assembly> Methods AssemblyIsLoaded(string) public bool AssemblyIsLoaded(string name) Parameters name string Returns bool"
  },
  "api/Netick.Relevancy.html": {
    "href": "api/Netick.Relevancy.html",
    "title": "Enum Relevancy | Netick Networking Engine",
    "summary": "Enum Relevancy Namespace Netick Assembly Netick.dll public enum Relevancy Fields Everyone = 1 InputSource = 0"
  },
  "api/Netick.RemoteInterpolation.html": {
    "href": "api/Netick.RemoteInterpolation.html",
    "title": "Class RemoteInterpolation | Netick Networking Engine",
    "summary": "Class RemoteInterpolation Namespace Netick Assembly Netick.dll A class representing the remote interpolation of this instance NetickEngine. This should be used whenever you want to use Remote Timeline on the client. public sealed class RemoteInterpolation : Interpolation Inheritance object Interpolation RemoteInterpolation Inherited Members Interpolation.FromSnapshot Interpolation.ToSnapshot object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties Alpha public override float Alpha { get; } Property Value float BufferTime public float BufferTime { get; } Property Value float From public override Tick From { get; } Property Value Tick HasSnapshots public override bool HasSnapshots { get; } Property Value bool Time Time in seconds. public override float Time { get; } Property Value float To public override Tick To { get; } Property Value Tick Methods Reset() public void Reset()"
  },
  "api/Netick.ReplicationMode.html": {
    "href": "api/Netick.ReplicationMode.html",
    "title": "Enum ReplicationMode | Netick Networking Engine",
    "summary": "Enum ReplicationMode Namespace Netick Assembly Netick.dll public enum ReplicationMode Fields Optimistic = 0 Pessimistic = 1"
  },
  "api/Netick.ResetOnSceneSwitch.html": {
    "href": "api/Netick.ResetOnSceneSwitch.html",
    "title": "Interface ResetOnSceneSwitch | Netick Networking Engine",
    "summary": "Interface ResetOnSceneSwitch Namespace Netick Assembly Netick.Unity.dll public interface ResetOnSceneSwitch Methods OnSceneSwitchStart() void OnSceneSwitchStart()"
  },
  "api/Netick.Rpc.html": {
    "href": "api/Netick.Rpc.html",
    "title": "Class Rpc | Netick Networking Engine",
    "summary": "Class Rpc Namespace Netick Assembly Netick.dll Use this attribute on any method you want to make an RPC. Should have the return type of void, and not be static. * Use the parameter \"source\" to specify who is allowed to send this RPC. * Use the parameter \"target\" to specify who is allowed to receive and execute this RPC. * Use the parameter \"isReliable\" to specify if this Rpc should be reliable or not, meaning it won't be lost (due to packet loss). * Use the parameter \"localInvoke\" to specify if this Rpc should be executed on the machine it was called from. [AttributeUsage(AttributeTargets.Method, Inherited = true, AllowMultiple = false)] public class Rpc : Attribute Inheritance object Attribute Rpc Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Rpc(RpcPeers, RpcPeers, bool, bool) public Rpc(RpcPeers source = RpcPeers.Everyone, RpcPeers target = RpcPeers.Everyone, bool isReliable = false, bool localInvoke = false) Parameters source RpcPeers target RpcPeers isReliable bool localInvoke bool"
  },
  "api/Netick.RpcPeers.html": {
    "href": "api/Netick.RpcPeers.html",
    "title": "Enum RpcPeers | Netick Networking Engine",
    "summary": "Enum RpcPeers Namespace Netick Assembly Netick.dll public enum RpcPeers Fields Everyone = 3 InputSource = 1 Owner = 0 Proxies = 2"
  },
  "api/Netick.RunMode.html": {
    "href": "api/Netick.RunMode.html",
    "title": "Enum RunMode | Netick Networking Engine",
    "summary": "Enum RunMode Namespace Netick Assembly Netick.dll public enum RunMode Fields Client = 1 Server = 0"
  },
  "api/Netick.Server.html": {
    "href": "api/Netick.Server.html",
    "title": "Class Server | Netick Networking Engine",
    "summary": "Class Server Namespace Netick Assembly Netick.dll public sealed class Server : NetworkPeer Inheritance object NetworkPlayer NetworkPeer Server Inherited Members NetworkPeer.Transport NetworkPlayer.Engine NetworkPlayer.AddInterestGroup(int) NetworkPlayer.AddInterestGroup(InterestManagementGroup) NetworkPlayer.AddInterestBoxArea(NetickBounds) NetworkPlayer.Position NetworkPlayer.ViewDirection NetworkPlayer.Distance NetworkPlayer.FieldOfViewAngle NetworkPlayer.PlayerId NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Properties InKBps public override float InKBps { get; } Property Value float OutKBps public override float OutKBps { get; } Property Value float Methods Kick(ServerConnection) public void Kick(ServerConnection client) Parameters client ServerConnection OnConnectFailed(ConnectionFailedReason) public override void OnConnectFailed(ConnectionFailedReason reason) Parameters reason ConnectionFailedReason OnConnectRequest(byte[], int, IEndPoint) public override bool OnConnectRequest(byte[] data, int length, IEndPoint source) Parameters data byte[] length int source IEndPoint Returns bool OnConnected(TransportConnection) public override void OnConnected(TransportConnection peer) Parameters peer TransportConnection OnDisconnected(TransportConnection, TransportDisconnectReason) public override void OnDisconnected(TransportConnection peer, TransportDisconnectReason transportDisconnectReason) Parameters peer TransportConnection transportDisconnectReason TransportDisconnectReason Receive(TransportConnection, BitBuffer, TransportDeliveryMethod) public override void Receive(TransportConnection connection, BitBuffer buffer, TransportDeliveryMethod transportDeliveryMethod) Parameters connection TransportConnection buffer BitBuffer transportDeliveryMethod TransportDeliveryMethod"
  },
  "api/Netick.ServerConnection.html": {
    "href": "api/Netick.ServerConnection.html",
    "title": "Class ServerConnection | Netick Networking Engine",
    "summary": "Class ServerConnection Namespace Netick Assembly Netick.dll public sealed class ServerConnection : NetworkConnection Inheritance object NetworkPlayer NetworkConnection ServerConnection Inherited Members NetworkConnection.RemoteUserData NetworkConnection.LocalUserData NetworkConnection.MaxOutgoingDataPerTickInBytes NetworkConnection.RTT NetworkConnection.SendData(byte, byte*, int, TransportDeliveryMethod) NetworkConnection.SendData(byte, byte[], int, TransportDeliveryMethod) NetworkConnection.Id NetworkConnection.ReplicateEntities NetworkConnection.EndPoint NetworkConnection.TransportConnection NetworkConnection.BytesIn NetworkConnection.BytesOut NetworkConnection.InPacketLossBurst NetworkConnection.InPacketLoss NetworkConnection.OutPacketLoss NetworkPlayer.Engine NetworkPlayer.AddInterestGroup(int) NetworkPlayer.AddInterestGroup(InterestManagementGroup) NetworkPlayer.AddInterestBoxArea(NetickBounds) NetworkPlayer.Position NetworkPlayer.ViewDirection NetworkPlayer.Distance NetworkPlayer.FieldOfViewAngle NetworkPlayer.PlayerId NetworkPlayer.PlayerObject object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors ServerConnection(short, NetickEngine) public ServerConnection(short clientIndex, NetickEngine engine) Parameters clientIndex short engine NetickEngine Fields SimulationData public readonly ClientData SimulationData Field Value ClientData Properties InterestGroups public IReadOnlyList<InterestManagementGroup> InterestGroups { get; } Property Value IReadOnlyList<InterestManagementGroup> Methods ProcessAck(Tick, bool) protected void ProcessAck(Tick snapshotTick, bool wasLost) Parameters snapshotTick Tick wasLost bool"
  },
  "api/Netick.ServerSimulation.html": {
    "href": "api/Netick.ServerSimulation.html",
    "title": "Class ServerSimulation | Netick Networking Engine",
    "summary": "Class ServerSimulation Namespace Netick Assembly Netick.dll public sealed class ServerSimulation : Simulation Inheritance object Simulation ServerSimulation Inherited Members Simulation.UnlinkedEntities Simulation.FetchInputLocal<T>(out T, ref bool, int) Simulation.GetInput<T>(int) Simulation.SetInput<T>(T, int) Simulation.GetEntityByWorldIndex(int) Simulation.RemoveFromNetworkLoop(Entity) Simulation.ClientAddUnlinkedEntity(Entity, int, int) Simulation.CreateAndLinkEntityLocal(INetickEntity) Simulation.CreateEntity(int) Simulation.LinkEntity(INetickEntity, Entity) Simulation.CurrentInput object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods FetchInputFor(int, out SimulationInput, ref bool) public bool FetchInputFor(int cliIndex, out SimulationInput input, ref bool isDuplicated) Parameters cliIndex int input SimulationInput isDuplicated bool Returns bool FetchInputFor<T>(int, out T, ref bool, int) public bool FetchInputFor<T>(int cliIndex, out T input, ref bool isDuplicated, int localPlayerIndex) where T : unmanaged Parameters cliIndex int input T isDuplicated bool localPlayerIndex int Returns bool Type Parameters T"
  },
  "api/Netick.Session.html": {
    "href": "api/Netick.Session.html",
    "title": "Struct Session | Netick Networking Engine",
    "summary": "Struct Session Namespace Netick Assembly Netick.dll public struct Session : IEquatable<Session> Implements IEquatable<Session> Inherited Members ValueType.Equals(object) ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields IP public string IP Field Value string Name public string Name Field Value string Port public int Port Field Value int Methods Equals(Session) public bool Equals(Session other) Parameters other Session Returns bool GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/Netick.SimulatedPeer.html": {
    "href": "api/Netick.SimulatedPeer.html",
    "title": "Class SimulatedPeer | Netick Networking Engine",
    "summary": "Class SimulatedPeer Namespace Netick Assembly Netick.Unity.dll public class SimulatedPeer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SimulatedPeer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors SimulatedPeer() public SimulatedPeer() Fields DumbClient public bool DumbClient Field Value bool IsClient public bool IsClient Field Value bool Peer public Client Peer Field Value Client"
  },
  "api/Netick.Simulation.html": {
    "href": "api/Netick.Simulation.html",
    "title": "Class Simulation | Netick Networking Engine",
    "summary": "Class Simulation Namespace Netick Assembly Netick.dll public abstract class Simulation Inheritance object Simulation Derived ClientSimulation ServerSimulation Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields UnlinkedEntities public Dictionary<int, Entity> UnlinkedEntities Field Value Dictionary<int, Entity> Properties CurrentInput public SimulationInput CurrentInput { get; } Property Value SimulationInput Methods ClientAddUnlinkedEntity(Entity, int, int) public void ClientAddUnlinkedEntity(Entity entity, int id, int worldIndex) Parameters entity Entity id int worldIndex int CreateAndLinkEntityLocal(INetickEntity) public Entity CreateAndLinkEntityLocal(INetickEntity userEntity) Parameters userEntity INetickEntity Returns Entity CreateEntity(int) public Entity CreateEntity(int stateSizeWords) Parameters stateSizeWords int Returns Entity FetchInputLocal<T>(out T, ref bool, int) public bool FetchInputLocal<T>(out T input, ref bool isDuplicated, int localPlayerIndex) where T : unmanaged Parameters input T isDuplicated bool localPlayerIndex int Returns bool Type Parameters T GetEntityByWorldIndex(int) public Entity GetEntityByWorldIndex(int worldIndex) Parameters worldIndex int Returns Entity GetInput<T>(int) public T GetInput<T>(int index) where T : unmanaged Parameters index int Returns T Type Parameters T LinkEntity(INetickEntity, Entity) public Entity LinkEntity(INetickEntity userEntity, Entity entity) Parameters userEntity INetickEntity entity Entity Returns Entity RemoveFromNetworkLoop(Entity) public void RemoveFromNetworkLoop(Entity entity) Parameters entity Entity SetInput<T>(T, int) public void SetInput<T>(T input, int index) where T : unmanaged Parameters input T index int Type Parameters T"
  },
  "api/Netick.SimulationClock.html": {
    "href": "api/Netick.SimulationClock.html",
    "title": "Class SimulationClock | Netick Networking Engine",
    "summary": "Class SimulationClock Namespace Netick Assembly Netick.dll public sealed class SimulationClock Inheritance object SimulationClock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Fields Alpha public float Alpha Field Value float Properties DeltaTime public float DeltaTime { get; } Property Value float FixedDelta public float FixedDelta { get; } Property Value float"
  },
  "api/Netick.SimulationInput.html": {
    "href": "api/Netick.SimulationInput.html",
    "title": "Class SimulationInput | Netick Networking Engine",
    "summary": "Class SimulationInput Namespace Netick Assembly Netick.dll public sealed class SimulationInput Inheritance object SimulationInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Constructors SimulationInput() public SimulationInput() Fields Alpha public float Alpha Field Value float SrvTick public Tick SrvTick Field Value Tick"
  },
  "api/Netick.SingleInstanceEnforcer.html": {
    "href": "api/Netick.SingleInstanceEnforcer.html",
    "title": "Class SingleInstanceEnforcer | Netick Networking Engine",
    "summary": "Class SingleInstanceEnforcer Namespace Netick Assembly Netick.Unity.dll Add this component to a GameObject to ensure only a single instance of it will exist at the same time, across all sandboxes. [AddComponentMenu(\"Netick/Single Instance Enforcer\")] [DisallowMultipleComponent] public class SingleInstanceEnforcer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SingleInstanceEnforcer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors SingleInstanceEnforcer() public SingleInstanceEnforcer()"
  },
  "api/Netick.Smooth.html": {
    "href": "api/Netick.Smooth.html",
    "title": "Class Smooth | Netick Networking Engine",
    "summary": "Class Smooth Namespace Netick Assembly Netick.dll public class Smooth : Attribute Inheritance object Attribute Smooth Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Smooth(bool, InterpolationSource) public Smooth(bool auto = true, InterpolationSource interpolationSource = InterpolationSource.Auto) Parameters auto bool interpolationSource InterpolationSource Fields Auto public bool Auto Field Value bool"
  },
  "api/Netick.SmoothMetaData.html": {
    "href": "api/Netick.SmoothMetaData.html",
    "title": "Struct SmoothMetaData | Netick Networking Engine",
    "summary": "Struct SmoothMetaData Namespace Netick Assembly Netick.dll public struct SmoothMetaData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields DataOffsetWords public int DataOffsetWords Field Value int Precision public float Precision Field Value float VectorFloatFieldsCount public int VectorFloatFieldsCount Field Value int"
  },
  "api/Netick.Smoothed.html": {
    "href": "api/Netick.Smoothed.html",
    "title": "Class Smoothed | Netick Networking Engine",
    "summary": "Class Smoothed Namespace Netick Assembly Netick.dll public class Smoothed : Attribute Inheritance object Attribute Smoothed Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Smoothed() public Smoothed()"
  },
  "api/Netick.SpawnPredictionKey.html": {
    "href": "api/Netick.SpawnPredictionKey.html",
    "title": "Struct SpawnPredictionKey | Netick Networking Engine",
    "summary": "Struct SpawnPredictionKey Namespace Netick Assembly Netick.dll public struct SpawnPredictionKey : IEquatable<SpawnPredictionKey> Implements IEquatable<SpawnPredictionKey> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors SpawnPredictionKey(byte, byte, byte, byte) public SpawnPredictionKey(byte part1 = 0, byte part2 = 0, byte part3 = 0, byte part4 = 0) Parameters part1 byte part2 byte part3 byte part4 byte Fields RawValue public readonly uint RawValue Field Value uint Properties Invalid public static SpawnPredictionKey Invalid { get; } Property Value SpawnPredictionKey IsValid public readonly bool IsValid { get; } Property Value bool Methods Equals(SpawnPredictionKey) public bool Equals(SpawnPredictionKey other) Parameters other SpawnPredictionKey Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int"
  },
  "api/Netick.StartMode.html": {
    "href": "api/Netick.StartMode.html",
    "title": "Enum StartMode | Netick Networking Engine",
    "summary": "Enum StartMode Namespace Netick Assembly Netick.Unity.dll Manages Netick and its sandboxes, and is used to start and shut down Netick. public enum StartMode Fields Client = 1 Server = 0 ServerAndClient = 2"
  },
  "api/Netick.StructExample.html": {
    "href": "api/Netick.StructExample.html",
    "title": "Struct StructExample | Netick Networking Engine",
    "summary": "Struct StructExample Namespace Netick Assembly Netick.Unity.dll public struct StructExample Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields A1 public int A1 Field Value int A2 public int A2 Field Value int A3 public int A3 Field Value int"
  },
  "api/Netick.Tick.html": {
    "href": "api/Netick.Tick.html",
    "title": "Struct Tick | Netick Networking Engine",
    "summary": "Struct Tick Namespace Netick Assembly Netick.dll public struct Tick : IEquatable<Tick> Implements IEquatable<Tick> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors Tick(int) public Tick(int rawValue) Parameters rawValue int Fields InvalidTick public static Tick InvalidTick Field Value Tick TickValue public int TickValue Field Value int Properties IsValid public bool IsValid { get; } Property Value bool Methods Equals(Tick) public bool Equals(Tick other) Parameters other Tick Returns bool Equals(object) public override bool Equals(object obj) Parameters obj object Returns bool GetHashCode() public override int GetHashCode() Returns int ToString() public override string ToString() Returns string Operators operator +(Tick, int) public static Tick operator +(Tick a, int b) Parameters a Tick b int Returns Tick operator ==(Tick, Tick) public static bool operator ==(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator >(Tick, Tick) public static bool operator >(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator >=(Tick, Tick) public static bool operator >=(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator ++(Tick) public static Tick operator ++(Tick a) Parameters a Tick Returns Tick operator !=(Tick, Tick) public static bool operator !=(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator <(Tick, Tick) public static bool operator <(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator <=(Tick, Tick) public static bool operator <=(Tick a, Tick b) Parameters a Tick b Tick Returns bool operator %(Tick, int) public static int operator %(Tick a, int b) Parameters a Tick b int Returns int operator -(Tick, Tick) public static int operator -(Tick a, Tick b) Parameters a Tick b Tick Returns int operator -(Tick, int) public static Tick operator -(Tick a, int b) Parameters a Tick b int Returns Tick"
  },
  "api/Netick.TrackedRigidbody2D.html": {
    "href": "api/Netick.TrackedRigidbody2D.html",
    "title": "Class TrackedRigidbody2D | Netick Networking Engine",
    "summary": "Class TrackedRigidbody2D Namespace Netick Assembly Netick.Unity.dll public class TrackedRigidbody2D : TrackedRigidbodyBase Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase TrackedRigidbody2D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbody2D() public TrackedRigidbody2D() Properties IsKinematic public override bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public override void DestroyForNetick()"
  },
  "api/Netick.TrackedRigidbody3D.html": {
    "href": "api/Netick.TrackedRigidbody3D.html",
    "title": "Class TrackedRigidbody3D | Netick Networking Engine",
    "summary": "Class TrackedRigidbody3D Namespace Netick Assembly Netick.Unity.dll public class TrackedRigidbody3D : TrackedRigidbodyBase Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase TrackedRigidbody3D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbody3D() public TrackedRigidbody3D() Properties IsKinematic public override bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public override void DestroyForNetick()"
  },
  "api/Netick.TrackedRigidbodyBase.html": {
    "href": "api/Netick.TrackedRigidbodyBase.html",
    "title": "Class TrackedRigidbodyBase | Netick Networking Engine",
    "summary": "Class TrackedRigidbodyBase Namespace Netick Assembly Netick.Unity.dll public abstract class TrackedRigidbodyBase : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase Derived TrackedRigidbody2D TrackedRigidbody3D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbodyBase() protected TrackedRigidbodyBase() Properties IsKinematic public abstract bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public abstract void DestroyForNetick()"
  },
  "api/Netick.TransformSpace.html": {
    "href": "api/Netick.TransformSpace.html",
    "title": "Enum TransformSpace | Netick Networking Engine",
    "summary": "Enum TransformSpace Namespace Netick Assembly Netick.Unity.dll public enum TransformSpace Fields Local = 0 World = 1"
  },
  "api/Netick.TransportConnection.html": {
    "href": "api/Netick.TransportConnection.html",
    "title": "Class TransportConnection | Netick Networking Engine",
    "summary": "Class TransportConnection Namespace Netick Assembly Netick.dll public abstract class TransportConnection Inheritance object TransportConnection Derived NetickTransportConnection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TransportConnection() protected TransportConnection() Properties AssociatedNetworkConnection public NetworkConnection AssociatedNetworkConnection { get; } Property Value NetworkConnection EndPoint public abstract IEndPoint EndPoint { get; } Property Value IEndPoint Mtu public abstract int Mtu { get; } Property Value int Methods Send(IntPtr, int) public abstract void Send(IntPtr ptr, int length) Parameters ptr IntPtr length int SendUserData(IntPtr, int, TransportDeliveryMethod) public virtual void SendUserData(IntPtr ptr, int length, TransportDeliveryMethod transportDeliveryMethod) Parameters ptr IntPtr length int transportDeliveryMethod TransportDeliveryMethod"
  },
  "api/Netick.TransportDeliveryMethod.html": {
    "href": "api/Netick.TransportDeliveryMethod.html",
    "title": "Enum TransportDeliveryMethod | Netick Networking Engine",
    "summary": "Enum TransportDeliveryMethod Namespace Netick Assembly Netick.dll public enum TransportDeliveryMethod Fields Reliable = 1 Unreliable = 0"
  },
  "api/Netick.TransportDisconnectReason.html": {
    "href": "api/Netick.TransportDisconnectReason.html",
    "title": "Enum TransportDisconnectReason | Netick Networking Engine",
    "summary": "Enum TransportDisconnectReason Namespace Netick Assembly Netick.dll public enum TransportDisconnectReason Fields Kick = 1 Shutdown = 2 Timeout = 0"
  },
  "api/Netick.Unity.ChangedInfoExtension.html": {
    "href": "api/Netick.Unity.ChangedInfoExtension.html",
    "title": "Class ChangedInfoExtension | Netick Networking Engine",
    "summary": "Class ChangedInfoExtension Namespace Netick.Unity Assembly Netick.Unity.dll public static class ChangedInfoExtension Inheritance object ChangedInfoExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBehaviour<T>(OnChangedData) public static T GetBehaviour<T>(this OnChangedData change) where T : NetworkBehaviour Parameters change OnChangedData Returns T Type Parameters T"
  },
  "api/Netick.Unity.ComponentExtensions.html": {
    "href": "api/Netick.Unity.ComponentExtensions.html",
    "title": "Class ComponentExtensions | Netick Networking Engine",
    "summary": "Class ComponentExtensions Namespace Netick.Unity Assembly Netick.Unity.dll public static class ComponentExtensions Inheritance object ComponentExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods NetworkPlay(AudioSource, NetworkSandbox, ulong) public static void NetworkPlay(this AudioSource audioSource, NetworkSandbox sandbox, ulong delay = 0) Parameters audioSource AudioSource sandbox NetworkSandbox delay ulong NetworkPlayOneShot(AudioSource, NetworkSandbox, AudioClip, float) public static void NetworkPlayOneShot(this AudioSource audioSource, NetworkSandbox sandbox, AudioClip clip, float volumeScale = 1) Parameters audioSource AudioSource sandbox NetworkSandbox clip AudioClip volumeScale float NetworkPlayScheduled(AudioSource, NetworkSandbox, double) public static void NetworkPlayScheduled(this AudioSource audioSource, NetworkSandbox sandbox, double time) Parameters audioSource AudioSource sandbox NetworkSandbox time double SetEnabled(Component, NetworkSandbox, bool) public static void SetEnabled(this Component comp, NetworkSandbox sandbox, bool value) Parameters comp Component sandbox NetworkSandbox value bool"
  },
  "api/Netick.Unity.GeneratedBehaviourExample.html": {
    "href": "api/Netick.Unity.GeneratedBehaviourExample.html",
    "title": "Class GeneratedBehaviourExample | Netick Networking Engine",
    "summary": "Class GeneratedBehaviourExample Namespace Netick.Unity Assembly Netick.Unity.dll public class GeneratedBehaviourExample : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBehaviour NetworkBehaviour GeneratedBehaviourExample Implements INetickNetworkScript INetickScript Inherited Members NetworkBehaviour.S NetworkBehaviour.FetchInput<T>(out T) NetworkBehaviour.FindInterpolator(string) NetworkBehaviour.GameEngineIntoNetcode() NetworkBehaviour.NetcodeIntoGameEngine() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.InternalGetStateSizeWords() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetworkBehaviour.InputSource NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsOfType<T>(bool) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, bool) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors GeneratedBehaviourExample() public GeneratedBehaviourExample() Properties Double2Example public double Double2Example { get; set; } Property Value double DoubleExample public double DoubleExample { get; set; } Property Value double DoubleExample_ public double DoubleExample_ { get; set; } Property Value double FloatExample public float FloatExample { get; set; } Property Value float FloatExample_ public float FloatExample_ { get; set; } Property Value float IntExample public int IntExample { get; set; } Property Value int StringExample public string StringExample { get; set; } Property Value string StructExampleExample public StructExample StructExampleExample { get; set; } Property Value StructExample Methods NetworkAwake() public override void NetworkAwake() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.Unity.GridRenderer.html": {
    "href": "api/Netick.Unity.GridRenderer.html",
    "title": "Class GridRenderer | Netick Networking Engine",
    "summary": "Class GridRenderer Namespace Netick.Unity Assembly Netick.Unity.dll public class GridRenderer : NetworkEventsListener Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetworkEventsListener GridRenderer Inherited Members NetworkEventsListener.OnConnectRequest(NetworkSandbox, NetworkConnectionRequest) NetworkEventsListener.OnConnectFailed(NetworkSandbox, ConnectionFailedReason) NetworkEventsListener.OnInput(NetworkSandbox) NetworkEventsListener.OnStartup(NetworkSandbox) NetworkEventsListener.OnShutdown(NetworkSandbox) NetworkEventsListener.OnVisibilityChanged(NetworkSandbox) NetworkEventsListener.OnSceneOperationBegan(NetworkSandbox, NetworkSceneOperation) NetworkEventsListener.OnSceneOperationDone(NetworkSandbox, NetworkSceneOperation) NetworkEventsListener.OnSceneLoaded(NetworkSandbox) NetworkEventsListener.OnSceneLoadStarted(NetworkSandbox) NetworkEventsListener.OnConnectedToServer(NetworkSandbox, NetworkConnection) NetworkEventsListener.OnDisconnectedFromServer(NetworkSandbox, NetworkConnection, TransportDisconnectReason) NetworkEventsListener.OnClientConnected(NetworkSandbox, NetworkConnection) NetworkEventsListener.OnClientDisconnected(NetworkSandbox, NetworkConnection, TransportDisconnectReason) NetworkEventsListener.OnPlayerConnected(NetworkSandbox, NetworkPlayer) NetworkEventsListener.OnPlayerDisconnected(NetworkSandbox, NetworkPlayer, TransportDisconnectReason) NetworkEventsListener.OnObjectCreated(NetworkObject) NetworkEventsListener.OnObjectDestroyed(NetworkObject) NetworkEventsListener.OnMatchListUpdate(NetworkSandbox, List<Session>) NetworkEventsListener.OnMatchCreated(NetworkSandbox) NetworkEventsListener.OnDataReceived(NetworkSandbox, NetworkConnection, byte, byte*, int, TransportDeliveryMethod) NetworkEventsListener.UnlinkFromNetick() NetworkEventsListener.Sandbox MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors GridRenderer() public GridRenderer()"
  },
  "api/Netick.Unity.GridVisualiser.html": {
    "href": "api/Netick.Unity.GridVisualiser.html",
    "title": "Class GridVisualiser | Netick Networking Engine",
    "summary": "Class GridVisualiser Namespace Netick.Unity Assembly Netick.Unity.dll public class GridVisualiser : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour GridVisualiser Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsOfType<T>(bool) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, bool) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors GridVisualiser() public GridVisualiser() Fields Sandbox public NetworkSandbox Sandbox Field Value NetworkSandbox"
  },
  "api/Netick.Unity.IPhysicsComponent.html": {
    "href": "api/Netick.Unity.IPhysicsComponent.html",
    "title": "Interface IPhysicsComponent | Netick Networking Engine",
    "summary": "Interface IPhysicsComponent Namespace Netick.Unity Assembly Netick.Unity.dll public interface IPhysicsComponent"
  },
  "api/Netick.Unity.LaunchData.html": {
    "href": "api/Netick.Unity.LaunchData.html",
    "title": "Struct LaunchData | Netick Networking Engine",
    "summary": "Struct LaunchData Namespace Netick.Unity Assembly Netick.Unity.dll public struct LaunchData Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Config public NetickConfig Config Field Value NetickConfig Configs public NetickConfig[] Configs Field Value NetickConfig[] NumberOfClients public int NumberOfClients Field Value int NumberOfServers public int NumberOfServers Field Value int Port public int Port Field Value int Ports public int[] Ports Field Value int[] RunServersAsHosts public bool RunServersAsHosts Field Value bool SandboxPrefab public GameObject SandboxPrefab Field Value GameObject TransportProvider public NetworkTransportProvider TransportProvider Field Value NetworkTransportProvider"
  },
  "api/Netick.Unity.NetickBaseBehaviour.html": {
    "href": "api/Netick.Unity.NetickBaseBehaviour.html",
    "title": "Class NetickBaseBehaviour | Netick Networking Engine",
    "summary": "Class NetickBaseBehaviour Namespace Netick.Unity Assembly Netick.Unity.dll public abstract class NetickBaseBehaviour : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour Derived NetickBehaviour NetworkEventsListener Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetickBaseBehaviour() protected NetickBaseBehaviour()"
  },
  "api/Netick.Unity.NetickBehaviour.html": {
    "href": "api/Netick.Unity.NetickBehaviour.html",
    "title": "Class NetickBehaviour | Netick Networking Engine",
    "summary": "Class NetickBehaviour Namespace Netick.Unity Assembly Netick.Unity.dll public abstract class NetickBehaviour : NetickBaseBehaviour, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour Implements INetickScript Derived NetworkBehaviour Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetickBehaviour() protected NetickBehaviour() Properties Engine public NetickEngine Engine { get; } Property Value NetickEngine Entity public Entity Entity { get; } Property Value Entity Object The NetworkObject this behaviour is attached to. public NetworkObject Object { get; } Property Value NetworkObject Sandbox The NetworkSandbox containing this Object. public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox Methods NetworkDestroy() Called when this behaviour has been removed from the simulation. public virtual void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network step. Any changes to the networked state should happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public virtual void NetworkFixedUpdate() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. public virtual void NetworkRender() NetworkStart() Called when this behaviour has been added to the simulation. public virtual void NetworkStart() NetworkUpdate() Called every frame. Executed before NetworkFixedUpdate. public virtual void NetworkUpdate() OnBecameSimulated() public virtual void OnBecameSimulated() OnBecameUnsimulated() public virtual void OnBecameUnsimulated()"
  },
  "api/Netick.Unity.NetickCallbacks.html": {
    "href": "api/Netick.Unity.NetickCallbacks.html",
    "title": "Class NetickCallbacks | Netick Networking Engine",
    "summary": "Class NetickCallbacks Namespace Netick.Unity Assembly Netick.Unity.dll public class NetickCallbacks Inheritance object NetickCallbacks Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Reset() public void Reset() Events OnClientConnected public event OnClientConnectedDelegate OnClientConnected Event Type OnClientConnectedDelegate OnClientDisconnected public event OnClientDisconnectedDelegate OnClientDisconnected Event Type OnClientDisconnectedDelegate OnConnectFailed public event OnConnectFailedDelegate OnConnectFailed Event Type OnConnectFailedDelegate OnConnectRequest public event OnConnectRequestDelegate OnConnectRequest Event Type OnConnectRequestDelegate OnConnectedToServer public event OnConnectedToServerDelegate OnConnectedToServer Event Type OnConnectedToServerDelegate OnDataReceived public event OnDataReceivedDelegate OnDataReceived Event Type OnDataReceivedDelegate OnDisconnectedFromServer public event OnDisconnectedFromServerDelegate OnDisconnectedFromServer Event Type OnDisconnectedFromServerDelegate OnInputRead public event OnInputReadDelegate OnInputRead Event Type OnInputReadDelegate OnMatchCreated public event OnMatchCreatedDelegate OnMatchCreated Event Type OnMatchCreatedDelegate OnMatchListUpdate public event OnMatchListUpdateDelegate OnMatchListUpdate Event Type OnMatchListUpdateDelegate OnObjectCreated public event OnObjectCreatedDelegate OnObjectCreated Event Type OnObjectCreatedDelegate OnObjectDestroyed public event OnObjectCreatedDelegate OnObjectDestroyed Event Type OnObjectCreatedDelegate OnPlayerConnected public event OnPlayerConnectedDelegate OnPlayerConnected Event Type OnPlayerConnectedDelegate OnPlayerDisconnected public event OnPlayerDisconnectedDelegate OnPlayerDisconnected Event Type OnPlayerDisconnectedDelegate OnSceneLoadStarted [Obsolete(\"This event will be removed. Use OnSceneLoadDone instead.\")] public event OnSceneLoadStartedDelegate OnSceneLoadStarted Event Type OnSceneLoadStartedDelegate OnSceneLoaded [Obsolete(\"This event will be removed. Use OnSceneLoadBegan instead.\")] public event OnSceneLoadedDelegate OnSceneLoaded Event Type OnSceneLoadedDelegate OnSceneOperationBegan public event OnSceneOperationDelegate OnSceneOperationBegan Event Type OnSceneOperationDelegate OnSceneOperationDone public event OnSceneOperationDelegate OnSceneOperationDone Event Type OnSceneOperationDelegate OnShutdown public event OnShutdownDelegate OnShutdown Event Type OnShutdownDelegate OnStartup public event OnStartupDelegate OnStartup Event Type OnStartupDelegate OnVisibilityChanged public event OnVisibilityChangedDelegate OnVisibilityChanged Event Type OnVisibilityChangedDelegate"
  },
  "api/Netick.Unity.NetickConfig.html": {
    "href": "api/Netick.Unity.NetickConfig.html",
    "title": "Class NetickConfig | Netick Networking Engine",
    "summary": "Class NetickConfig Namespace Netick.Unity Assembly Netick.Unity.dll Config class for Netick. public class NetickConfig : ScriptableObject Inheritance object Object ScriptableObject NetickConfig Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NetickConfig() public NetickConfig() Fields Assemblies [SerializeField] public List<string> Assemblies Field Value List<string> CellSize [HideInInspector] public int CellSize Field Value int ClientDivisor [Range(1, 5)] [SerializeField] public int ClientDivisor Field Value int ClientSimulatedLossOut [Tooltip(\"Simulated client outward packet loss. Default: 0\")] [HideInInspector] public float ClientSimulatedLossOut Field Value float CustomGroupCount [HideInInspector] [Tooltip(\"Count of custom interest groups.\")] public int CustomGroupCount Field Value int EnableInterestManagement [HideInInspector] public bool EnableInterestManagement Field Value bool EnableLagCompensation [Tooltip(\"Enable this if you want to use the Lag Compensation module. Default: false\")] [HideInInspector] public bool EnableLagCompensation Field Value bool EnableLogging [Tooltip(\"Disable this before doing a production build because you don't want Netick to log to the console. Default: false\")] public bool EnableLogging Field Value bool InputReuseAtLowFPS [Tooltip(\"When the framerate is lower than the tickrate, there will be more ticks than frames. Therefore, two or more ticks must use the same input of one frame. Enabling this option will make this happen automatically. Default: false\")] [SerializeField] public bool InputReuseAtLowFPS Field Value bool InvokeRenderInHeadless [Tooltip(\"Don't enable this if you want Netick to not invoke Network Render (and thus not calculate interpolation) callbacks in headless builds. Default: false\")] public bool InvokeRenderInHeadless Field Value bool InvokeUpdate [Tooltip(\"Don't enable this if you want Netick to not invoke Network Update. This can help with performance if you intend to have thousands of network objects. Default: true\")] public bool InvokeUpdate Field Value bool LagCompensationDebug [HideInInspector] public bool LagCompensationDebug Field Value bool MaxAdditiveScenes [Tooltip(\"Max number of additive scenes you can have loaded at once. Default: 4\")] [SerializeField] public int MaxAdditiveScenes Field Value int MaxObjects [Tooltip(\"Max number of network objects that can exist at one time in the game. This must not be exceeded at runtime, or Netick will shutdown.\")] [SerializeField] public int MaxObjects Field Value int MaxPlayers [Tooltip(\"Max number of players that can connect at one time to the server. Lower is always more performant, even if not that many clients are connected, so don't use an arbitrarily large number.\")] [SerializeField] [Range(1, 16384)] public int MaxPlayers Field Value int MaxPredictedTicks [Tooltip(\"Max number of ticks the client is allowed to predict. Default: 64\")] [Range(16, 512)] public int MaxPredictedTicks Field Value int MaxSendableDataSize [Tooltip(\"Max data size [bytes] that can be sent to a peer in a single tick. Default: 50000 bytes\")] [SerializeField] public int MaxSendableDataSize Field Value int MetaAllocatorBlockSize [Tooltip(\"Default: 1048576 bytes\")] [SerializeField] [FormerlySerializedAs(\"AllocatorMetaBlockSize\")] public int MetaAllocatorBlockSize Field Value int PhysicsPrediction [Tooltip(\"Enable this if you want to be able to have client-side prediction over Rigidbody objects. \\n\\nIt's recommended to keep this disabled if you don't have any predictable rigidbody objects in your game, because it comes at a performance hit due to calling the physics system Simulate method several times per tick. Default: false\")] [SerializeField] [FormerlySerializedAs(\"PredictedClientPhysics\")] public bool PhysicsPrediction Field Value bool PhysicsType [Tooltip(\"Type of the physics scene. If you choose None, Netick will not step the simulation. If you want to use Box2D physics (Rigidbody 2D) select Physics 2D. Or if you want to use NVIDIA PhysX (Rigidbody), select 3D Physics.\")] public PhysicsType PhysicsType Field Value PhysicsType ReceiveBufferSize [SerializeField] public int ReceiveBufferSize Field Value int RenderInvokeOrder [Tooltip(\"Choose the place where Network Render will be invoked. Update means it will be invoked after all Netick NetworkUpdate callbacks, but before any of Unity LateUpdate callbacks. LateUpdate means it will be invoked after all Unity Update callbacks and all Netick NetworkUpdate callbacks. \")] public NetworkRenderInvokeOrder RenderInvokeOrder Field Value NetworkRenderInvokeOrder RenderWorldGrid [HideInInspector] public bool RenderWorldGrid Field Value bool SendBufferSize [SerializeField] public int SendBufferSize Field Value int ServerDivisor [Range(1, 5)] [SerializeField] public int ServerDivisor Field Value int ServerSimulatedLossOut [Tooltip(\"Simulated server outward packet loss. Default: 0\")] [HideInInspector] public float ServerSimulatedLossOut Field Value float SimulationCulling [Tooltip(\"Enable this if you want objects that no client is interested in to be culled from being simulated, meaning their Netick callbacks won't be invoked.\")] public bool SimulationCulling Field Value bool StateAllocatorBlockSize [Tooltip(\"Default: 131072 bytes\")] [SerializeField] [FormerlySerializedAs(\"AllocatorStateBlockSize\")] public int StateAllocatorBlockSize Field Value int TickRate [HideInInspector] [Range(2, 240)] [Tooltip(\"Network simulation rate [ticks per second]. Overrides <b>Time.fixedDeltaTime</b> when starting Netick. Must not be changed at runtime. Default: 33\")] public float TickRate Field Value float Timeout [SerializeField] public int Timeout Field Value int UseSceneSwitchThread [HideInInspector] public bool UseSceneSwitchThread Field Value bool WorldSize [HideInInspector] public Vector3 WorldSize Field Value Vector3 Properties GetMaxPlayers public int GetMaxPlayers { get; } Property Value int"
  },
  "api/Netick.Unity.NetickCoreComponent.html": {
    "href": "api/Netick.Unity.NetickCoreComponent.html",
    "title": "Class NetickCoreComponent | Netick Networking Engine",
    "summary": "Class NetickCoreComponent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetickCoreComponent : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour NetworkBehaviour NetickCoreComponent Implements INetickNetworkScript INetickScript Derived NetworkSceneManager PhysicsSimulationStep Inherited Members NetworkBehaviour.S NetworkBehaviour.GetRef<T>() NetworkBehaviour.CopyStateTo(byte*) NetworkBehaviour.SetStateFrom(byte*) NetworkBehaviour.FetchInput<T>(out T, int) NetworkBehaviour.FetchInput<T>(out T, out bool, int) NetworkBehaviour.FindInterpolator(string) NetworkBehaviour.GameEngineIntoNetcode() NetworkBehaviour.NetcodeIntoGameEngine() NetworkBehaviour.OnBecameInterested() NetworkBehaviour.OnBecameUninterested() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkAwake() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.InternalGetStateSizeWords() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetworkBehaviour.InputSource NetworkBehaviour.InputSourcePlayerId NetworkBehaviour.StateSize NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetickCoreComponent() public NetickCoreComponent()"
  },
  "api/Netick.Unity.NetickUnityExt.html": {
    "href": "api/Netick.Unity.NetickUnityExt.html",
    "title": "Class NetickUnityExt | Netick Networking Engine",
    "summary": "Class NetickUnityExt Namespace Netick.Unity Assembly Netick.Unity.dll public static class NetickUnityExt Inheritance object NetickUnityExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromNumerics(Quaternion) public static Quaternion FromNumerics(this Quaternion vec) Parameters vec Quaternion Returns Quaternion FromNumerics(Vector3) public static Vector3 FromNumerics(this Vector3 vec) Parameters vec Vector3 Returns Vector3 ToNumerics(Quaternion) public static Quaternion ToNumerics(this Quaternion vec) Parameters vec Quaternion Returns Quaternion ToNumerics(Vector3) public static Vector3 ToNumerics(this Vector3 vec) Parameters vec Vector3 Returns Vector3 ToUnityBounds(NetickBounds) public static Bounds ToUnityBounds(this NetickBounds bounds) Parameters bounds NetickBounds Returns Bounds"
  },
  "api/Netick.Unity.NetickUnityUtils.html": {
    "href": "api/Netick.Unity.NetickUnityUtils.html",
    "title": "Class NetickUnityUtils | Netick Networking Engine",
    "summary": "Class NetickUnityUtils Namespace Netick.Unity Assembly Netick.Unity.dll public class NetickUnityUtils Inheritance object NetickUnityUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetickUnityUtils() public NetickUnityUtils() Methods GetColor(int*, float) public static Color GetColor(int* data, float precision) Parameters data int* precision float Returns Color GetDouble(int*) public static float GetDouble(int* data) Parameters data int* Returns float GetFloat(int*, float) public static float GetFloat(int* data, float precision) Parameters data int* precision float Returns float GetQuaternion(int*, float) public static Quaternion GetQuaternion(int* data, float precision) Parameters data int* precision float Returns Quaternion GetQuaternionCompressed(int*) public static Quaternion GetQuaternionCompressed(int* data) Parameters data int* Returns Quaternion GetSmoothBool(NetickEngine, int*, ref Interpolator, InterpolationSource) public static bool GetSmoothBool(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns bool GetSmoothColor(NetickEngine, int*, ref Interpolator, InterpolationSource) public static Color GetSmoothColor(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns Color GetSmoothDouble(NetickEngine, int*, ref Interpolator, InterpolationSource) public static double GetSmoothDouble(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns double GetSmoothFloat(NetickEngine, int*, ref Interpolator, InterpolationSource) public static float GetSmoothFloat(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns float GetSmoothInt(NetickEngine, int*, ref Interpolator, InterpolationSource) public static int GetSmoothInt(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns int GetSmoothNetworkBool(NetickEngine, int*, ref Interpolator, InterpolationSource) public static NetworkBool GetSmoothNetworkBool(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns NetworkBool GetSmoothQuaternion(NetickEngine, int*, ref Interpolator, InterpolationSource) public static Quaternion GetSmoothQuaternion(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns Quaternion GetSmoothVector2(NetickEngine, int*, ref Interpolator, InterpolationSource) public static Vector2 GetSmoothVector2(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns Vector2 GetSmoothVector3(NetickEngine, int*, ref Interpolator, InterpolationSource) public static Vector3 GetSmoothVector3(NetickEngine engine, int* data, ref Interpolator interpolator, InterpolationSource interpolationSource) Parameters engine NetickEngine data int* interpolator Interpolator interpolationSource InterpolationSource Returns Vector3 GetVector2(int*, float) public static Vector2 GetVector2(int* data, float precision) Parameters data int* precision float Returns Vector2 GetVector3(int*, float) public static Vector3 GetVector3(int* data, float precision) Parameters data int* precision float Returns Vector3 QuatMemberPack(float) public static uint QuatMemberPack(float value) Parameters value float Returns uint QuatMemberUnpack(uint) public static float QuatMemberUnpack(uint data) Parameters data uint Returns float SetColor(int*, Color, float) public static void SetColor(int* data, Color value, float precisionInverse) Parameters data int* value Color precisionInverse float SetFloat(int*, float, float) public static void SetFloat(int* data, float value, float precisionInverse) Parameters data int* value float precisionInverse float SetQuaternion(int*, Quaternion, float) public static void SetQuaternion(int* data, Quaternion value, float precisionInverse) Parameters data int* value Quaternion precisionInverse float SetQuaternionCompressed(int*, Quaternion) public static void SetQuaternionCompressed(int* data, Quaternion value) Parameters data int* value Quaternion SetVector2(int*, Vector2, float) public static void SetVector2(int* data, Vector2 value, float precisionInverse) Parameters data int* value Vector2 precisionInverse float SetVector3(int*, Vector3, float) public static void SetVector3(int* data, Vector3 value, float precisionInverse) Parameters data int* value Vector3 precisionInverse float"
  },
  "api/Netick.Unity.Network.LaunchResults.html": {
    "href": "api/Netick.Unity.Network.LaunchResults.html",
    "title": "Struct Network.LaunchResults | Netick Networking Engine",
    "summary": "Struct Network.LaunchResults Namespace Netick.Unity Assembly Netick.Unity.dll public struct Network.LaunchResults Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Clients public NetworkSandbox[] Clients Field Value NetworkSandbox[] Servers public NetworkSandbox[] Servers Field Value NetworkSandbox[]"
  },
  "api/Netick.Unity.Network.Sandboxs.html": {
    "href": "api/Netick.Unity.Network.Sandboxs.html",
    "title": "Struct Network.Sandboxs | Netick Networking Engine",
    "summary": "Struct Network.Sandboxs Namespace Netick.Unity Assembly Netick.Unity.dll public struct Network.Sandboxs Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Clients public NetworkSandbox[] Clients Field Value NetworkSandbox[] Server public NetworkSandbox Server Field Value NetworkSandbox"
  },
  "api/Netick.Unity.Network.html": {
    "href": "api/Netick.Unity.Network.html",
    "title": "Class Network | Netick Networking Engine",
    "summary": "Class Network Namespace Netick.Unity Assembly Netick.Unity.dll Manages Netick and its sandboxes, and is used to start and shut down Netick. [HideInInspector] [DisallowMultipleComponent] public sealed class Network : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour Network Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Fields Version public const string Version = \"0.12.22\" Field Value string Properties Config public static NetickConfig Config { get; } Property Value NetickConfig Instance public static Network Instance { get; } Property Value Network IsHeadless public static bool IsHeadless { get; } Property Value bool IsRunning public static bool IsRunning { get; } Property Value bool Sandboxes public static IReadOnlyList<NetworkSandbox> Sandboxes { get; } Property Value IReadOnlyList<NetworkSandbox> StartMode public static StartMode StartMode { get; } Property Value StartMode Methods Focus(NetworkSandbox) Focus on a specific sandbox. public static void Focus(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox The sandbox to focus on. Init(NetickConfig) Initializes Netick. This is automatically called when you start Netick. If you don't provide a NetickConfig, Netick will use the default config, which can be modified/found in (Netick -> Settings). public static void Init(NetickConfig config = null) Parameters config NetickConfig Launch(StartMode, LaunchData) public static Network.LaunchResults Launch(StartMode mode, LaunchData launchData) Parameters mode StartMode launchData LaunchData Returns Network.LaunchResults Shutdown(bool) Shuts down Netick and destroys all sandboxes. The shutdown will occur in the next frame. For immediate shutdown, use: ShutdownImmediately(bool) public static void Shutdown(bool destroyAllNetworkObjects = false) Parameters destroyAllNetworkObjects bool ShutdownImmediately(bool) Shuts down Netick and destroys all sandboxes immediately. public static void ShutdownImmediately(bool destroyAllNetworkObjects = false) Parameters destroyAllNetworkObjects bool ShutdownSandbox(NetworkSandbox, bool) Shuts down a specific sandbox. public static void ShutdownSandbox(NetworkSandbox sandbox, bool destroyAllNetworkObjects = false) Parameters sandbox NetworkSandbox The sandbox to shut down. destroyAllNetworkObjects bool StartAsClient(NetworkTransportProvider, int, GameObject) Starts Netick as a client. public static NetworkSandbox StartAsClient(NetworkTransportProvider transportProvider, int port, GameObject sandboxPrefab = null) Parameters transportProvider NetworkTransportProvider port int sandboxPrefab GameObject Returns NetworkSandbox The sandbox representing the client StartAsHost(NetworkTransportProvider, int, GameObject) Starts Netick as a host. public static NetworkSandbox StartAsHost(NetworkTransportProvider transportProvider, int port, GameObject sandboxPrefab = null) Parameters transportProvider NetworkTransportProvider port int Network port. sandboxPrefab GameObject Returns NetworkSandbox The sandbox representing the server StartAsMultiplePeers(NetworkTransportProvider, int, GameObject, bool, bool, int) Starts multiple peers together. public static Network.LaunchResults StartAsMultiplePeers(NetworkTransportProvider transportProvider, int port, GameObject sandboxPrefab = null, bool startAServer = true, bool startServerAsHost = true, int numOfClients = 1) Parameters transportProvider NetworkTransportProvider port int sandboxPrefab GameObject startAServer bool Should we start a server too. startServerAsHost bool numOfClients int Number of clients to create. Returns Network.LaunchResults StartAsServer(NetworkTransportProvider, int, GameObject) Starts Netick as a server. public static NetworkSandbox StartAsServer(NetworkTransportProvider transportProvider, int port, GameObject sandboxPrefab = null) Parameters transportProvider NetworkTransportProvider port int Network port. sandboxPrefab GameObject Returns NetworkSandbox The sandbox representing the server StartAsServerAndClient(NetworkTransportProvider, int, GameObject, int) Starts both a client (or clients) and a server. [Obsolete(\"This is obsolete. Use StartAsMultiplePeers instead.\")] public static Network.LaunchResults StartAsServerAndClient(NetworkTransportProvider transportProvider, int serverPort, GameObject sandboxPrefab = null, int numOfClients = 1) Parameters transportProvider NetworkTransportProvider serverPort int Network port. sandboxPrefab GameObject numOfClients int Number of client sandboxes to create. Returns Network.LaunchResults StartAsSinglePlayer(GameObject) Starts Netick in single player mode. public static NetworkSandbox StartAsSinglePlayer(GameObject sandboxPrefab = null) Parameters sandboxPrefab GameObject Returns NetworkSandbox The sandbox representing the server"
  },
  "api/Netick.Unity.NetworkAnimator.NetworkAnimatorRepConditions.html": {
    "href": "api/Netick.Unity.NetworkAnimator.NetworkAnimatorRepConditions.html",
    "title": "Enum NetworkAnimator.NetworkAnimatorRepConditions | Netick Networking Engine",
    "summary": "Enum NetworkAnimator.NetworkAnimatorRepConditions Namespace Netick.Unity Assembly Netick.Unity.dll [Flags] public enum NetworkAnimator.NetworkAnimatorRepConditions Fields SyncLayerWeights = 2 SyncParameters = 1 SyncState = 4"
  },
  "api/Netick.Unity.NetworkAnimator.html": {
    "href": "api/Netick.Unity.NetworkAnimator.html",
    "title": "Class NetworkAnimator | Netick Networking Engine",
    "summary": "Class NetworkAnimator Namespace Netick.Unity Assembly Netick.Unity.dll This component is used to replicate Unity's Animator parameters and states. [AddComponentMenu(\"Netick/Network Animator\")] [RequireComponent(typeof(Animator))] [DisallowMultipleComponent] [IgnoreCodeGen] public class NetworkAnimator : NetworkBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour NetworkBehaviour NetworkAnimator Implements INetickNetworkScript INetickScript Inherited Members NetworkBehaviour.S NetworkBehaviour.GetRef<T>() NetworkBehaviour.CopyStateTo(byte*) NetworkBehaviour.SetStateFrom(byte*) NetworkBehaviour.FetchInput<T>(out T, int) NetworkBehaviour.FetchInput<T>(out T, out bool, int) NetworkBehaviour.FindInterpolator(string) NetworkBehaviour.OnBecameInterested() NetworkBehaviour.OnBecameUninterested() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetworkBehaviour.InputSource NetworkBehaviour.InputSourcePlayerId NetworkBehaviour.StateSize NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkAnimator() public NetworkAnimator() Properties Animator public Animator Animator { get; } Property Value Animator InterpolationSource public InterpolationSource InterpolationSource { get; set; } Property Value InterpolationSource Methods GameEngineIntoNetcode() public override void GameEngineIntoNetcode() InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int NetcodeIntoGameEngine() public override void NetcodeIntoGameEngine() NetworkAwake() public override void NetworkAwake() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. public override void NetworkRender() NetworkReset() public override void NetworkReset()"
  },
  "api/Netick.Unity.NetworkArray-1.html": {
    "href": "api/Netick.Unity.NetworkArray-1.html",
    "title": "Class NetworkArray<T> | Netick Networking Engine",
    "summary": "Class NetworkArray<T> Namespace Netick.Unity Assembly Netick.Unity.dll A networked array. [HideInInspector] public class NetworkArray<T> : NetworkArray, INetworkCollection, IEnumerable<T>, IEnumerable where T : unmanaged Type Parameters T Inheritance object NetworkArray NetworkArray<T> Implements INetworkCollection IEnumerable<T> IEnumerable Inherited Members NetworkArray.Length object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkArray(int) public NetworkArray(int capacity) Parameters capacity int Properties this[int] public T this[int i] { get; set; } Parameters i int Property Value T Methods Add(T) public void Add(T element) Parameters element T GetEnumerator() public IEnumerator<T> GetEnumerator() Returns IEnumerator<T> InternalInit(INetickNetworkScript, int*, int, int) public override void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public override void InternalReset()"
  },
  "api/Netick.Unity.NetworkArray.html": {
    "href": "api/Netick.Unity.NetworkArray.html",
    "title": "Class NetworkArray | Netick Networking Engine",
    "summary": "Class NetworkArray Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkArray : INetworkCollection Inheritance object NetworkArray Implements INetworkCollection Derived NetworkArray<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkArray() public NetworkArray() Properties Length public int Length { get; } Property Value int Methods InternalInit(INetickNetworkScript, int*, int, int) public virtual void InternalInit(INetickNetworkScript beh, int* state, int elementSizeWords, int flags) Parameters beh INetickNetworkScript state int* elementSizeWords int flags int InternalReset() public virtual void InternalReset()"
  },
  "api/Netick.Unity.NetworkBehaviour.html": {
    "href": "api/Netick.Unity.NetworkBehaviour.html",
    "title": "Class NetworkBehaviour | Netick Networking Engine",
    "summary": "Class NetworkBehaviour Namespace Netick.Unity Assembly Netick.Unity.dll public abstract class NetworkBehaviour : NetickBehaviour, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour NetworkBehaviour Implements INetickNetworkScript INetickScript Derived NetickCoreComponent NetworkAnimator NetworkTransform Inherited Members NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkBehaviour() protected NetworkBehaviour() Fields S public int* S Field Value int* Properties BehaviourId The network id of this NetworkBehaviour. public int BehaviourId { get; } Property Value int Id The network id of this object. public int Id { get; } Property Value int InputSource Returns the source NetworkPlayer (NetworkPeer/ServerConnection) of inputs for this NetworkObject. If the source of inputs is remote (from a client) it returns that ServerConnection, while on the input source itself it returns the local NetworkPlayer. public NetworkPlayer InputSource { get; set; } Property Value NetworkPlayer InputSourcePlayerId public int InputSourcePlayerId { get; } Property Value int IsClient Returns true if this NetickEngine is a client. public bool IsClient { get; } Property Value bool IsInputSource Returns true if this LocalPlayer is providing inputs to this Object. public bool IsInputSource { get; } Property Value bool IsOwner Returns true if this NetickEngine is the owner of this Object. In this version of Netick: Server=Owner. public bool IsOwner { get; } Property Value bool IsPredicted On the client, it returns true only if the client is predicting this object. On the server, it always returns true. public bool IsPredicted { get; } Property Value bool IsProxy Returns true if we neither provide inputs nor own this object. public bool IsProxy { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsServer Returns true if this NetickEngine is the server. public bool IsServer { get; } Property Value bool StateSize Returns the networked state size of this behavior in bytes. public int StateSize { get; } Property Value int Methods CopyStateTo(byte*) public void CopyStateTo(byte* target) Parameters target byte* FetchInput<T>(out T, out bool, int) Fetches a network input for this tick. Returns false if no input source is currently providing inputs to this Object, or when input loss occurs (in case of a remote input source). public bool FetchInput<T>(out T input, out bool isDuplicated, int index = 0) where T : unmanaged Parameters input T isDuplicated bool index int Returns bool Type Parameters T FetchInput<T>(out T, int) Fetches a network input for this tick. Returns false if no input source is currently providing inputs to this Object, or when input loss occurs (in case of a remote input source). public bool FetchInput<T>(out T input, int index = 0) where T : unmanaged Parameters input T index int Returns bool Type Parameters T FindInterpolator(string) public Interpolator FindInterpolator(string propertyName) Parameters propertyName string Returns Interpolator GameEngineIntoNetcode() public virtual void GameEngineIntoNetcode() GetRef<T>() public NetworkBehaviourRef<T> GetRef<T>() where T : NetworkBehaviour Returns NetworkBehaviourRef<T> Type Parameters T InternalGetStateSizeWords() public virtual int InternalGetStateSizeWords() Returns int InternalInit() public virtual void InternalInit() InternalReset() public virtual void InternalReset() NetcodeIntoGameEngine() public virtual void NetcodeIntoGameEngine() NetworkAwake() public virtual void NetworkAwake() NetworkReset() public virtual void NetworkReset() OnBecameInterested() public virtual void OnBecameInterested() OnBecameUninterested() public virtual void OnBecameUninterested() OnInputSourceChanged(NetworkPlayer) public virtual void OnInputSourceChanged(NetworkPlayer previous) Parameters previous NetworkPlayer OnInputSourceLeft() Called on the server when the input source of this Object has disconnected. public virtual void OnInputSourceLeft() OnSpawnPredictionSucceeded() Called on the client when the server confirms that this object has been successfully spawn-predicted and therefore has a valid SceneLoadId. public virtual void OnSpawnPredictionSucceeded() SetStateFrom(byte*) Sets the state of this behavior. Ignores [OnChanged] callbacks when setting the data. public void SetStateFrom(byte* source) Parameters source byte*"
  },
  "api/Netick.Unity.NetworkBehaviourRef-1.html": {
    "href": "api/Netick.Unity.NetworkBehaviourRef-1.html",
    "title": "Struct NetworkBehaviourRef<T> | Netick Networking Engine",
    "summary": "Struct NetworkBehaviourRef<T> Namespace Netick.Unity Assembly Netick.Unity.dll public struct NetworkBehaviourRef<T> : IEquatable<NetworkBehaviourRef<T>> where T : NetworkBehaviour Type Parameters T Implements IEquatable<NetworkBehaviourRef<T>> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkBehaviourRef(NetworkBehaviour) public NetworkBehaviourRef(NetworkBehaviour beh) Parameters beh NetworkBehaviour Fields BehaviourId public readonly int BehaviourId Field Value int ObjectId public readonly int ObjectId Field Value int Methods Equals(NetworkBehaviourRef<T>) public bool Equals(NetworkBehaviourRef<T> other) Parameters other NetworkBehaviourRef<T> Returns bool Equals(object) public override bool Equals(object other) Parameters other object Returns bool GetBehaviour<T>(NetworkSandbox) public T GetBehaviour<T>(NetworkSandbox sandbox) where T : NetworkBehaviour Parameters sandbox NetworkSandbox Returns T Type Parameters T GetHashCode() public override int GetHashCode() Returns int TryGetBehaviour(NetworkSandbox, out T) public bool TryGetBehaviour(NetworkSandbox sandbox, out T behaviour) Parameters sandbox NetworkSandbox behaviour T Returns bool"
  },
  "api/Netick.Unity.NetworkEvents.OnClientConnectedEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnClientConnectedEvent.html",
    "title": "Class NetworkEvents.OnClientConnectedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnClientConnectedEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnClientConnectedEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnClientConnectedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientConnectedEvent() public OnClientConnectedEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnClientDisconnectedEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnClientDisconnectedEvent.html",
    "title": "Class NetworkEvents.OnClientDisconnectedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnClientDisconnectedEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnClientDisconnectedEvent : UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason> NetworkEvents.OnClientDisconnectedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.AddListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientDisconnectedEvent() public OnClientDisconnectedEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnClientSceneLoadeddEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnClientSceneLoadeddEvent.html",
    "title": "Class NetworkEvents.OnClientSceneLoadeddEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnClientSceneLoadeddEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnClientSceneLoadeddEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnClientSceneLoadeddEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnClientSceneLoadeddEvent() public OnClientSceneLoadeddEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnConnectFailedEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnConnectFailedEvent.html",
    "title": "Class NetworkEvents.OnConnectFailedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnConnectFailedEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnConnectFailedEvent : UnityEvent<NetworkSandbox, ConnectionFailedReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, ConnectionFailedReason> NetworkEvents.OnConnectFailedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, ConnectionFailedReason>.AddListener(UnityAction<NetworkSandbox, ConnectionFailedReason>) UnityEvent<NetworkSandbox, ConnectionFailedReason>.RemoveListener(UnityAction<NetworkSandbox, ConnectionFailedReason>) UnityEvent<NetworkSandbox, ConnectionFailedReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, ConnectionFailedReason>.Invoke(NetworkSandbox, ConnectionFailedReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectFailedEvent() public OnConnectFailedEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnConnectRequestEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnConnectRequestEvent.html",
    "title": "Class NetworkEvents.OnConnectRequestEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnConnectRequestEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnConnectRequestEvent : UnityEvent<NetworkSandbox, NetworkConnectionRequest>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnectionRequest> NetworkEvents.OnConnectRequestEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnectionRequest>.AddListener(UnityAction<NetworkSandbox, NetworkConnectionRequest>) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnectionRequest>) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnectionRequest>.Invoke(NetworkSandbox, NetworkConnectionRequest) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectRequestEvent() public OnConnectRequestEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnConnectedToServerEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnConnectedToServerEvent.html",
    "title": "Class NetworkEvents.OnConnectedToServerEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnConnectedToServerEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnConnectedToServerEvent : UnityEvent<NetworkSandbox, NetworkConnection>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection> NetworkEvents.OnConnectedToServerEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection>.AddListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection>) UnityEvent<NetworkSandbox, NetworkConnection>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection>.Invoke(NetworkSandbox, NetworkConnection) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnConnectedToServerEvent() public OnConnectedToServerEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnDisconnectedFromServerEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnDisconnectedFromServerEvent.html",
    "title": "Class NetworkEvents.OnDisconnectedFromServerEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnDisconnectedFromServerEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnDisconnectedFromServerEvent : UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason> NetworkEvents.OnDisconnectedFromServerEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.AddListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.RemoveListener(UnityAction<NetworkSandbox, NetworkConnection, TransportDisconnectReason>) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, NetworkConnection, TransportDisconnectReason>.Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnDisconnectedFromServerEvent() public OnDisconnectedFromServerEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnInputEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnInputEvent.html",
    "title": "Class NetworkEvents.OnInputEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnInputEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnInputEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnInputEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnInputEvent() public OnInputEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnMatchCreatedEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnMatchCreatedEvent.html",
    "title": "Class NetworkEvents.OnMatchCreatedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnMatchCreatedEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnMatchCreatedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnMatchCreatedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnMatchCreatedEvent() public OnMatchCreatedEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnMatchListUpdateEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnMatchListUpdateEvent.html",
    "title": "Class NetworkEvents.OnMatchListUpdateEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnMatchListUpdateEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnMatchListUpdateEvent : UnityEvent<NetworkSandbox, List<Session>>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox, List<Session>> NetworkEvents.OnMatchListUpdateEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox, List<Session>>.AddListener(UnityAction<NetworkSandbox, List<Session>>) UnityEvent<NetworkSandbox, List<Session>>.RemoveListener(UnityAction<NetworkSandbox, List<Session>>) UnityEvent<NetworkSandbox, List<Session>>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox, List<Session>>.Invoke(NetworkSandbox, List<Session>) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.FindMethod_Impl(string, Type) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnMatchListUpdateEvent() public OnMatchListUpdateEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnObjectCreatedEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnObjectCreatedEvent.html",
    "title": "Class NetworkEvents.OnObjectCreatedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnObjectCreatedEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnObjectCreatedEvent : UnityEvent<NetworkObject>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkObject> NetworkEvents.OnObjectCreatedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkObject>.AddListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.RemoveListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.FindMethod_Impl(string, Type) UnityEvent<NetworkObject>.Invoke(NetworkObject) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnObjectCreatedEvent() public OnObjectCreatedEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnObjectDestroyedEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnObjectDestroyedEvent.html",
    "title": "Class NetworkEvents.OnObjectDestroyedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnObjectDestroyedEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnObjectDestroyedEvent : UnityEvent<NetworkObject>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkObject> NetworkEvents.OnObjectDestroyedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkObject>.AddListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.RemoveListener(UnityAction<NetworkObject>) UnityEvent<NetworkObject>.FindMethod_Impl(string, Type) UnityEvent<NetworkObject>.Invoke(NetworkObject) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnObjectDestroyedEvent() public OnObjectDestroyedEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnSceneLoadStartedEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnSceneLoadStartedEvent.html",
    "title": "Class NetworkEvents.OnSceneLoadStartedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnSceneLoadStartedEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnSceneLoadStartedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnSceneLoadStartedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnSceneLoadStartedEvent() public OnSceneLoadStartedEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnSceneLoadedEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnSceneLoadedEvent.html",
    "title": "Class NetworkEvents.OnSceneLoadedEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnSceneLoadedEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnSceneLoadedEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnSceneLoadedEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnSceneLoadedEvent() public OnSceneLoadedEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnShutdownEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnShutdownEvent.html",
    "title": "Class NetworkEvents.OnShutdownEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnShutdownEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnShutdownEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnShutdownEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnShutdownEvent() public OnShutdownEvent()"
  },
  "api/Netick.Unity.NetworkEvents.OnStartupEvent.html": {
    "href": "api/Netick.Unity.NetworkEvents.OnStartupEvent.html",
    "title": "Class NetworkEvents.OnStartupEvent | Netick Networking Engine",
    "summary": "Class NetworkEvents.OnStartupEvent Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkEvents.OnStartupEvent : UnityEvent<NetworkSandbox>, ISerializationCallbackReceiver Inheritance object UnityEventBase UnityEvent<NetworkSandbox> NetworkEvents.OnStartupEvent Implements ISerializationCallbackReceiver Inherited Members UnityEvent<NetworkSandbox>.AddListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.RemoveListener(UnityAction<NetworkSandbox>) UnityEvent<NetworkSandbox>.FindMethod_Impl(string, Type) UnityEvent<NetworkSandbox>.Invoke(NetworkSandbox) UnityEventBase.FindMethod_Impl(string, object) UnityEventBase.GetPersistentEventCount() UnityEventBase.GetPersistentTarget(int) UnityEventBase.GetPersistentMethodName(int) UnityEventBase.SetPersistentListenerState(int, UnityEventCallState) UnityEventBase.GetPersistentListenerState(int) UnityEventBase.AddListener(object, MethodInfo) UnityEventBase.RemoveListener(object, MethodInfo) UnityEventBase.RemoveAllListeners() UnityEventBase.Invoke(object[]) UnityEventBase.ToString() UnityEventBase.GetValidMethodInfo(object, string, Type[]) UnityEventBase.GetValidMethodInfo(Type, string, Type[]) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode) UnityEventBase.ValidateRegistration(MethodInfo, object, PersistentListenerMode, Type) UnityEventBase.RegisterPersistentListener(int, object, MethodInfo) UnityEventBase.RegisterPersistentListener(int, object, Type, MethodInfo) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors OnStartupEvent() public OnStartupEvent()"
  },
  "api/Netick.Unity.NetworkEvents.html": {
    "href": "api/Netick.Unity.NetworkEvents.html",
    "title": "Class NetworkEvents | Netick Networking Engine",
    "summary": "Class NetworkEvents Namespace Netick.Unity Assembly Netick.Unity.dll [AddComponentMenu(\"Netick/Network Events\")] [Obsolete(\"This component will be removed in the future.\")] public class NetworkEvents : NetworkEventsListener Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetworkEventsListener NetworkEvents Inherited Members NetworkEventsListener.OnVisibilityChanged(NetworkSandbox) NetworkEventsListener.OnSceneOperationBegan(NetworkSandbox, NetworkSceneOperation) NetworkEventsListener.OnSceneOperationDone(NetworkSandbox, NetworkSceneOperation) NetworkEventsListener.OnPlayerConnected(NetworkSandbox, NetworkPlayer) NetworkEventsListener.OnPlayerDisconnected(NetworkSandbox, NetworkPlayer, TransportDisconnectReason) NetworkEventsListener.OnDataReceived(NetworkSandbox, NetworkConnection, byte, byte*, int, TransportDeliveryMethod) NetworkEventsListener.UnlinkFromNetick() NetworkEventsListener.Sandbox MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkEvents() public NetworkEvents() Fields onClientConnected public NetworkEvents.OnClientConnectedEvent onClientConnected Field Value NetworkEvents.OnClientConnectedEvent onClientDisconnected public NetworkEvents.OnClientDisconnectedEvent onClientDisconnected Field Value NetworkEvents.OnClientDisconnectedEvent onConnectFailedEvent public NetworkEvents.OnConnectFailedEvent onConnectFailedEvent Field Value NetworkEvents.OnConnectFailedEvent onConnectRequest public NetworkEvents.OnConnectRequestEvent onConnectRequest Field Value NetworkEvents.OnConnectRequestEvent onConnectedToServer public NetworkEvents.OnConnectedToServerEvent onConnectedToServer Field Value NetworkEvents.OnConnectedToServerEvent onDisconnectedFromServer public NetworkEvents.OnDisconnectedFromServerEvent onDisconnectedFromServer Field Value NetworkEvents.OnDisconnectedFromServerEvent onInput public NetworkEvents.OnInputEvent onInput Field Value NetworkEvents.OnInputEvent onMatchCreated public NetworkEvents.OnMatchCreatedEvent onMatchCreated Field Value NetworkEvents.OnMatchCreatedEvent onMatchList public NetworkEvents.OnMatchListUpdateEvent onMatchList Field Value NetworkEvents.OnMatchListUpdateEvent onObjectCreated public NetworkEvents.OnObjectCreatedEvent onObjectCreated Field Value NetworkEvents.OnObjectCreatedEvent onObjectDestroyed public NetworkEvents.OnObjectDestroyedEvent onObjectDestroyed Field Value NetworkEvents.OnObjectDestroyedEvent onSceneLoadStarted public NetworkEvents.OnSceneLoadStartedEvent onSceneLoadStarted Field Value NetworkEvents.OnSceneLoadStartedEvent onSceneLoaded public NetworkEvents.OnSceneLoadedEvent onSceneLoaded Field Value NetworkEvents.OnSceneLoadedEvent onShutdown public NetworkEvents.OnShutdownEvent onShutdown Field Value NetworkEvents.OnShutdownEvent onStartup public NetworkEvents.OnStartupEvent onStartup Field Value NetworkEvents.OnStartupEvent Methods OnClientConnected(NetworkSandbox, NetworkConnection) Called on the server when a specific client has connected. public override void OnClientConnected(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnClientDisconnected(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the server when a specific client has disconnected. public override void OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason OnConnectFailed(NetworkSandbox, ConnectionFailedReason) Called on the client when the connection to the server was refused, or simply failed. public override void OnConnectFailed(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason OnConnectRequest(NetworkSandbox, NetworkConnectionRequest) Called on the server when a client tries to connect. Use request to decide whether or not to allow this client to connect. public override void OnConnectRequest(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest OnConnectedToServer(NetworkSandbox, NetworkConnection) Called on the client when connection to the server has been initiated. public override void OnConnectedToServer(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection OnDisconnectedFromServer(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the client when connection to the server ended, or when a network error caused the disconnection. public override void OnDisconnectedFromServer(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason OnInput(NetworkSandbox) Called to read inputs. public override void OnInput(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchCreated(NetworkSandbox) public override void OnMatchCreated(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchListUpdate(NetworkSandbox, List<Session>) public override void OnMatchListUpdate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> OnObjectCreated(NetworkObject) Called when a network object has been created/initialized. public override void OnObjectCreated(NetworkObject obj) Parameters obj NetworkObject OnObjectDestroyed(NetworkObject) Called when a network object has been destroyed/recycled. public override void OnObjectDestroyed(NetworkObject obj) Parameters obj NetworkObject OnSceneLoadStarted(NetworkSandbox) Called on both the client and the server before beginning to load the new scene. public override void OnSceneLoadStarted(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnSceneLoaded(NetworkSandbox) Called on both the client and the server when the scene has been loaded. public override void OnSceneLoaded(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnShutdown(NetworkSandbox) Called when Netick has been shut down. public override void OnShutdown(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnStartup(NetworkSandbox) Called when Netick has been started. public override void OnStartup(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.Unity.NetworkEventsListener.html": {
    "href": "api/Netick.Unity.NetworkEventsListener.html",
    "title": "Class NetworkEventsListener | Netick Networking Engine",
    "summary": "Class NetworkEventsListener Namespace Netick.Unity Assembly Netick.Unity.dll public abstract class NetworkEventsListener : NetickBaseBehaviour Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetworkEventsListener Derived GridRenderer NetworkEvents Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkEventsListener() protected NetworkEventsListener() Properties Sandbox public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox Methods OnClientConnected(NetworkSandbox, NetworkConnection) Called on the server when a specific client has connected. public virtual void OnClientConnected(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection OnClientDisconnected(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the server when a specific client has disconnected. public virtual void OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason OnConnectFailed(NetworkSandbox, ConnectionFailedReason) Called on the client when the connection to the server was refused, or simply failed. public virtual void OnConnectFailed(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason OnConnectRequest(NetworkSandbox, NetworkConnectionRequest) Called on the server when a client tries to connect. Use request to decide whether or not to allow this client to connect. public virtual void OnConnectRequest(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest OnConnectedToServer(NetworkSandbox, NetworkConnection) Called on the client when connection to the server has been initiated. public virtual void OnConnectedToServer(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection OnDataReceived(NetworkSandbox, NetworkConnection, byte, byte*, int, TransportDeliveryMethod) public virtual void OnDataReceived(NetworkSandbox sandbox, NetworkConnection sender, byte id, byte* data, int length, TransportDeliveryMethod transportDeliveryMethod) Parameters sandbox NetworkSandbox sender NetworkConnection id byte data byte* length int transportDeliveryMethod TransportDeliveryMethod OnDisconnectedFromServer(NetworkSandbox, NetworkConnection, TransportDisconnectReason) Called on the client when connection to the server ended, or when a network error caused the disconnection. public virtual void OnDisconnectedFromServer(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason OnInput(NetworkSandbox) Called to read inputs. public virtual void OnInput(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchCreated(NetworkSandbox) public virtual void OnMatchCreated(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnMatchListUpdate(NetworkSandbox, List<Session>) public virtual void OnMatchListUpdate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> OnObjectCreated(NetworkObject) Called when a network object has been created/initialized. public virtual void OnObjectCreated(NetworkObject entity) Parameters entity NetworkObject OnObjectDestroyed(NetworkObject) Called when a network object has been destroyed/recycled. public virtual void OnObjectDestroyed(NetworkObject entity) Parameters entity NetworkObject OnPlayerConnected(NetworkSandbox, NetworkPlayer) Called on the server when a specific player has connected. public virtual void OnPlayerConnected(NetworkSandbox sandbox, NetworkPlayer player) Parameters sandbox NetworkSandbox player NetworkPlayer OnPlayerDisconnected(NetworkSandbox, NetworkPlayer, TransportDisconnectReason) Called on the server when a specific player has disconnected. public virtual void OnPlayerDisconnected(NetworkSandbox sandbox, NetworkPlayer player, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox player NetworkPlayer transportDisconnectReason TransportDisconnectReason OnSceneLoadStarted(NetworkSandbox) Called on both the client and the server before beginning to load the new scene. [Obsolete(\"This method will be removed. Use OnSceneLoadDone instead.\")] public virtual void OnSceneLoadStarted(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnSceneLoaded(NetworkSandbox) Called on both the client and the server when the scene has been loaded. [Obsolete(\"This method will be removed. Use OnSceneLoadBegan instead.\")] public virtual void OnSceneLoaded(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnSceneOperationBegan(NetworkSandbox, NetworkSceneOperation) Called on both the client and the server when a scene load/unload operation was started. public virtual void OnSceneOperationBegan(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) Parameters sandbox NetworkSandbox sceneOperation NetworkSceneOperation OnSceneOperationDone(NetworkSandbox, NetworkSceneOperation) Called on both the client and the server when a scene load/unload operation finished. public virtual void OnSceneOperationDone(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) Parameters sandbox NetworkSandbox sceneOperation NetworkSceneOperation OnShutdown(NetworkSandbox) Called when Netick has been shut down. public virtual void OnShutdown(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnStartup(NetworkSandbox) Called when Netick has been started. public virtual void OnStartup(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox OnVisibilityChanged(NetworkSandbox) Called when a sandbox visibility changes. Use Sandbox.IsVisible to find if the sandbox is visible or not. public virtual void OnVisibilityChanged(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox UnlinkFromNetick() public void UnlinkFromNetick()"
  },
  "api/Netick.Unity.NetworkObject.html": {
    "href": "api/Netick.Unity.NetworkObject.html",
    "title": "Class NetworkObject | Netick Networking Engine",
    "summary": "Class NetworkObject Namespace Netick.Unity Assembly Netick.Unity.dll Any GameObject which needs to be synced/replicated must have a Network Object component. It’s the component that tells Netick a GameObject is networked. Although not every child GameObject needs it, only the root has to have a Network Object. [AddComponentMenu(\"Netick/Network Object\")] [DisallowMultipleComponent] [SerializeField] public class NetworkObject : MonoBehaviour, INetickEntity Inheritance object Object Component Behaviour MonoBehaviour NetworkObject Implements INetickEntity Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkObject() public NetworkObject() Properties BroadPhaseFilter public BroadPhaseFilter BroadPhaseFilter { get; } Property Value BroadPhaseFilter Engine public NetickEngine Engine { get; } Property Value NetickEngine Entity public Entity Entity { get; } Property Value Entity HasValidId Returns true if this NetworkObject has been added to the simulation by Netick, and thus has a valid id. [SerializeField] public bool HasValidId { get; } Property Value bool Id public int Id { get; } Property Value int InputSource Returns the source NetworkPlayer (NetworkPeer/ServerConnection) of inputs for this NetworkObject. If the source of inputs is remote (from a client) it returns that ServerConnection, while on the input source itself it returns the local NetworkPlayer. public NetworkPlayer InputSource { get; set; } Property Value NetworkPlayer InterestGroup The interest group of this object. This can only be changed if BroadPhaseFilter is set to Custom. public InterestManagementGroup InterestGroup { get; set; } Property Value InterestManagementGroup IsClient Returns true if this Engine is a client. public bool IsClient { get; } Property Value bool IsInputSource Returns true if this LocalPlayer is providing inputs for this NetworkObject. public bool IsInputSource { get; } Property Value bool IsOwner Returns true if this Engine is the owner of this Object. In this version of Netick: Server=Owner. public bool IsOwner { get; } Property Value bool IsPrefab public bool IsPrefab { get; } Property Value bool IsPrefabObject public bool IsPrefabObject { get; } Property Value bool IsProxy Returns true if we neither provide inputs nor own this object. public bool IsProxy { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsSceneObject [SerializeField] public bool IsSceneObject { get; } Property Value bool IsServer Returns true if this Engine is the server. public bool IsServer { get; } Property Value bool IsSpawnPredicted public bool IsSpawnPredicted { get; } Property Value bool NarrowPhaseFilter public bool NarrowPhaseFilter { get; } Property Value bool NetickBehaviours public NetickBehaviour[] NetickBehaviours { get; } Property Value NetickBehaviour[] NetworkedBehaviours public NetworkBehaviour[] NetworkedBehaviours { get; } Property Value NetworkBehaviour[] Parent The NetworkObject parent of this object. public NetworkObject Parent { get; } Property Value NetworkObject PredictionMode public Relevancy PredictionMode { get; } Property Value Relevancy Sandbox public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox SpatialPrioritization public bool SpatialPrioritization { get; } Property Value bool SpawnPredictionKey public SpawnPredictionKey SpawnPredictionKey { get; } Property Value SpawnPredictionKey SpawnTick public Tick SpawnTick { get; } Property Value Tick StateSize Returns the networked state size of this object in bytes. public int StateSize { get; } Property Value int Methods CopyStateTo(byte*) public void CopyStateTo(byte* target) Parameters target byte* GetBehaviourById<T>(int) public T GetBehaviourById<T>(int id) where T : NetworkBehaviour Parameters id int Returns T Type Parameters T GetBehaviour<T>() public T GetBehaviour<T>() where T : NetworkBehaviour Returns T Type Parameters T GetRef() public NetworkObjectRef GetRef() Returns NetworkObjectRef GetSceneId() public int GetSceneId() Returns int SetNarrowphaseInterest(NetworkPlayer, bool) public void SetNarrowphaseInterest(NetworkPlayer player, bool isInterested) Parameters player NetworkPlayer isInterested bool SetParent(NetworkObject) [Owner/InputSource Only] Changes the parent of this object. public void SetParent(NetworkObject obj) Parameters obj NetworkObject The object which will become the parent of this object. SetStateFrom(byte*) Sets the state of this object. Ignores [OnChanged] callbacks when setting the data. public void SetStateFrom(byte* source) Parameters source byte* UpdateAoI() public void UpdateAoI()"
  },
  "api/Netick.Unity.NetworkObjectRef.html": {
    "href": "api/Netick.Unity.NetworkObjectRef.html",
    "title": "Struct NetworkObjectRef | Netick Networking Engine",
    "summary": "Struct NetworkObjectRef Namespace Netick.Unity Assembly Netick.Unity.dll public struct NetworkObjectRef : IEquatable<NetworkObjectRef> Implements IEquatable<NetworkObjectRef> Inherited Members ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors NetworkObjectRef(NetworkObject) public NetworkObjectRef(NetworkObject obj) Parameters obj NetworkObject Fields ObjectId public readonly int ObjectId Field Value int Methods Equals(NetworkObjectRef) public bool Equals(NetworkObjectRef other) Parameters other NetworkObjectRef Returns bool Equals(object) public override bool Equals(object other) Parameters other object Returns bool GetHashCode() public override int GetHashCode() Returns int GetObject(NetworkSandbox) public NetworkObject GetObject(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Returns NetworkObject TryGetObject(NetworkSandbox, out NetworkObject) public bool TryGetObject(NetworkSandbox sandbox, out NetworkObject obj) Parameters sandbox NetworkSandbox obj NetworkObject Returns bool"
  },
  "api/Netick.Unity.NetworkPlayerExtension.html": {
    "href": "api/Netick.Unity.NetworkPlayerExtension.html",
    "title": "Class NetworkPlayerExtension | Netick Networking Engine",
    "summary": "Class NetworkPlayerExtension Namespace Netick.Unity Assembly Netick.Unity.dll public static class NetworkPlayerExtension Inheritance object NetworkPlayerExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetBehaviour<T>(OnChangedData) public static T GetBehaviour<T>(this OnChangedData change) where T : NetworkBehaviour Parameters change OnChangedData Returns T Type Parameters T SetAoIPosition(NetworkPlayer, Vector3) public static void SetAoIPosition(this NetworkPlayer conn, Vector3 position) Parameters conn NetworkPlayer position Vector3"
  },
  "api/Netick.Unity.NetworkPlayerExtensions.html": {
    "href": "api/Netick.Unity.NetworkPlayerExtensions.html",
    "title": "Class NetworkPlayerExtensions | Netick Networking Engine",
    "summary": "Class NetworkPlayerExtensions Namespace Netick.Unity Assembly Netick.Unity.dll public static class NetworkPlayerExtensions Inheritance object NetworkPlayerExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddInterestBoxArea(NetworkPlayer, Bounds) public static void AddInterestBoxArea(this NetworkPlayer player, Bounds box) Parameters player NetworkPlayer box Bounds"
  },
  "api/Netick.Unity.NetworkRenderInvokeOrder.html": {
    "href": "api/Netick.Unity.NetworkRenderInvokeOrder.html",
    "title": "Enum NetworkRenderInvokeOrder | Netick Networking Engine",
    "summary": "Enum NetworkRenderInvokeOrder Namespace Netick.Unity Assembly Netick.Unity.dll public enum NetworkRenderInvokeOrder Fields LateUpdate = 1 Update = 0"
  },
  "api/Netick.Unity.NetworkRigidbody.html": {
    "href": "api/Netick.Unity.NetworkRigidbody.html",
    "title": "Class NetworkRigidbody | Netick Networking Engine",
    "summary": "Class NetworkRigidbody Namespace Netick.Unity Assembly Netick.Unity.dll This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody must be used if you want to have client-side prediction over PhysX objects since it replicates several other properties necessary for correct prediction. [IgnoreCodeGen] [AddComponentMenu(\"Netick/Network Rigidbody\")] [RequireComponent(typeof(Rigidbody))] [DisallowMultipleComponent] public sealed class NetworkRigidbody : NetworkTransform, INetickNetworkScript, INetickScript, IClientSimulationCallbacks, IPhysicsComponent Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour NetworkBehaviour NetworkTransform NetworkRigidbody Implements INetickNetworkScript INetickScript IClientSimulationCallbacks IPhysicsComponent Inherited Members NetworkTransform.RenderTransform NetworkTransform.TeleportDistance NetworkTransform.InterpolationMultiplier NetworkTransform.CorrectionMultiplier NetworkTransform.CorrectionMaxBlendAlpha NetworkTransform.TeleportErrorThreshold NetworkTransform.Teleport(Vector3) NetworkTransform.Teleport(Vector3, Quaternion) NetworkTransform.Teleport(Quaternion) NetworkTransform.NetworkRender() NetworkTransform.GetInterpolationData(out Vector3, out Quaternion) NetworkTransform.Render() NetworkTransform.OnBecameInterested() NetworkTransform.InterpolationSource NetworkTransform.Position NetworkTransform.Rotation NetworkBehaviour.S NetworkBehaviour.GetRef<T>() NetworkBehaviour.CopyStateTo(byte*) NetworkBehaviour.SetStateFrom(byte*) NetworkBehaviour.FetchInput<T>(out T, int) NetworkBehaviour.FetchInput<T>(out T, out bool, int) NetworkBehaviour.FindInterpolator(string) NetworkBehaviour.OnBecameUninterested() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetworkBehaviour.InputSource NetworkBehaviour.InputSourcePlayerId NetworkBehaviour.StateSize NetickBehaviour.NetworkUpdate() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkRigidbody() public NetworkRigidbody() Methods GameEngineIntoNetcode() public override void GameEngineIntoNetcode() InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int NetcodeIntoGameEngine() public override void NetcodeIntoGameEngine() NetworkAwake() public override void NetworkAwake() NetworkDestroy() Called when this behaviour has been removed from the simulation. public override void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network step. Any changes to the networked state should happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.Unity.NetworkRigidbody2D.html": {
    "href": "api/Netick.Unity.NetworkRigidbody2D.html",
    "title": "Class NetworkRigidbody2D | Netick Networking Engine",
    "summary": "Class NetworkRigidbody2D Namespace Netick.Unity Assembly Netick.Unity.dll This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody 2D must be used if you want to have client-side prediction over Box2D objects since it replicates several other properties necessary for correct prediction. [IgnoreCodeGen] [AddComponentMenu(\"Netick/Network Rigidbody2D\")] [RequireComponent(typeof(Rigidbody2D))] [DisallowMultipleComponent] public sealed class NetworkRigidbody2D : NetworkTransform, INetickNetworkScript, INetickScript, IClientSimulationCallbacks, IPhysicsComponent Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour NetworkBehaviour NetworkTransform NetworkRigidbody2D Implements INetickNetworkScript INetickScript IClientSimulationCallbacks IPhysicsComponent Inherited Members NetworkTransform.RenderTransform NetworkTransform.TeleportDistance NetworkTransform.InterpolationMultiplier NetworkTransform.CorrectionMultiplier NetworkTransform.CorrectionMaxBlendAlpha NetworkTransform.TeleportErrorThreshold NetworkTransform.Teleport(Vector3) NetworkTransform.Teleport(Vector3, Quaternion) NetworkTransform.Teleport(Quaternion) NetworkTransform.NetworkRender() NetworkTransform.GetInterpolationData(out Vector3, out Quaternion) NetworkTransform.Render() NetworkTransform.OnBecameInterested() NetworkTransform.InterpolationSource NetworkTransform.Position NetworkTransform.Rotation NetworkBehaviour.S NetworkBehaviour.GetRef<T>() NetworkBehaviour.CopyStateTo(byte*) NetworkBehaviour.SetStateFrom(byte*) NetworkBehaviour.FetchInput<T>(out T, int) NetworkBehaviour.FetchInput<T>(out T, out bool, int) NetworkBehaviour.FindInterpolator(string) NetworkBehaviour.OnBecameUninterested() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetworkBehaviour.InputSource NetworkBehaviour.InputSourcePlayerId NetworkBehaviour.StateSize NetickBehaviour.NetworkUpdate() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkRigidbody2D() public NetworkRigidbody2D() Methods GameEngineIntoNetcode() public override void GameEngineIntoNetcode() InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int NetcodeIntoGameEngine() public override void NetcodeIntoGameEngine() NetworkAwake() public override void NetworkAwake() NetworkDestroy() Called when this behaviour has been removed from the simulation. public override void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network step. Any changes to the networked state should happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.Unity.NetworkSandbox.html": {
    "href": "api/Netick.Unity.NetworkSandbox.html",
    "title": "Class NetworkSandbox | Netick Networking Engine",
    "summary": "Class NetworkSandbox Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkSandbox : MonoBehaviour, IGameEngine Inheritance object Object Component Behaviour MonoBehaviour NetworkSandbox Implements IGameEngine Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkSandbox() public NetworkSandbox() Properties AuthoritativeTick Last received tick on the client. On the server, it returns the same value as Sandbox.Tick. public Tick AuthoritativeTick { get; } Property Value Tick Config Configuration data for Netick. public NetickConfig Config { get; } Property Value NetickConfig ConnectedClients A list containing all connected clients currently. Note: if you want the clients + the server, use ConnectedPlayers. public IReadOnlyList<ServerConnection> ConnectedClients { get; } Property Value IReadOnlyList<ServerConnection> ConnectedPlayers A list containing all connected clients currently, in addition to the server (when started as a host). Note: if you only want the clients, use ConnectedClients. public IReadOnlyList<NetworkPlayer> ConnectedPlayers { get; } Property Value IReadOnlyList<NetworkPlayer> ConnectedServer The server the client is connected to. public NetworkConnection ConnectedServer { get; } Property Value NetworkConnection CurrentRpcCaller public NetworkPlayer CurrentRpcCaller { get; } Property Value NetworkPlayer CurrentRpcSource Always always returns null except when called inside the body of an RPC method, it returns the NetworkConnection we are executing RPCs from. public NetworkConnection CurrentRpcSource { get; } Property Value NetworkConnection DeltaTime public float DeltaTime { get; } Property Value float Engine public NetickEngine Engine { get; } Property Value NetickEngine Events public NetickCallbacks Events { get; } Property Value NetickCallbacks FixedDeltaTime Time period between network simulation steps. Same as UnityEngine.Time.fixedDeltaTime public float FixedDeltaTime { get; } Property Value float InKBps Incoming data in kilobytes per second (KBps). public float InKBps { get; } Property Value float InPacketLoss [Client Only] Estimation of incoming packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost. public float InPacketLoss { get; } Property Value float InputEnabled public bool InputEnabled { get; set; } Property Value bool InterestManagement public InterestManagement InterestManagement { get; } Property Value InterestManagement InterpolationDelay [Client Only] Interpolation delay in seconds. public float InterpolationDelay { get; } Property Value float IsClient Returns true if this NetworkSandbox is a client. public bool IsClient { get; } Property Value bool IsConnected [Client Only] Returns true if this client is currently connected to a server. public bool IsConnected { get; } Property Value bool IsHost Returns true if this NetworkSandbox is a host. public bool IsHost { get; } Property Value bool IsResimulating Returns true if we are currently resimulating a previous input/tick of the past. On the server, it always returns false since only the clients resimulate. public bool IsResimulating { get; } Property Value bool IsRunning Returns true if this NetworkSandbox has been started. public bool IsRunning { get; } Property Value bool IsServer Returns true if this NetworkSandbox is the server. public bool IsServer { get; } Property Value bool IsVisible public bool IsVisible { get; set; } Property Value bool LocalInterpolation public LocalInterpolation LocalInterpolation { get; } Property Value LocalInterpolation LocalPlayer This player. public NetworkPlayer LocalPlayer { get; } Property Value NetworkPlayer MainSceneBuildIndex public int MainSceneBuildIndex { get; } Property Value int Monitor public Monitor Monitor { get; } Property Value Monitor Name public string Name { get; } Property Value string NetworkTime public float NetworkTime { get; } Property Value float Objects A dictionary containing all simulated/registered network objects [NetworkObject] currently. public IReadOnlyDictionary<int, NetworkObject> Objects { get; } Property Value IReadOnlyDictionary<int, NetworkObject> OutKBps Outgoing data in kilobytes per second (KBps). public float OutKBps { get; } Property Value float OutPacketLoss [Client Only] Estimation of outgoing packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost. public float OutPacketLoss { get; } Property Value float Physics The UnityEngine.PhysicsScene associated with this NetworkSandbox. Always use this to perform physics queries inside the sandbox instead of UnityEngine.Physics. public PhysicsScene Physics { get; } Property Value PhysicsScene Physics2D The UnityEngine.PhysicsScene2D associated with this NetworkSandbox. Always use this to perform physics queries inside the sandbox instead of UnityEngine.Physics2D. public PhysicsScene2D Physics2D { get; } Property Value PhysicsScene2D PhysicsPrediction Use this to enable/disable Physics Prediction in the client at runtime. public bool PhysicsPrediction { get; set; } Property Value bool PostNetworkFixedUpdate Called after all NetworkFixedUpdate methods have been executed. Note: it's called with every resimulation on the client. public Action PostNetworkFixedUpdate { get; set; } Property Value Action PreNetworkFixedUpdate Called before any NetworkFixedUpdate method have been executed. Note: it's called with every resimulation on the client. public Action PreNetworkFixedUpdate { get; set; } Property Value Action PredictedTick Last predicted tick. On the client, it always returns the predicted tick of the client, regardless of whether it's a resimulation or not. On the server, it returns the same value as Sandbox.Tick public Tick PredictedTick { get; } Property Value Tick RTT [Client Only] The round-trip time (RTT) of the client in seconds. public double RTT { get; } Property Value double RemoteInterpolation public RemoteInterpolation RemoteInterpolation { get; } Property Value RemoteInterpolation ResimulationStep public int ResimulationStep { get; } Property Value int Resimulations public int Resimulations { get; } Property Value int ScaledFixedDeltaTime public float ScaledFixedDeltaTime { get; } Property Value float Scene The UnityEngine.SceneManagement.Scene associated with this NetworkSandbox. public Scene Scene { get; } Property Value Scene ServerEndPoint [Client Only] The IPEndPoint of the server you are connected to. Returns null if you are not connected to any server, or if you are the server. public IEndPoint ServerEndPoint { get; } Property Value IEndPoint StartMode public StartMode StartMode { get; } Property Value StartMode Tick Current simulation tick. On the server, it's always going forward/increasing. On the client, during resimulations it returns the current resimulated tick. To check for resimulations, use IsResimulating. public Tick Tick { get; } Property Value Tick Timer public SimulationClock Timer { get; } Property Value SimulationClock Transport The underlying transport used for low-level networking. public NetworkTransport Transport { get; } Property Value NetworkTransport UserObject Use this to associate an object with this sandbox. public object UserObject { get; set; } Property Value object Methods AttachBehaviour(NetickBehaviour) Attachs a NetickBehaviour to the simulation. public void AttachBehaviour(NetickBehaviour behaviour) Parameters behaviour NetickBehaviour AttachNonNetworkedRigidbody(GameObject) public void AttachNonNetworkedRigidbody(GameObject rigidbodyGameObject) Parameters rigidbodyGameObject GameObject Connect(int, string, byte[], int) [Client Only] Connects to a remote server. Note: if you are already connected to a server, and you want to connect to a different one, you have to disconnect before calling this. Otherwise this method does nothing. Note: connectionData array length should not be more than 300 if you are using Netick Transport. public void Connect(int port, string ip, byte[] connectionData = null, int connectionDataLength = 0) Parameters port int Port of the server. ip string IP address of the server. connectionData byte[] RawValue sent with the connection request. Could be used to decide whether or not to allow the connection. connectionDataLength int CreateMatch(string) [Server Only] Creates a match. Only functional if the low-level transport has support for matchmaking. public void CreateMatch(string name) Parameters name string Name of the match. DeattachBehaviour(NetickBehaviour) Deattachs a NetickBehaviour from the simulation. public void DeattachBehaviour(NetickBehaviour behaviour) Parameters behaviour NetickBehaviour DeattachNonNetworkedRigidbody(GameObject) public void DeattachNonNetworkedRigidbody(GameObject rigidbodyGameObject) Parameters rigidbodyGameObject GameObject Destroy(NetworkObject) [Server Only] Destroys a network object. Note: never call this on a child NetworkObject of the original prefab, only the root of the prefab. public void Destroy(NetworkObject obj) Parameters obj NetworkObject The object to destroy. DestroyPool(GameObject) public void DestroyPool(GameObject networkedPrefab) Parameters networkedPrefab GameObject DisableComponent(Component) public void DisableComponent(Component component) Parameters component Component DisconnectFromServer() [Client Only] Disconnects this client from the server. public void DisconnectFromServer() EnableComponent(Component) public void EnableComponent(Component component) Parameters component Component FindGameObjectWithTag(string, bool) public GameObject FindGameObjectWithTag(string tag, bool activeOnly = true) Parameters tag string activeOnly bool Returns GameObject FindGameObjectsWithTag(string, bool) public List<GameObject> FindGameObjectsWithTag(string tag, bool activeOnly = true) Parameters tag string activeOnly bool Returns List<GameObject> FindGameObjectsWithTag(string, List<GameObject>, bool) public List<GameObject> FindGameObjectsWithTag(string tag, List<GameObject> results, bool activeOnly = true) Parameters tag string results List<GameObject> activeOnly bool Returns List<GameObject> FindObjectOfType<T>(bool) public T FindObjectOfType<T>(bool activeOnly = true) where T : class Parameters activeOnly bool Returns T Type Parameters T FindObjectsOfType<T>(bool) public List<T> FindObjectsOfType<T>(bool activeOnly = true) where T : class Parameters activeOnly bool Returns List<T> Type Parameters T FindObjectsOfType<T>(List<T>, bool) public void FindObjectsOfType<T>(List<T> results, bool activeOnly = true) where T : class Parameters results List<T> activeOnly bool Type Parameters T GetBehaviour<T>(NetworkBehaviourRef<T>) public T GetBehaviour<T>(NetworkBehaviourRef<T> networkBehaviourRef) where T : NetworkBehaviour Parameters networkBehaviourRef NetworkBehaviourRef<T> Returns T Type Parameters T GetInput<T>(int) Gets a specific input for the next tick. public T GetInput<T>(int index = 0) where T : unmanaged Parameters index int Returns T Type Parameters T GetObject(NetworkObjectRef) public NetworkObject GetObject(NetworkObjectRef networkObjectRef) Parameters networkObjectRef NetworkObjectRef Returns NetworkObject GetObject(int) Gets the NetworkObject with the specified id. Returns null in case no object with that id exists. public NetworkObject GetObject(int id) Parameters id int The id of the NetworkObject Returns NetworkObject GetPrefab(string) Gets a Network Prefab by name. Note: this causes GC. public GameObject GetPrefab(string name) Parameters name string Returns GameObject The Network Prefab Hide() protected void Hide() InitializePool(GameObject, int, bool) Initializes the pool for the specified prefab. After this method has been called for a certain prefab, all instances of that prefab will be recycled and reset when created/destroyed. Note: this method should only be called on OnStartup(NetworkSandbox), in other words, just after Netick has been started. public void InitializePool(GameObject networkedPrefab, int preloadedAmount, bool hideInactiveMembers = false) Parameters networkedPrefab GameObject Prefab to enable pooling for. preloadedAmount int How many instances to be preloaded. hideInactiveMembers bool Pass true to hide inactive pool members. Instantiate(GameObject, Vector3, Quaternion) Instantiates a prefab. This must be called instead of UnityEngine.Object.Instantiate(UnityEngine.Object) or its variations. Note: this must be called only for non-networked prefabs. If you want to instantiate a network prefab, use NetworkInstantiate(GameObject, Vector3, Quaternion, NetworkPlayer) instead. public GameObject Instantiate(GameObject prefab, Vector3 position, Quaternion rotation) Parameters prefab GameObject The prefab to be instantiated. position Vector3 Position of the instantiated object. rotation Quaternion Rotation of the instantiated object. Returns GameObject Instantiate<T>(T, Vector3, Quaternion) public T Instantiate<T>(T prefab, Vector3 position, Quaternion rotation) where T : MonoBehaviour Parameters prefab T position Vector3 rotation Quaternion Returns T Type Parameters T Kick(ServerConnection) [Server Only] Disconnects a client from the server. public void Kick(ServerConnection client) Parameters client ServerConnection The client to be disconnected. LoadSceneAsync(int, LoadSceneMode) public void LoadSceneAsync(int buildIndex, LoadSceneMode loadSceneMode) Parameters buildIndex int loadSceneMode LoadSceneMode LoadSceneAsync(int, LoadSceneParameters) public void LoadSceneAsync(int buildIndex, LoadSceneParameters loadSceneParameters) Parameters buildIndex int loadSceneParameters LoadSceneParameters LoadSceneAsync(string, LoadSceneMode) [Server Only] Loads a scene asynchronously. public void LoadSceneAsync(string sceneName, LoadSceneMode loadSceneMode) Parameters sceneName string loadSceneMode LoadSceneMode LoadSceneAsync(string, LoadSceneParameters) public void LoadSceneAsync(string sceneName, LoadSceneParameters loadSceneParameters) Parameters sceneName string loadSceneParameters LoadSceneParameters Log(object) public void Log(object message) Parameters message object LogError(object) public void LogError(object message) Parameters message object LogWarning(object) public void LogWarning(object message) Parameters message object NetworkInstantiate(GameObject, Vector3, Quaternion, NetworkPlayer) [Server Only] Instantiates a network prefab. This must only be called on the server, since only the server can instantiate network prefabs. Note: make sure the prefab has been registered. Note: the specified input source will be given to every NetworkObject child of this prefab. public NetworkObject NetworkInstantiate(GameObject prefab, Vector3 position, Quaternion rotation, NetworkPlayer inputSource = null) Parameters prefab GameObject The prefab to be instantiated. position Vector3 Position of the instantiated object. rotation Quaternion Rotation of the instantiated object. inputSource NetworkPlayer Input source of the instantiated object. Returns NetworkObject NetworkInstantiate<T>(T, Vector3, Quaternion, NetworkPlayer) public T NetworkInstantiate<T>(T prefab, Vector3 position, Quaternion rotation, NetworkPlayer inputSource = null) where T : MonoBehaviour Parameters prefab T position Vector3 rotation Quaternion inputSource NetworkPlayer Returns T Type Parameters T RefreshMatchList() Requests an update to the match list. Only functional if the low-level transport has support for matchmaking. public void RefreshMatchList() RemoveFromLoop(NetworkObject) public void RemoveFromLoop(NetworkObject obj) Parameters obj NetworkObject RestartTimer(float, bool) public NetworkTimer RestartTimer(float time, bool usePredictedTiming = true) Parameters time float usePredictedTiming bool Returns NetworkTimer SetComponentEnabled(Component, bool) public void SetComponentEnabled(Component component, bool enabled) Parameters component Component enabled bool SetInput<T>(T, int) Sets a specific input for the next tick. public void SetInput<T>(T input, int index = 0) where T : unmanaged Parameters input T index int Type Parameters T Show() protected void Show() StartTimer(float, bool) public NetworkTimer StartTimer(float time, bool usePredictedTiming = true) Parameters time float usePredictedTiming bool Returns NetworkTimer SwitchScene(int) [Server Only] Switches to a different scene. This must be called instead of LoadSceneAsync(int) or its variations. public void SwitchScene(int sceneBuildIndex) Parameters sceneBuildIndex int SceneBuildIndex of the desired scene. SwitchScene(string) [Server Only] Switches to a different scene. This must be called instead of LoadSceneAsync(int) or its variations. public void SwitchScene(string sceneName) Parameters sceneName string TickToTime(Tick) Converts tick to time in seconds. public float TickToTime(Tick tick) Parameters tick Tick Returns float TickToTime(float) Converts tick to time in seconds. public float TickToTime(float tick) Parameters tick float Returns float TryGetBehaviour<T>(NetworkBehaviourRef<T>, out T) public bool TryGetBehaviour<T>(NetworkBehaviourRef<T> networkBehaviourRef, out T behaviour) where T : NetworkBehaviour Parameters networkBehaviourRef NetworkBehaviourRef<T> behaviour T Returns bool Type Parameters T TryGetBehaviour<T>(int, out T) Tries to get the NetworkBehaviour of a NetworkObject with the specified id. public bool TryGetBehaviour<T>(int id, out T behaviour) where T : NetworkBehaviour Parameters id int The id of the network object behaviour T Returns bool Type Parameters T TryGetObject(NetworkObjectRef, out NetworkObject) public bool TryGetObject(NetworkObjectRef networkObjectRef, out NetworkObject obj) Parameters networkObjectRef NetworkObjectRef obj NetworkObject Returns bool TryGetObject(int, out NetworkObject) Tries to get the NetworkObject with the specified id. public bool TryGetObject(int id, out NetworkObject obj) Parameters id int The id of the NetworkObject obj NetworkObject Returns bool UnloadSceneAsync(int) public void UnloadSceneAsync(int buildIndex) Parameters buildIndex int UnloadSceneAsync(string) [Server Only] Unloads a scene asynchronously. public void UnloadSceneAsync(string sceneName) Parameters sceneName string UnloadSceneAsync(Scene) public void UnloadSceneAsync(Scene scene) Parameters scene Scene"
  },
  "api/Netick.Unity.NetworkScene.html": {
    "href": "api/Netick.Unity.NetworkScene.html",
    "title": "Class NetworkScene | Netick Networking Engine",
    "summary": "Class NetworkScene Namespace Netick.Unity Assembly Netick.Unity.dll public class NetworkScene Inheritance object NetworkScene Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors NetworkScene(NetworkSandbox, bool, int, bool, Scene, int) public NetworkScene(NetworkSandbox sandbox, bool isMainScene, int loadCounterId, bool createPhysicsScene, Scene scene, int slotIndex) Parameters sandbox NetworkSandbox isMainScene bool loadCounterId int createPhysicsScene bool scene Scene slotIndex int Fields CreatePhysicsScene public bool CreatePhysicsScene Field Value bool IsMainScene public bool IsMainScene Field Value bool LoadCounterId public int LoadCounterId Field Value int NetworkObjects public Dictionary<int, NetworkObject> NetworkObjects Field Value Dictionary<int, NetworkObject> Objects public List<GameObject> Objects Field Value List<GameObject> Sandbox public NetworkSandbox Sandbox Field Value NetworkSandbox Scene public Scene Scene Field Value Scene SlotIndex public int SlotIndex Field Value int"
  },
  "api/Netick.Unity.NetworkSceneManager.html": {
    "href": "api/Netick.Unity.NetworkSceneManager.html",
    "title": "Class NetworkSceneManager | Netick Networking Engine",
    "summary": "Class NetworkSceneManager Namespace Netick.Unity Assembly Netick.Unity.dll [ExecutionOrder(-10000)] public class NetworkSceneManager : NetickCoreComponent, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour NetworkBehaviour NetickCoreComponent NetworkSceneManager Implements INetickNetworkScript INetickScript Inherited Members NetworkBehaviour.S NetworkBehaviour.GetRef<T>() NetworkBehaviour.CopyStateTo(byte*) NetworkBehaviour.SetStateFrom(byte*) NetworkBehaviour.FetchInput<T>(out T, int) NetworkBehaviour.FetchInput<T>(out T, out bool, int) NetworkBehaviour.FindInterpolator(string) NetworkBehaviour.GameEngineIntoNetcode() NetworkBehaviour.NetcodeIntoGameEngine() NetworkBehaviour.OnBecameInterested() NetworkBehaviour.OnBecameUninterested() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetworkBehaviour.InputSource NetworkBehaviour.InputSourcePlayerId NetworkBehaviour.StateSize NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkSceneManager() public NetworkSceneManager() Methods InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int InternalReset() public override void InternalReset() NetworkAwake() public override void NetworkAwake() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart() OnSyncedLoadedAdditiveScenes() public void OnSyncedLoadedAdditiveScenes()"
  },
  "api/Netick.Unity.NetworkSceneOperation.html": {
    "href": "api/Netick.Unity.NetworkSceneOperation.html",
    "title": "Struct NetworkSceneOperation | Netick Networking Engine",
    "summary": "Struct NetworkSceneOperation Namespace Netick.Unity Assembly Netick.Unity.dll public struct NetworkSceneOperation Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Properties AsyncOperation public readonly AsyncOperation AsyncOperation { get; } Property Value AsyncOperation BuildIndex public readonly int BuildIndex { get; } Property Value int IsAdditiveScene public readonly bool IsAdditiveScene { get; } Property Value bool IsDone public bool IsDone { get; } Property Value bool IsLoadOperation public readonly bool IsLoadOperation { get; } Property Value bool IsUnloadOperation public bool IsUnloadOperation { get; } Property Value bool IsValid public readonly bool IsValid { get; } Property Value bool Progress public float Progress { get; } Property Value float Scene public readonly Scene Scene { get; } Property Value Scene SceneName public readonly string SceneName { get; } Property Value string"
  },
  "api/Netick.Unity.NetworkTimerExt.html": {
    "href": "api/Netick.Unity.NetworkTimerExt.html",
    "title": "Class NetworkTimerExt | Netick Networking Engine",
    "summary": "Class NetworkTimerExt Namespace Netick.Unity Assembly Netick.Unity.dll public static class NetworkTimerExt Inheritance object NetworkTimerExt Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetElapsedTime(NetworkTimer, NetworkSandbox, bool) public static float GetElapsedTime(this NetworkTimer timer, NetworkSandbox sandbox, bool usePredictedTiming = false) Parameters timer NetworkTimer sandbox NetworkSandbox usePredictedTiming bool Returns float GetRemainingTime(NetworkTimer, NetworkSandbox, bool) public static float GetRemainingTime(this NetworkTimer timer, NetworkSandbox sandbox, bool usePredictedTiming = false) Parameters timer NetworkTimer sandbox NetworkSandbox usePredictedTiming bool Returns float IsRunning(NetworkTimer, NetworkSandbox, bool) public static bool IsRunning(this NetworkTimer timer, NetworkSandbox sandbox, bool usePredictedTiming = false) Parameters timer NetworkTimer sandbox NetworkSandbox usePredictedTiming bool Returns bool IsStopped(NetworkTimer, NetworkSandbox, bool) public static bool IsStopped(this NetworkTimer timer, NetworkSandbox sandbox, bool usePredictedTiming = false) Parameters timer NetworkTimer sandbox NetworkSandbox usePredictedTiming bool Returns bool"
  },
  "api/Netick.Unity.NetworkTransform.html": {
    "href": "api/Netick.Unity.NetworkTransform.html",
    "title": "Class NetworkTransform | Netick Networking Engine",
    "summary": "Class NetworkTransform Namespace Netick.Unity Assembly Netick.Unity.dll [IgnoreCodeGen] [ExecutionOrder(-1000)] [AddComponentMenu(\"Netick/Network Transform\")] [RequireComponent(typeof(Transform))] [DisallowMultipleComponent] public class NetworkTransform : NetworkBehaviour, INetickNetworkScript, INetickScript, IClientSimulationCallbacks Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour NetworkBehaviour NetworkTransform Implements INetickNetworkScript INetickScript IClientSimulationCallbacks Derived NetworkRigidbody NetworkRigidbody2D Inherited Members NetworkBehaviour.S NetworkBehaviour.GetRef<T>() NetworkBehaviour.CopyStateTo(byte*) NetworkBehaviour.SetStateFrom(byte*) NetworkBehaviour.FetchInput<T>(out T, int) NetworkBehaviour.FetchInput<T>(out T, out bool, int) NetworkBehaviour.FindInterpolator(string) NetworkBehaviour.OnBecameUninterested() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetworkBehaviour.InputSource NetworkBehaviour.InputSourcePlayerId NetworkBehaviour.StateSize NetickBehaviour.NetworkUpdate() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors NetworkTransform() public NetworkTransform() Fields CorrectionMaxBlendAlpha public float CorrectionMaxBlendAlpha Field Value float CorrectionMultiplier public float CorrectionMultiplier Field Value float InterpolationMultiplier public float InterpolationMultiplier Field Value float RenderTransform public Transform RenderTransform Field Value Transform TeleportDistance [HideInInspector] [SerializeField] public float TeleportDistance Field Value float TeleportErrorThreshold public float TeleportErrorThreshold Field Value float TransformSpace [SerializeField] protected TransformSpace TransformSpace Field Value TransformSpace _posInversePrecision protected float _posInversePrecision Field Value float _posPrecision protected float _posPrecision Field Value float _rotInversePrecision protected float _rotInversePrecision Field Value float _rotPrecision protected float _rotPrecision Field Value float _syncPosition protected bool _syncPosition Field Value bool _syncRot protected bool _syncRot Field Value bool Properties InterpolationSource public InterpolationSource InterpolationSource { get; set; } Property Value InterpolationSource Position public Vector3 Position { get; } Property Value Vector3 Rotation public Quaternion Rotation { get; } Property Value Quaternion Methods GameEngineIntoNetcode() public override void GameEngineIntoNetcode() GetInterpolationData(out Vector3, out Quaternion) public bool GetInterpolationData(out Vector3 pos, out Quaternion rot) Parameters pos Vector3 rot Quaternion Returns bool InternalGetStateSizeWords() public override int InternalGetStateSizeWords() Returns int NetcodeIntoGameEngine() public override void NetcodeIntoGameEngine() NetworkAwake() public override void NetworkAwake() NetworkDestroy() Called when this behaviour has been removed from the simulation. public override void NetworkDestroy() NetworkFixedUpdate() Called every fixed-time network step. Any changes to the networked state should happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate() NetworkRender() Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. public override void NetworkRender() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart() OnBecameInterested() public override void OnBecameInterested() Render() public void Render() Teleport(Quaternion) Instantly moves the object. By calling this method, the object won't be interpolated for one tick. public void Teleport(Quaternion rotation) Parameters rotation Quaternion Teleport(Vector3) Instantly moves the object. By calling this method, the object won't be interpolated for one tick. public void Teleport(Vector3 position) Parameters position Vector3 Teleport(Vector3, Quaternion) Instantly moves the object. By calling this method, the object won't be interpolated for one tick. public void Teleport(Vector3 position, Quaternion rotation) Parameters position Vector3 rotation Quaternion"
  },
  "api/Netick.Unity.NetworkTransformRepConditions.html": {
    "href": "api/Netick.Unity.NetworkTransformRepConditions.html",
    "title": "Enum NetworkTransformRepConditions | Netick Networking Engine",
    "summary": "Enum NetworkTransformRepConditions Namespace Netick.Unity Assembly Netick.Unity.dll [Flags] public enum NetworkTransformRepConditions Fields CompressPosition = 4 CompressRotation = 8 CompressRotationAggressively = 16 SyncPosition = 1 SyncRotation = 2"
  },
  "api/Netick.Unity.NetworkTransportProvider.html": {
    "href": "api/Netick.Unity.NetworkTransportProvider.html",
    "title": "Class NetworkTransportProvider | Netick Networking Engine",
    "summary": "Class NetworkTransportProvider Namespace Netick.Unity Assembly Netick.Unity.dll public abstract class NetworkTransportProvider : ScriptableObject Inheritance object Object ScriptableObject NetworkTransportProvider Inherited Members ScriptableObject.SetDirty() ScriptableObject.CreateInstance(string) ScriptableObject.CreateInstance(Type) ScriptableObject.CreateInstance<T>() Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NetworkTransportProvider() protected NetworkTransportProvider() Methods MakeTransportInstance() public abstract NetworkTransport MakeTransportInstance() Returns NetworkTransport"
  },
  "api/Netick.Unity.ObjectList.html": {
    "href": "api/Netick.Unity.ObjectList.html",
    "title": "Class ObjectList | Netick Networking Engine",
    "summary": "Class ObjectList Namespace Netick.Unity Assembly Netick.Unity.dll public sealed class ObjectList : IEnumerable<NetworkObject>, IEnumerable Inheritance object ObjectList Implements IEnumerable<NetworkObject> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Methods GetEnumerator() public IEnumerator<NetworkObject> GetEnumerator() Returns IEnumerator<NetworkObject>"
  },
  "api/Netick.Unity.OnClientConnectedDelegate.html": {
    "href": "api/Netick.Unity.OnClientConnectedDelegate.html",
    "title": "Delegate OnClientConnectedDelegate | Netick Networking Engine",
    "summary": "Delegate OnClientConnectedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnClientConnectedDelegate(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection Constructors OnClientConnectedDelegate(object, IntPtr) public OnClientConnectedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection client, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox client NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection"
  },
  "api/Netick.Unity.OnClientDisconnectedDelegate.html": {
    "href": "api/Netick.Unity.OnClientDisconnectedDelegate.html",
    "title": "Delegate OnClientDisconnectedDelegate | Netick Networking Engine",
    "summary": "Delegate OnClientDisconnectedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnClientDisconnectedDelegate(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason Constructors OnClientDisconnectedDelegate(object, IntPtr) public OnClientDisconnectedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox client NetworkConnection transportDisconnectReason TransportDisconnectReason"
  },
  "api/Netick.Unity.OnClientSceneLoadedDelegate.html": {
    "href": "api/Netick.Unity.OnClientSceneLoadedDelegate.html",
    "title": "Delegate OnClientSceneLoadedDelegate | Netick Networking Engine",
    "summary": "Delegate OnClientSceneLoadedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnClientSceneLoadedDelegate(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection Constructors OnClientSceneLoadedDelegate(object, IntPtr) public OnClientSceneLoadedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection client, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox client NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection client) Parameters sandbox NetworkSandbox client NetworkConnection"
  },
  "api/Netick.Unity.OnConnectFailedDelegate.html": {
    "href": "api/Netick.Unity.OnConnectFailedDelegate.html",
    "title": "Delegate OnConnectFailedDelegate | Netick Networking Engine",
    "summary": "Delegate OnConnectFailedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnConnectFailedDelegate(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason Constructors OnConnectFailedDelegate(object, IntPtr) public OnConnectFailedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, ConnectionFailedReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, ConnectionFailedReason reason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox reason ConnectionFailedReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, ConnectionFailedReason) public virtual void Invoke(NetworkSandbox sandbox, ConnectionFailedReason reason) Parameters sandbox NetworkSandbox reason ConnectionFailedReason"
  },
  "api/Netick.Unity.OnConnectRequestDelegate.html": {
    "href": "api/Netick.Unity.OnConnectRequestDelegate.html",
    "title": "Delegate OnConnectRequestDelegate | Netick Networking Engine",
    "summary": "Delegate OnConnectRequestDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnConnectRequestDelegate(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest Constructors OnConnectRequestDelegate(object, IntPtr) public OnConnectRequestDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnectionRequest, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnectionRequest request, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox request NetworkConnectionRequest callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnectionRequest) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnectionRequest request) Parameters sandbox NetworkSandbox request NetworkConnectionRequest"
  },
  "api/Netick.Unity.OnConnectedToServerDelegate.html": {
    "href": "api/Netick.Unity.OnConnectedToServerDelegate.html",
    "title": "Delegate OnConnectedToServerDelegate | Netick Networking Engine",
    "summary": "Delegate OnConnectedToServerDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnConnectedToServerDelegate(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection Constructors OnConnectedToServerDelegate(object, IntPtr) public OnConnectedToServerDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server) Parameters sandbox NetworkSandbox server NetworkConnection"
  },
  "api/Netick.Unity.OnDataReceivedDelegate.html": {
    "href": "api/Netick.Unity.OnDataReceivedDelegate.html",
    "title": "Delegate OnDataReceivedDelegate | Netick Networking Engine",
    "summary": "Delegate OnDataReceivedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnDataReceivedDelegate(NetworkSandbox sandbox, NetworkConnection sender, byte id, byte* data, int length, TransportDeliveryMethod transportDeliveryMethod) Parameters sandbox NetworkSandbox sender NetworkConnection id byte data byte* length int transportDeliveryMethod TransportDeliveryMethod Constructors OnDataReceivedDelegate(object, IntPtr) public OnDataReceivedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, byte, byte*, int, TransportDeliveryMethod, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection sender, byte id, byte* data, int length, TransportDeliveryMethod transportDeliveryMethod, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox sender NetworkConnection id byte data byte* length int transportDeliveryMethod TransportDeliveryMethod callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection, byte, byte*, int, TransportDeliveryMethod) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection sender, byte id, byte* data, int length, TransportDeliveryMethod transportDeliveryMethod) Parameters sandbox NetworkSandbox sender NetworkConnection id byte data byte* length int transportDeliveryMethod TransportDeliveryMethod"
  },
  "api/Netick.Unity.OnDisconnectedFromServerDelegate.html": {
    "href": "api/Netick.Unity.OnDisconnectedFromServerDelegate.html",
    "title": "Delegate OnDisconnectedFromServerDelegate | Netick Networking Engine",
    "summary": "Delegate OnDisconnectedFromServerDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnDisconnectedFromServerDelegate(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason Constructors OnDisconnectedFromServerDelegate(object, IntPtr) public OnDisconnectedFromServerDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkConnection, TransportDisconnectReason) public virtual void Invoke(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox server NetworkConnection transportDisconnectReason TransportDisconnectReason"
  },
  "api/Netick.Unity.OnEntityDestroyedDelegate.html": {
    "href": "api/Netick.Unity.OnEntityDestroyedDelegate.html",
    "title": "Delegate OnEntityDestroyedDelegate | Netick Networking Engine",
    "summary": "Delegate OnEntityDestroyedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnEntityDestroyedDelegate(NetworkObject entity) Parameters entity NetworkObject Constructors OnEntityDestroyedDelegate(object, IntPtr) public OnEntityDestroyedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkObject, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkObject entity, AsyncCallback callback, object @object) Parameters entity NetworkObject callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkObject) public virtual void Invoke(NetworkObject entity) Parameters entity NetworkObject"
  },
  "api/Netick.Unity.OnInputReadDelegate.html": {
    "href": "api/Netick.Unity.OnInputReadDelegate.html",
    "title": "Delegate OnInputReadDelegate | Netick Networking Engine",
    "summary": "Delegate OnInputReadDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnInputReadDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnInputReadDelegate(object, IntPtr) public OnInputReadDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.Unity.OnMatchCreatedDelegate.html": {
    "href": "api/Netick.Unity.OnMatchCreatedDelegate.html",
    "title": "Delegate OnMatchCreatedDelegate | Netick Networking Engine",
    "summary": "Delegate OnMatchCreatedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnMatchCreatedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnMatchCreatedDelegate(object, IntPtr) public OnMatchCreatedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.Unity.OnMatchListUpdateDelegate.html": {
    "href": "api/Netick.Unity.OnMatchListUpdateDelegate.html",
    "title": "Delegate OnMatchListUpdateDelegate | Netick Networking Engine",
    "summary": "Delegate OnMatchListUpdateDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnMatchListUpdateDelegate(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session> Constructors OnMatchListUpdateDelegate(object, IntPtr) public OnMatchListUpdateDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, List<Session>, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, List<Session> sessions, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox sessions List<Session> callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, List<Session>) public virtual void Invoke(NetworkSandbox sandbox, List<Session> sessions) Parameters sandbox NetworkSandbox sessions List<Session>"
  },
  "api/Netick.Unity.OnObjectCreatedDelegate.html": {
    "href": "api/Netick.Unity.OnObjectCreatedDelegate.html",
    "title": "Delegate OnObjectCreatedDelegate | Netick Networking Engine",
    "summary": "Delegate OnObjectCreatedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnObjectCreatedDelegate(NetworkObject entity) Parameters entity NetworkObject Constructors OnObjectCreatedDelegate(object, IntPtr) public OnObjectCreatedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkObject, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkObject entity, AsyncCallback callback, object @object) Parameters entity NetworkObject callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkObject) public virtual void Invoke(NetworkObject entity) Parameters entity NetworkObject"
  },
  "api/Netick.Unity.OnPlayerConnectedDelegate.html": {
    "href": "api/Netick.Unity.OnPlayerConnectedDelegate.html",
    "title": "Delegate OnPlayerConnectedDelegate | Netick Networking Engine",
    "summary": "Delegate OnPlayerConnectedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnPlayerConnectedDelegate(NetworkSandbox sandbox, NetworkPlayer player) Parameters sandbox NetworkSandbox player NetworkPlayer Constructors OnPlayerConnectedDelegate(object, IntPtr) public OnPlayerConnectedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkPlayer, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkPlayer player, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox player NetworkPlayer callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkPlayer) public virtual void Invoke(NetworkSandbox sandbox, NetworkPlayer player) Parameters sandbox NetworkSandbox player NetworkPlayer"
  },
  "api/Netick.Unity.OnPlayerDisconnectedDelegate.html": {
    "href": "api/Netick.Unity.OnPlayerDisconnectedDelegate.html",
    "title": "Delegate OnPlayerDisconnectedDelegate | Netick Networking Engine",
    "summary": "Delegate OnPlayerDisconnectedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnPlayerDisconnectedDelegate(NetworkSandbox sandbox, NetworkPlayer player, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox player NetworkPlayer transportDisconnectReason TransportDisconnectReason Constructors OnPlayerDisconnectedDelegate(object, IntPtr) public OnPlayerDisconnectedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkPlayer, TransportDisconnectReason, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkPlayer player, TransportDisconnectReason transportDisconnectReason, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox player NetworkPlayer transportDisconnectReason TransportDisconnectReason callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkPlayer, TransportDisconnectReason) public virtual void Invoke(NetworkSandbox sandbox, NetworkPlayer player, TransportDisconnectReason transportDisconnectReason) Parameters sandbox NetworkSandbox player NetworkPlayer transportDisconnectReason TransportDisconnectReason"
  },
  "api/Netick.Unity.OnSceneLoadStartedDelegate.html": {
    "href": "api/Netick.Unity.OnSceneLoadStartedDelegate.html",
    "title": "Delegate OnSceneLoadStartedDelegate | Netick Networking Engine",
    "summary": "Delegate OnSceneLoadStartedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnSceneLoadStartedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnSceneLoadStartedDelegate(object, IntPtr) public OnSceneLoadStartedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.Unity.OnSceneLoadedDelegate.html": {
    "href": "api/Netick.Unity.OnSceneLoadedDelegate.html",
    "title": "Delegate OnSceneLoadedDelegate | Netick Networking Engine",
    "summary": "Delegate OnSceneLoadedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnSceneLoadedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnSceneLoadedDelegate(object, IntPtr) public OnSceneLoadedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.Unity.OnSceneOperationDelegate.html": {
    "href": "api/Netick.Unity.OnSceneOperationDelegate.html",
    "title": "Delegate OnSceneOperationDelegate | Netick Networking Engine",
    "summary": "Delegate OnSceneOperationDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnSceneOperationDelegate(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) Parameters sandbox NetworkSandbox sceneOperation NetworkSceneOperation Constructors OnSceneOperationDelegate(object, IntPtr) public OnSceneOperationDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, NetworkSceneOperation, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox sceneOperation NetworkSceneOperation callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox, NetworkSceneOperation) public virtual void Invoke(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) Parameters sandbox NetworkSandbox sceneOperation NetworkSceneOperation"
  },
  "api/Netick.Unity.OnShutdownDelegate.html": {
    "href": "api/Netick.Unity.OnShutdownDelegate.html",
    "title": "Delegate OnShutdownDelegate | Netick Networking Engine",
    "summary": "Delegate OnShutdownDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnShutdownDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnShutdownDelegate(object, IntPtr) public OnShutdownDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.Unity.OnStartupDelegate.html": {
    "href": "api/Netick.Unity.OnStartupDelegate.html",
    "title": "Delegate OnStartupDelegate | Netick Networking Engine",
    "summary": "Delegate OnStartupDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnStartupDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnStartupDelegate(object, IntPtr) public OnStartupDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.Unity.OnVisibilityChangedDelegate.html": {
    "href": "api/Netick.Unity.OnVisibilityChangedDelegate.html",
    "title": "Delegate OnVisibilityChangedDelegate | Netick Networking Engine",
    "summary": "Delegate OnVisibilityChangedDelegate Namespace Netick.Unity Assembly Netick.Unity.dll public delegate void OnVisibilityChangedDelegate(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox Constructors OnVisibilityChangedDelegate(object, IntPtr) public OnVisibilityChangedDelegate(object @object, IntPtr method) Parameters object object method IntPtr Methods BeginInvoke(NetworkSandbox, AsyncCallback, object) public virtual IAsyncResult BeginInvoke(NetworkSandbox sandbox, AsyncCallback callback, object @object) Parameters sandbox NetworkSandbox callback AsyncCallback object object Returns IAsyncResult EndInvoke(IAsyncResult) public virtual void EndInvoke(IAsyncResult result) Parameters result IAsyncResult Invoke(NetworkSandbox) public virtual void Invoke(NetworkSandbox sandbox) Parameters sandbox NetworkSandbox"
  },
  "api/Netick.Unity.PhysicsSimulationStep.html": {
    "href": "api/Netick.Unity.PhysicsSimulationStep.html",
    "title": "Class PhysicsSimulationStep | Netick Networking Engine",
    "summary": "Class PhysicsSimulationStep Namespace Netick.Unity Assembly Netick.Unity.dll [ExecutionOrder(1000)] public sealed class PhysicsSimulationStep : NetickCoreComponent, INetickNetworkScript, INetickScript Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour NetworkBehaviour NetickCoreComponent PhysicsSimulationStep Implements INetickNetworkScript INetickScript Inherited Members NetworkBehaviour.S NetworkBehaviour.GetRef<T>() NetworkBehaviour.CopyStateTo(byte*) NetworkBehaviour.SetStateFrom(byte*) NetworkBehaviour.FetchInput<T>(out T, int) NetworkBehaviour.FetchInput<T>(out T, out bool, int) NetworkBehaviour.FindInterpolator(string) NetworkBehaviour.GameEngineIntoNetcode() NetworkBehaviour.NetcodeIntoGameEngine() NetworkBehaviour.OnBecameInterested() NetworkBehaviour.OnBecameUninterested() NetworkBehaviour.OnInputSourceChanged(NetworkPlayer) NetworkBehaviour.OnInputSourceLeft() NetworkBehaviour.OnSpawnPredictionSucceeded() NetworkBehaviour.NetworkAwake() NetworkBehaviour.NetworkReset() NetworkBehaviour.InternalInit() NetworkBehaviour.InternalReset() NetworkBehaviour.InternalGetStateSizeWords() NetworkBehaviour.BehaviourId NetworkBehaviour.Id NetworkBehaviour.IsClient NetworkBehaviour.IsServer NetworkBehaviour.IsOwner NetworkBehaviour.IsInputSource NetworkBehaviour.IsProxy NetworkBehaviour.IsResimulating NetworkBehaviour.IsPredicted NetworkBehaviour.InputSource NetworkBehaviour.InputSourcePlayerId NetworkBehaviour.StateSize NetickBehaviour.NetworkStart() NetickBehaviour.NetworkDestroy() NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Methods NetworkFixedUpdate() Called every fixed-time network step. Any changes to the networked state should happen here. On the client, if you are the Input Source or if this Object.PredictionMode is set to Everyone, it will be called several times in one update/tick during resimulations. To check for resimulations, use [IsResimulating]. public override void NetworkFixedUpdate()"
  },
  "api/Netick.Unity.PhysicsType.html": {
    "href": "api/Netick.Unity.PhysicsType.html",
    "title": "Enum PhysicsType | Netick Networking Engine",
    "summary": "Enum PhysicsType Namespace Netick.Unity Assembly Netick.Unity.dll public enum PhysicsType Fields None = 0 Physics2D = 2 Physics3D = 1"
  },
  "api/Netick.Unity.Pro.HitShape.html": {
    "href": "api/Netick.Unity.Pro.HitShape.html",
    "title": "Class HitShape | Netick Networking Engine",
    "summary": "Class HitShape Namespace Netick.Unity.Pro Assembly Netick.Unity.Pro.dll [AddComponentMenu(\"Netick/HitShape\")] public class HitShape : MonoBehaviour, IHitShape Inheritance object Object Component Behaviour MonoBehaviour HitShape Implements IHitShape Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HitShape() public HitShape() Fields Center public Vector3 Center Field Value Vector3 Radius public float Radius Field Value float Shape public HitShapeType Shape Field Value HitShapeType Size public Vector3 Size Field Value Vector3 Properties Container public HitShapeContainer Container { get; } Property Value HitShapeContainer Index public int Index { get; } Property Value int LagCompShape public LagCompShape LagCompShape { get; } Property Value LagCompShape Sandbox public NetworkSandbox Sandbox { get; } Property Value NetworkSandbox"
  },
  "api/Netick.Unity.Pro.HitShapeContainer.html": {
    "href": "api/Netick.Unity.Pro.HitShapeContainer.html",
    "title": "Class HitShapeContainer | Netick Networking Engine",
    "summary": "Class HitShapeContainer Namespace Netick.Unity.Pro Assembly Netick.Unity.Pro.dll [AddComponentMenu(\"Netick/HitShape Container\")] [DisallowMultipleComponent] public class HitShapeContainer : NetickBehaviour, INetickScript, IHitShapeContainer Inheritance object Object Component Behaviour MonoBehaviour NetickBaseBehaviour NetickBehaviour HitShapeContainer Implements INetickScript IHitShapeContainer Inherited Members NetickBehaviour.NetworkUpdate() NetickBehaviour.NetworkFixedUpdate() NetickBehaviour.NetworkRender() NetickBehaviour.OnBecameSimulated() NetickBehaviour.OnBecameUnsimulated() NetickBehaviour.Sandbox NetickBehaviour.Object NetickBehaviour.Entity NetickBehaviour.Engine MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors HitShapeContainer() public HitShapeContainer() Fields BoundsSize public Vector3 BoundsSize Field Value Vector3 HitShapes public List<HitShape> HitShapes Field Value List<HitShape> RecalculateBounds public bool RecalculateBounds Field Value bool Properties LagCompContainer public LagCompContainer LagCompContainer { get; } Property Value LagCompContainer Methods NetworkDestroy() Called when this behaviour has been removed from the simulation. public override void NetworkDestroy() NetworkStart() Called when this behaviour has been added to the simulation. public override void NetworkStart()"
  },
  "api/Netick.Unity.Pro.LagCompHit.html": {
    "href": "api/Netick.Unity.Pro.LagCompHit.html",
    "title": "Struct LagCompHit | Netick Networking Engine",
    "summary": "Struct LagCompHit Namespace Netick.Unity.Pro Assembly Netick.Unity.Pro.dll public struct LagCompHit Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Collider public Collider Collider Field Value Collider Distance public float Distance Field Value float GameObject public GameObject GameObject Field Value GameObject HitShape public HitShape HitShape Field Value HitShape Point public Vector3 Point Field Value Vector3 Type public NetHitType Type Field Value NetHitType Properties Transform public Transform Transform { get; } Property Value Transform"
  },
  "api/Netick.Unity.Pro.LagCompHit2D.html": {
    "href": "api/Netick.Unity.Pro.LagCompHit2D.html",
    "title": "Struct LagCompHit2D | Netick Networking Engine",
    "summary": "Struct LagCompHit2D Namespace Netick.Unity.Pro Assembly Netick.Unity.Pro.dll public struct LagCompHit2D Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Collider public Collider2D Collider Field Value Collider2D Distance public float Distance Field Value float GameObject public GameObject GameObject Field Value GameObject HitShape public HitShape HitShape Field Value HitShape Point public Vector2 Point Field Value Vector2 Type public NetHitType Type Field Value NetHitType Properties Transform public Transform Transform { get; } Property Value Transform"
  },
  "api/Netick.Unity.Pro.LagCompUnityUtils.html": {
    "href": "api/Netick.Unity.Pro.LagCompUnityUtils.html",
    "title": "Class LagCompUnityUtils | Netick Networking Engine",
    "summary": "Class LagCompUnityUtils Namespace Netick.Unity.Pro Assembly Netick.Unity.Pro.dll public static class LagCompUnityUtils Inheritance object LagCompUnityUtils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FromNumerics(Quaternion) public static Quaternion FromNumerics(this Quaternion vec) Parameters vec Quaternion Returns Quaternion FromNumerics(Vector3) public static Vector3 FromNumerics(this Vector3 vec) Parameters vec Vector3 Returns Vector3 ToNumerics(Quaternion) public static Quaternion ToNumerics(this Quaternion vec) Parameters vec Quaternion Returns Quaternion ToNumerics(Vector3) public static Vector3 ToNumerics(this Vector3 vec) Parameters vec Vector3 Returns Vector3 ToUnityBounds(NetickBounds) public static Bounds ToUnityBounds(this NetickBounds bounds) Parameters bounds NetickBounds Returns Bounds"
  },
  "api/Netick.Unity.Pro.NetworkSandboxExts.html": {
    "href": "api/Netick.Unity.Pro.NetworkSandboxExts.html",
    "title": "Class NetworkSandboxExts | Netick Networking Engine",
    "summary": "Class NetworkSandboxExts Namespace Netick.Unity.Pro Assembly Netick.Unity.Pro.dll [Preserve] public static class NetworkSandboxExts Inheritance object NetworkSandboxExts Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods FetchHitShapePosAndRot(NetworkSandbox, HitShape, NetworkPlayer, out Vector3, out Quaternion) public static void FetchHitShapePosAndRot(this NetworkSandbox sandbox, HitShape hitShape, NetworkPlayer inputSource, out Vector3 pos, out Quaternion rot) Parameters sandbox NetworkSandbox hitShape HitShape inputSource NetworkPlayer pos Vector3 rot Quaternion OverlapCircle(NetworkSandbox, Vector2, float, List<LagCompHit2D>, NetworkPlayer, int, bool, bool, bool) Performs a lag compensated OverlapCircle which computes and stores HitShapes and Colliders (if includeUnityColliders is equal to true) touching or inside the circle. public static void OverlapCircle(this NetworkSandbox sandbox, Vector2 center, float radius, List<LagCompHit2D> hits, NetworkPlayer inputSource, int layerMask = -5, bool includeUnityColliders = true, bool includeInputSource = false, bool oneHitPerHitShapeContainer = false) Parameters sandbox NetworkSandbox center Vector2 Center of the sphere. radius float Radius of the sphere. hits List<LagCompHit2D> inputSource NetworkPlayer The input source to compensate for. layerMask int A defines which layers of colliders to include in the query. includeUnityColliders bool Choose whether you want to include normal unity colliders, or only Netick HitShapes. includeInputSource bool oneHitPerHitShapeContainer bool Choose whether you want to include only one HitShape per HitShapeContainer OverlapSphere(NetworkSandbox, Vector3, float, List<LagCompHit>, NetworkPlayer, int, QueryTriggerInteraction, bool, bool, bool) Performs a lag compensated OverlapSphere which computes and stores HitShapes and Colliders (if includeUnityColliders is equal to true) touching or inside the sphere. public static void OverlapSphere(this NetworkSandbox sandbox, Vector3 center, float radius, List<LagCompHit> hits, NetworkPlayer inputSource, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal, bool includeUnityColliders = true, bool includeInputSource = false, bool oneHitPerHitShapeContainer = false) Parameters sandbox NetworkSandbox center Vector3 Center of the sphere. radius float Radius of the sphere. hits List<LagCompHit> inputSource NetworkPlayer The input source to compensate for. layerMask int A defines which layers of colliders to include in the query. queryTriggerInteraction QueryTriggerInteraction includeUnityColliders bool Choose whether you want to include normal unity colliders, or only Netick HitShapes. includeInputSource bool oneHitPerHitShapeContainer bool Choose whether you want to include only one HitShape per HitShapeContainer Raycast(NetworkSandbox, Vector3, Vector3, out LagCompHit, NetworkPlayer, float, int, QueryTriggerInteraction, bool, bool) Casts a lag compensated ray, from point origin, in direction direction, of length maxDistance, against all HitShapes and Colliders (if includeUnityColliders is equal to true) in the Scene. public static bool Raycast(this NetworkSandbox sandbox, Vector3 origin, Vector3 direction, out LagCompHit hitData, NetworkPlayer inputSource, float maxDistance = Infinity, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal, bool includeUnityColliders = true, bool includeInputSource = false) Parameters sandbox NetworkSandbox origin Vector3 The starting point of the ray in world coordinates. direction Vector3 The direction of the ray. hitData LagCompHit inputSource NetworkPlayer The input source to compensate for. maxDistance float The max distance the ray should check for collisions. layerMask int A that is used to selectively ignore Colliders when casting a ray. queryTriggerInteraction QueryTriggerInteraction includeUnityColliders bool Choose whether you want to include normal unity colliders, or only Netick HitShapes. includeInputSource bool Returns bool Returns true if the ray intersects with a Collider/HitShape, otherwise false. Raycast2D(NetworkSandbox, Vector2, Vector2, out LagCompHit2D, NetworkPlayer, float, int, bool, bool) Casts a lag compensated ray, from point origin, in direction direction, of length maxDistance, against all HitShapes and Colliders (if includeUnityColliders is equal to true) in the Scene. public static bool Raycast2D(this NetworkSandbox sandbox, Vector2 origin, Vector2 direction, out LagCompHit2D hitData, NetworkPlayer inputSource, float maxDistance = Infinity, int layerMask = -5, bool includeUnityColliders = true, bool includeInputSource = false) Parameters sandbox NetworkSandbox origin Vector2 The starting point of the ray in world coordinates. direction Vector2 The direction of the ray. hitData LagCompHit2D inputSource NetworkPlayer The input source to compensate for. maxDistance float The max distance the ray should check for collisions. layerMask int A that is used to selectively ignore Colliders when casting a ray. includeUnityColliders bool Choose whether you want to include normal unity colliders, or only Netick HitShapes. includeInputSource bool Returns bool Returns true if the ray intersects with a Collider/HitShape, otherwise false. RaycastAll(NetworkSandbox, Vector3, Vector3, List<LagCompHit>, NetworkPlayer, float, int, QueryTriggerInteraction, bool, bool, bool) Casts a lag compensated ray, from point origin, in direction direction, of length maxDistance, against all HitShapes and Colliders (if includeUnityColliders is equal to true) in the Scene, and returns all the hits. public static void RaycastAll(this NetworkSandbox sandbox, Vector3 origin, Vector3 direction, List<LagCompHit> hits, NetworkPlayer inputSource, float maxDistance = Infinity, int layerMask = -5, QueryTriggerInteraction queryTriggerInteraction = QueryTriggerInteraction.UseGlobal, bool includeUnityColliders = true, bool includeInputSource = false, bool oneHitPerHitShapeContainer = false) Parameters sandbox NetworkSandbox origin Vector3 The starting point of the ray in world coordinates. direction Vector3 The direction of the ray. hits List<LagCompHit> inputSource NetworkPlayer The input source to compensate for. maxDistance float The max distance the ray should check for collisions. layerMask int A that is used to selectively ignore Colliders when casting a ray. queryTriggerInteraction QueryTriggerInteraction includeUnityColliders bool includeInputSource bool oneHitPerHitShapeContainer bool RaycastAll2D(NetworkSandbox, Vector2, Vector2, List<LagCompHit2D>, NetworkPlayer, float, int, bool, bool, bool) Casts a lag compensated ray, from point origin, in direction direction, of length maxDistance, against all HitShapes and Colliders (if includeUnityColliders is equal to true) in the Scene, and returns all the hits. public static void RaycastAll2D(this NetworkSandbox sandbox, Vector2 origin, Vector2 direction, List<LagCompHit2D> hits, NetworkPlayer inputSource, float maxDistance = Infinity, int layerMask = -5, bool includeUnityColliders = true, bool includeInputSource = false, bool oneHitPerHitShapeContainer = false) Parameters sandbox NetworkSandbox origin Vector2 The starting point of the ray in world coordinates. direction Vector2 The direction of the ray. hits List<LagCompHit2D> inputSource NetworkPlayer The input source to compensate for. maxDistance float The max distance the ray should check for collisions. layerMask int A that is used to selectively ignore Colliders when casting a ray. includeUnityColliders bool includeInputSource bool oneHitPerHitShapeContainer bool"
  },
  "api/Netick.Unity.Pro.html": {
    "href": "api/Netick.Unity.Pro.html",
    "title": "Namespace Netick.Unity.Pro | Netick Networking Engine",
    "summary": "Namespace Netick.Unity.Pro Classes HitShape HitShapeContainer NetworkSandboxExts Structs LagCompHit LagCompHit2D"
  },
  "api/Netick.Unity.ProfilerIMGUI.html": {
    "href": "api/Netick.Unity.ProfilerIMGUI.html",
    "title": "Class ProfilerIMGUI | Netick Networking Engine",
    "summary": "Class ProfilerIMGUI Namespace Netick.Unity Assembly Netick.Unity.dll public class ProfilerIMGUI Inheritance object ProfilerIMGUI Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProfilerIMGUI() public ProfilerIMGUI() Methods DrawFloatStats(string, FloatStats, Color?) public void DrawFloatStats(string title, FloatStats value, Color? c = null) Parameters title string value FloatStats c Color? DrawText(string, Color?) public void DrawText(string text, Color? c = null) Parameters text string c Color? End() public void End() Start(int) public void Start(int startOffset = 1) Parameters startOffset int Update(float) public void Update(float updateValue) Parameters updateValue float"
  },
  "api/Netick.Unity.ProfilerManager.html": {
    "href": "api/Netick.Unity.ProfilerManager.html",
    "title": "Class ProfilerManager | Netick Networking Engine",
    "summary": "Class ProfilerManager Namespace Netick.Unity Assembly Netick.Unity.dll public class ProfilerManager : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour ProfilerManager Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsOfType<T>(bool) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, bool) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors ProfilerManager() public ProfilerManager() Fields Instance public static ProfilerManager Instance Field Value ProfilerManager _profilerList public static List<NetcodeProfiler> _profilerList Field Value List<NetcodeProfiler> Methods AddProfiler(NetcodeProfiler) public void AddProfiler(NetcodeProfiler profiler) Parameters profiler NetcodeProfiler OnGUI() public void OnGUI()"
  },
  "api/Netick.Unity.QuaternionErrorCorrector.html": {
    "href": "api/Netick.Unity.QuaternionErrorCorrector.html",
    "title": "Struct QuaternionErrorCorrector | Netick Networking Engine",
    "summary": "Struct QuaternionErrorCorrector Namespace Netick.Unity Assembly Netick.Unity.dll public struct QuaternionErrorCorrector Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentValue public Quaternion CurrentValue Field Value Quaternion Error public float Error Field Value float PreRollbackValue public Quaternion PreRollbackValue Field Value Quaternion Methods Init(Quaternion) public void Init(Quaternion val) Parameters val Quaternion OnPostResimulation(Quaternion) public void OnPostResimulation(Quaternion currentValue) Parameters currentValue Quaternion OnPreRollback(Quaternion) public void OnPreRollback(Quaternion val) Parameters val Quaternion Render(Quaternion, float, float, float, float, float) public Quaternion Render(Quaternion interpolatedValue, float correctionMultiplier, float interpolationMultiplier, float correctionMaxBlendAlpha, float teleportThreshold, float deltaTime) Parameters interpolatedValue Quaternion correctionMultiplier float interpolationMultiplier float correctionMaxBlendAlpha float teleportThreshold float deltaTime float Returns Quaternion"
  },
  "api/Netick.Unity.ResetOnSceneSwitch.html": {
    "href": "api/Netick.Unity.ResetOnSceneSwitch.html",
    "title": "Interface ResetOnSceneSwitch | Netick Networking Engine",
    "summary": "Interface ResetOnSceneSwitch Namespace Netick.Unity Assembly Netick.Unity.dll public interface ResetOnSceneSwitch Methods OnSceneSwitchStart() void OnSceneSwitchStart()"
  },
  "api/Netick.Unity.SimulatedPeer.html": {
    "href": "api/Netick.Unity.SimulatedPeer.html",
    "title": "Class SimulatedPeer | Netick Networking Engine",
    "summary": "Class SimulatedPeer Namespace Netick.Unity Assembly Netick.Unity.dll public class SimulatedPeer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SimulatedPeer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsOfType<T>(bool) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindObjectOfType(Type, bool) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors SimulatedPeer() public SimulatedPeer() Fields DumbClient public bool DumbClient Field Value bool IsClient public bool IsClient Field Value bool Peer public Client Peer Field Value Client"
  },
  "api/Netick.Unity.SingleInstanceEnforcer.html": {
    "href": "api/Netick.Unity.SingleInstanceEnforcer.html",
    "title": "Class SingleInstanceEnforcer | Netick Networking Engine",
    "summary": "Class SingleInstanceEnforcer Namespace Netick.Unity Assembly Netick.Unity.dll Add this component to a GameObject to ensure only a single instance of it will exist at the same time, across all sandboxes. [AddComponentMenu(\"Netick/Single Instance Enforcer\")] [DisallowMultipleComponent] public class SingleInstanceEnforcer : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour SingleInstanceEnforcer Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors SingleInstanceEnforcer() public SingleInstanceEnforcer()"
  },
  "api/Netick.Unity.StartMode.html": {
    "href": "api/Netick.Unity.StartMode.html",
    "title": "Enum StartMode | Netick Networking Engine",
    "summary": "Enum StartMode Namespace Netick.Unity Assembly Netick.Unity.dll public enum StartMode Fields Client = 1 Host = 2 MultiplePeers = 4 Server = 0 SinglePlayer = 3"
  },
  "api/Netick.Unity.StructExample.html": {
    "href": "api/Netick.Unity.StructExample.html",
    "title": "Struct StructExample | Netick Networking Engine",
    "summary": "Struct StructExample Namespace Netick.Unity Assembly Netick.Unity.dll public struct StructExample Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields A1 public int A1 Field Value int A2 public int A2 Field Value int A3 public int A3 Field Value int"
  },
  "api/Netick.Unity.TrackedRigidbody2D.html": {
    "href": "api/Netick.Unity.TrackedRigidbody2D.html",
    "title": "Class TrackedRigidbody2D | Netick Networking Engine",
    "summary": "Class TrackedRigidbody2D Namespace Netick.Unity Assembly Netick.Unity.dll public class TrackedRigidbody2D : TrackedRigidbodyBase Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase TrackedRigidbody2D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbody2D() public TrackedRigidbody2D() Properties IsKinematic public override bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public override void DestroyForNetick()"
  },
  "api/Netick.Unity.TrackedRigidbody3D.html": {
    "href": "api/Netick.Unity.TrackedRigidbody3D.html",
    "title": "Class TrackedRigidbody3D | Netick Networking Engine",
    "summary": "Class TrackedRigidbody3D Namespace Netick.Unity Assembly Netick.Unity.dll public class TrackedRigidbody3D : TrackedRigidbodyBase Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase TrackedRigidbody3D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbody3D() public TrackedRigidbody3D() Properties IsKinematic public override bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public override void DestroyForNetick()"
  },
  "api/Netick.Unity.TrackedRigidbodyBase.html": {
    "href": "api/Netick.Unity.TrackedRigidbodyBase.html",
    "title": "Class TrackedRigidbodyBase | Netick Networking Engine",
    "summary": "Class TrackedRigidbodyBase Namespace Netick.Unity Assembly Netick.Unity.dll public abstract class TrackedRigidbodyBase : MonoBehaviour Inheritance object Object Component Behaviour MonoBehaviour TrackedRigidbodyBase Derived TrackedRigidbody2D TrackedRigidbody3D Inherited Members MonoBehaviour.IsInvoking() MonoBehaviour.CancelInvoke() MonoBehaviour.Invoke(string, float) MonoBehaviour.InvokeRepeating(string, float, float) MonoBehaviour.CancelInvoke(string) MonoBehaviour.IsInvoking(string) MonoBehaviour.StartCoroutine(string) MonoBehaviour.StartCoroutine(string, object) MonoBehaviour.StartCoroutine(IEnumerator) MonoBehaviour.StartCoroutine_Auto(IEnumerator) MonoBehaviour.StopCoroutine(IEnumerator) MonoBehaviour.StopCoroutine(Coroutine) MonoBehaviour.StopCoroutine(string) MonoBehaviour.StopAllCoroutines() MonoBehaviour.print(object) MonoBehaviour.destroyCancellationToken MonoBehaviour.useGUILayout MonoBehaviour.runInEditMode Behaviour.enabled Behaviour.isActiveAndEnabled Component.GetComponent(Type) Component.GetComponent<T>() Component.TryGetComponent(Type, out Component) Component.TryGetComponent<T>(out T) Component.GetComponent(string) Component.GetComponentInChildren(Type, bool) Component.GetComponentInChildren(Type) Component.GetComponentInChildren<T>(bool) Component.GetComponentInChildren<T>() Component.GetComponentsInChildren(Type, bool) Component.GetComponentsInChildren(Type) Component.GetComponentsInChildren<T>(bool) Component.GetComponentsInChildren<T>(bool, List<T>) Component.GetComponentsInChildren<T>() Component.GetComponentsInChildren<T>(List<T>) Component.GetComponentInParent(Type, bool) Component.GetComponentInParent(Type) Component.GetComponentInParent<T>(bool) Component.GetComponentInParent<T>() Component.GetComponentsInParent(Type, bool) Component.GetComponentsInParent(Type) Component.GetComponentsInParent<T>(bool) Component.GetComponentsInParent<T>(bool, List<T>) Component.GetComponentsInParent<T>() Component.GetComponents(Type) Component.GetComponents(Type, List<Component>) Component.GetComponents<T>(List<T>) Component.GetComponents<T>() Component.CompareTag(string) Component.SendMessageUpwards(string, object, SendMessageOptions) Component.SendMessageUpwards(string, object) Component.SendMessageUpwards(string) Component.SendMessageUpwards(string, SendMessageOptions) Component.SendMessage(string, object) Component.SendMessage(string) Component.SendMessage(string, object, SendMessageOptions) Component.SendMessage(string, SendMessageOptions) Component.BroadcastMessage(string, object, SendMessageOptions) Component.BroadcastMessage(string, object) Component.BroadcastMessage(string) Component.BroadcastMessage(string, SendMessageOptions) Component.transform Component.gameObject Component.tag Object.GetInstanceID() Object.GetHashCode() Object.Equals(object) Object.Instantiate(Object, Vector3, Quaternion) Object.Instantiate(Object, Vector3, Quaternion, Transform) Object.Instantiate(Object) Object.Instantiate(Object, Transform) Object.Instantiate(Object, Transform, bool) Object.Instantiate<T>(T) Object.Instantiate<T>(T, Vector3, Quaternion) Object.Instantiate<T>(T, Vector3, Quaternion, Transform) Object.Instantiate<T>(T, Transform) Object.Instantiate<T>(T, Transform, bool) Object.Destroy(Object, float) Object.Destroy(Object) Object.DestroyImmediate(Object, bool) Object.DestroyImmediate(Object) Object.FindObjectsOfType(Type) Object.FindObjectsOfType(Type, bool) Object.FindObjectsByType(Type, FindObjectsSortMode) Object.FindObjectsByType(Type, FindObjectsInactive, FindObjectsSortMode) Object.DontDestroyOnLoad(Object) Object.DestroyObject(Object, float) Object.DestroyObject(Object) Object.FindSceneObjectsOfType(Type) Object.FindObjectsOfTypeIncludingAssets(Type) Object.FindObjectsOfType<T>() Object.FindObjectsByType<T>(FindObjectsSortMode) Object.FindObjectsOfType<T>(bool) Object.FindObjectsByType<T>(FindObjectsInactive, FindObjectsSortMode) Object.FindObjectOfType<T>() Object.FindObjectOfType<T>(bool) Object.FindFirstObjectByType<T>() Object.FindAnyObjectByType<T>() Object.FindFirstObjectByType<T>(FindObjectsInactive) Object.FindAnyObjectByType<T>(FindObjectsInactive) Object.FindObjectsOfTypeAll(Type) Object.FindObjectOfType(Type) Object.FindFirstObjectByType(Type) Object.FindAnyObjectByType(Type) Object.FindObjectOfType(Type, bool) Object.FindFirstObjectByType(Type, FindObjectsInactive) Object.FindAnyObjectByType(Type, FindObjectsInactive) Object.ToString() Object.name Object.hideFlags object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ComponentExtensions.SetEnabled(Component, NetworkSandbox, bool) Constructors TrackedRigidbodyBase() protected TrackedRigidbodyBase() Properties IsKinematic public abstract bool IsKinematic { get; } Property Value bool Methods DestroyForNetick() public abstract void DestroyForNetick()"
  },
  "api/Netick.Unity.TransformErrorCorrector.html": {
    "href": "api/Netick.Unity.TransformErrorCorrector.html",
    "title": "Struct TransformErrorCorrector | Netick Networking Engine",
    "summary": "Struct TransformErrorCorrector Namespace Netick.Unity Assembly Netick.Unity.dll public struct TransformErrorCorrector Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields Error public float Error Field Value float PosCurrentValue public Vector3 PosCurrentValue Field Value Vector3 PosPreRollbackValue public Vector3 PosPreRollbackValue Field Value Vector3 RotCurrentValue public Quaternion RotCurrentValue Field Value Quaternion RotPreRollbackValue public Quaternion RotPreRollbackValue Field Value Quaternion Methods Init(Vector3, Quaternion) public void Init(Vector3 posVal, Quaternion rotVal) Parameters posVal Vector3 rotVal Quaternion OnPostResimulation(Vector3, Quaternion, bool, bool) public void OnPostResimulation(Vector3 posCurrentValue, Quaternion rotCurrentValue, bool calcPositionalError, bool calcRotationError) Parameters posCurrentValue Vector3 rotCurrentValue Quaternion calcPositionalError bool calcRotationError bool OnPreRollback(Vector3, Quaternion) public void OnPreRollback(Vector3 posVal, Quaternion rotVal) Parameters posVal Vector3 rotVal Quaternion Render(ref Vector3, ref Quaternion, float, float, float, float, float) public void Render(ref Vector3 posInterpolatedValue, ref Quaternion rotInterpolationValue, float correctionMultiplier, float interpolationMultiplier, float correctionMaxBlendAlpha, float teleportThreshold, float deltaTime) Parameters posInterpolatedValue Vector3 rotInterpolationValue Quaternion correctionMultiplier float interpolationMultiplier float correctionMaxBlendAlpha float teleportThreshold float deltaTime float"
  },
  "api/Netick.Unity.TransformSpace.html": {
    "href": "api/Netick.Unity.TransformSpace.html",
    "title": "Enum TransformSpace | Netick Networking Engine",
    "summary": "Enum TransformSpace Namespace Netick.Unity Assembly Netick.Unity.dll public enum TransformSpace Fields Local = 0 World = 1"
  },
  "api/Netick.Unity.Vector3ErrorCorrector.html": {
    "href": "api/Netick.Unity.Vector3ErrorCorrector.html",
    "title": "Struct Vector3ErrorCorrector | Netick Networking Engine",
    "summary": "Struct Vector3ErrorCorrector Namespace Netick.Unity Assembly Netick.Unity.dll public struct Vector3ErrorCorrector Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Fields CurrentValue public Vector3 CurrentValue Field Value Vector3 Error public float Error Field Value float PreRollbackValue public Vector3 PreRollbackValue Field Value Vector3 Methods Init(Vector3) public void Init(Vector3 val) Parameters val Vector3 OnPostResimulation(Vector3) public void OnPostResimulation(Vector3 currentValue) Parameters currentValue Vector3 OnPreRollback(Vector3) public void OnPreRollback(Vector3 val) Parameters val Vector3 Render(Vector3, float, float, float, float, float) public Vector3 Render(Vector3 interpolatedValue, float correctionMultiplier, float interpolationMultiplier, float correctionMaxBlendAlpha, float teleportThreshold, float deltaTime) Parameters interpolatedValue Vector3 correctionMultiplier float interpolationMultiplier float correctionMaxBlendAlpha float teleportThreshold float deltaTime float Returns Vector3"
  },
  "api/Netick.Unity.html": {
    "href": "api/Netick.Unity.html",
    "title": "Namespace Netick.Unity | Netick Networking Engine",
    "summary": "Namespace Netick.Unity Classes ComponentExtensions GridRenderer NetickBaseBehaviour NetickBehaviour NetickCallbacks NetickConfig Config class for Netick. NetickCoreComponent NetickUnityExt NetickUnityUtils Network Manages Netick and its sandboxes, and is used to start and shut down Netick. NetworkAnimator This component is used to replicate Unity's Animator parameters and states. NetworkArray NetworkArray<T> A networked array. NetworkBehaviour NetworkEvents NetworkEvents.OnClientConnectedEvent NetworkEvents.OnClientDisconnectedEvent NetworkEvents.OnConnectFailedEvent NetworkEvents.OnConnectRequestEvent NetworkEvents.OnConnectedToServerEvent NetworkEvents.OnDisconnectedFromServerEvent NetworkEvents.OnInputEvent NetworkEvents.OnMatchCreatedEvent NetworkEvents.OnMatchListUpdateEvent NetworkEvents.OnObjectCreatedEvent NetworkEvents.OnObjectDestroyedEvent NetworkEvents.OnSceneLoadStartedEvent NetworkEvents.OnSceneLoadedEvent NetworkEvents.OnShutdownEvent NetworkEvents.OnStartupEvent NetworkEventsListener NetworkObject Any GameObject which needs to be synced/replicated must have a Network Object component. It’s the component that tells Netick a GameObject is networked. Although not every child GameObject needs it, only the root has to have a Network Object. NetworkPlayerExtensions NetworkRigidbody This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody must be used if you want to have client-side prediction over PhysX objects since it replicates several other properties necessary for correct prediction. NetworkRigidbody2D This component is used to replicate the position and rotation of an object. Therefore, it’s the same as the Network Transform, the difference is that Network Rigidbody 2D must be used if you want to have client-side prediction over Box2D objects since it replicates several other properties necessary for correct prediction. NetworkSandbox NetworkSceneManager NetworkTimerExt NetworkTransform NetworkTransportProvider PhysicsSimulationStep ProfilerIMGUI SingleInstanceEnforcer Add this component to a GameObject to ensure only a single instance of it will exist at the same time, across all sandboxes. TrackedRigidbody2D TrackedRigidbody3D TrackedRigidbodyBase Structs LaunchData Network.LaunchResults NetworkBehaviourRef<T> NetworkObjectRef NetworkSceneOperation QuaternionErrorCorrector TransformErrorCorrector Vector3ErrorCorrector Interfaces IPhysicsComponent Enums NetworkAnimator.NetworkAnimatorRepConditions NetworkRenderInvokeOrder NetworkTransformRepConditions PhysicsType StartMode TransformSpace Delegates OnClientConnectedDelegate OnClientDisconnectedDelegate OnConnectFailedDelegate OnConnectRequestDelegate OnConnectedToServerDelegate OnDataReceivedDelegate OnDisconnectedFromServerDelegate OnEntityDestroyedDelegate OnInputReadDelegate OnMatchCreatedDelegate OnMatchListUpdateDelegate OnObjectCreatedDelegate OnPlayerConnectedDelegate OnPlayerDisconnectedDelegate OnSceneLoadStartedDelegate OnSceneLoadedDelegate OnSceneOperationDelegate OnShutdownDelegate OnStartupDelegate OnVisibilityChangedDelegate"
  },
  "api/Netick.Utils.html": {
    "href": "api/Netick.Utils.html",
    "title": "Class Utils | Netick Networking Engine",
    "summary": "Class Utils Namespace Netick Assembly Netick.dll public static class Utils Inheritance object Utils Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Ceiling(int) public static int Ceiling(int v) Parameters v int Returns int Clamp01(float) public static float Clamp01(float a) Parameters a float Returns float GetAllSubclassOf(Type) public static List<Type> GetAllSubclassOf(Type parent) Parameters parent Type Returns List<Type> GetMethodName(MethodInfo) public static string GetMethodName(MethodInfo method) Parameters method MethodInfo Returns string GetStableHashCode(string) public static int GetStableHashCode(this string str) Parameters str string Returns int GetWordSize(int) public static int GetWordSize(int byteSize) Parameters byteSize int Returns int Lerp(float, float, float) public static float Lerp(float a, float b, float t) Parameters a float b float t float Returns float LoadStringFromPtr(StringBuilder, int*, int) public static string LoadStringFromPtr(StringBuilder cache, int* ptr, int charCount) Parameters cache StringBuilder ptr int* charCount int Returns string PowerOfTwo(int) public static int PowerOfTwo(int depth) Parameters depth int Returns int SetPtrString(INetickNetworkScript, string, int*, int) public static void SetPtrString(INetickNetworkScript beh, string newVal, int* ptr, int charCount) Parameters beh INetickNetworkScript newVal string ptr int* charCount int"
  },
  "api/Netick.html": {
    "href": "api/Netick.html",
    "title": "Namespace Netick | Netick Networking Engine",
    "summary": "Namespace Netick Classes AdaptiveRemoteInterpolation BadPacketException BitBuffer Client ClientConnection ClientData ClientSimulation Connection ConsoleLogger CustomizableSocketTransport DataAccumulator DefaultAllocator DoubleStats Entity ExecuteAfterAttribute ExecuteBeforeAttribute ExecutionList ExecutionListLL ExecutionOrderAttribute FloatStats IPEndPointExt IgnoreCodeGen InterestManagement InterestManagementGroup InternalNetworkRpcSize Interpolation A class representing an abstract interpolation interface, which is implemented by RemoteInterpolation and LocalInterpolation LocalInterpolation A class representing the local interpolation of this instance NetickEngine. This should be used whenever you want to use Predicted Timeline on the client. MemoryAllocation Monitor NativeUDPSocket NetcodeProfiler NetickAllocator NetickArrayExt NetickEndPoint NetickEngine NetickLogger NetickTransport NetickTransportConnection NetickUniqueObjectMeta NetickUtils NetworkBoolExt NetworkChannel NetworkConnection NetworkConnectionRequest NetworkDictionary NetworkDictionary<TKey, TValue> A networked Dictionary<TKey, TValue> collection. NetworkHashSet NetworkHashSet<T> A networked HashSet<T> collection. NetworkLinkedList NetworkLinkedList<T> A networked linked list collection. This is an ordered list meaning that the elements insertion order is maintained when iterating through the collection. NetworkPeer NetworkPlayer Represents a network player, which can be either a local player (representing this sandbox) or a remote connection (representing a connected client)). NetworkQueue NetworkQueue<T> A networked Queue<T> collection. NetworkRpc NetworkStack NetworkStack<T> A networked Stack<T> collection. NetworkTransport NetworkUnorderedList NetworkUnorderedList<T> A networked list collection. This is an unordered list meaning that the order of the elements during iteration is undefined. Networked NotClientException NotServerException OnChanged Use this attribute on a method you want to call when a specific property value changes. Example: [OnChanged(nameof(PropertyName)] ReflectionData RemoteInterpolation A class representing the remote interpolation of this instance NetickEngine. This should be used whenever you want to use Remote Timeline on the client. Rpc Use this attribute on any method you want to make an RPC. Should have the return type of void, and not be static. * Use the parameter \"source\" to specify who is allowed to send this RPC. * Use the parameter \"target\" to specify who is allowed to receive and execute this RPC. * Use the parameter \"isReliable\" to specify if this Rpc should be reliable or not, meaning it won't be lost (due to packet loss). * Use the parameter \"localInvoke\" to specify if this Rpc should be executed on the machine it was called from. Server ServerConnection ServerSimulation Simulation SimulationClock SimulationInput Smooth TransportConnection Structs AoIQuery ClientReplicatorData FixedSize128<T> FixedSize16<T> FixedSize256<T> FixedSize32<T> FixedSize4<T> FixedSize512<T> FixedSize64<T> FixedSize8<T> Interpolator A struct that is used to obtain interpolation data for a network property. NetickAllocator.MemoryPool NetickBounds NetickConfigData NetickEntityMeta NetickVector2Int NetickVector3Int NetworkArrayStruct16<T> NetworkArrayStruct32<T> NetworkArrayStruct4<T> NetworkArrayStruct64<T> NetworkArrayStruct8<T> NetworkBool NetworkDictionarySnapshot<TKey, TValue> A snapshot of the state of a NetworkDictionary<TKey, TValue> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. NetworkHashSetSnapshot<T> A snapshot of the state of a NetworkHashSet<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. NetworkLinkedListSnapshot<T> A snapshot of the state of a NetworkLinkedList<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. NetworkQueueSnapshot<T> A snapshot of the state of a NetworkQueue<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. NetworkStackSnapshot<T> A snapshot of the state of a NetworkStack<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. NetworkString128 NetworkString16 NetworkString256 NetworkString32 NetworkString64 NetworkString8 NetworkTimer NetworkUnorderedListSnapshot<T> A snapshot of the state of a NetworkUnorderedList<T> collection. Note this must not be used outside the scope of an OnChanged call or a NetworkRender call. OnChangedData OnChangedMethod Session SmoothMetaData SpawnPredictionKey Tick Interfaces IClientSimulationCallbacks IEndPoint IGameEngine IMemoryAllocator INetickComponent INetickEntity INetickLogger INetickNetworkScript A network scripts which can have networked properties and rpcs. INetickScript A script which can be added to Netick internal simulation loop. INetickSocket INetworkCollection INetworkInput Enums BroadPhaseFilter ConnectionFailedReason InterpolationSource NetickStartMode NetworkCollectionMeta Relevancy RpcPeers RunMode TransportDeliveryMethod TransportDisconnectReason Delegates OnChangedEvent OnConnectFailed OnConnectionRequest OnNetworkReceive OnPeerConnected OnPeerDisconnected"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "API Reference for Netick | Netick Networking Engine",
    "summary": "API Reference for Netick This is the API Reference for Netick. Main Classes: Network Network Sandbox Network Object Network Behaviour Network Transport"
  },
  "articles/built-in-components/networkanimator.html": {
    "href": "articles/built-in-components/networkanimator.html",
    "title": "Network Animator | Netick Networking Engine",
    "summary": "Network Animator NetworkAnimator is a built-in component to network the Animator component. It syncs Animator parameters, and optionally the layer state and weights. Settings: Settings: replications settings of the NetworkAnimator . Choose what you want to sync. Interpolation Source: read here for a detailed explanation."
  },
  "articles/built-in-components/networkrigidbody.html": {
    "href": "articles/built-in-components/networkrigidbody.html",
    "title": "Network Rigidbody | Netick Networking Engine",
    "summary": "Network Rigidbody NetworkRigidbody is a built-in component to network the Rigidbody component. It syncs the position and rotation of the Rigidbody, in addition the physical state. Settings: Render Transform: assign here the transform that you want to use to display smoothed movement. Should be a child of this GameObject. Settings: the replications settings of the NetworkTransform. Choose what you want to sync, and whether you want to enable compression for it or not. Interpolation Source: read here for a detailed explanation. Transform Space: the space used when replicating the data. Precision: the precision of the data compression. Teleportation Since Render Transform is always interpolated between two ticks, when you instantly move your object into another position, interpolation would still be active on that object, which is undesirable. To fix this, when you want to instantly move the object and disable interpolation for that duration, you must use the Teleport method: Teleporting Position MyNetworkRigidbody.Teleport(newPosition); Teleporting Rotation MyNetworkRigidbody.Teleport(newRotation); Teleporting Position and Rotation MyNetworkRigidbody.Teleport(newPosition, newRotation);"
  },
  "articles/built-in-components/networkrigidbody2d.html": {
    "href": "articles/built-in-components/networkrigidbody2d.html",
    "title": "Network Rigidbody2D | Netick Networking Engine",
    "summary": "Network Rigidbody2D NetworkRigidbody2D is a built-in component to network the Rigidbody2D component. It syncs the position and rotation of the Rigidbody2D, in addition the physical state. Settings: Render Transform: assign here the transform that you want to use to display smoothed movement. Should be a child of this GameObject. Settings: the replications settings of the NetworkTransform. Choose what you want to sync, and whether you want to enable compression for it or not. Interpolation Source: read here for a detailed explanation. Transform Space: the space used when replicating the data. Precision: the precision of the data compression. Teleportation Since Render Transform is always interpolated between two ticks, when you instantly move your object into another position, interpolation would still be active on that object, which is undesirable. To fix this, when you want to instantly move the object and disable interpolation for that duration, you must use the Teleport method: Teleporting Position MyNetworkRigidbody2D.Teleport(newPosition); Teleporting Rotation MyNetworkRigidbody2D.Teleport(newRotation); Teleporting Position and Rotation MyNetworkRigidbody2D.Teleport(newPosition, newRotation);"
  },
  "articles/built-in-components/networktransform.html": {
    "href": "articles/built-in-components/networktransform.html",
    "title": "Network Transform | Netick Networking Engine",
    "summary": "Network Transform NetworkTransform is a built-in component to network the Transform component. It syncs the position and rotation of the Transform. Settings: Render Transform: assign here the transform that you want to use to display smoothed movement. Should be a child of this GameObject. Settings: the replications settings of the NetworkTransform. Choose what you want to sync, and whether you want to enable compression for it or not. Interpolation Source: read here for a detailed explanation. Transform Space: the space used when replicating the data. Precision: the precision of the data compression. Teleportation Since Render Transform is always interpolated between two ticks, when you instantly move your object into another position, interpolation would still be active on that object, which is undesirable. To fix this, when you want to instantly move the object and disable interpolation for that duration, you must use the Teleport method: Teleporting Position MyNetworkTransform.Teleport(newPosition); Teleporting Rotation MyNetworkTransform.Teleport(newRotation); Teleporting Position and Rotation MyNetworkTransform.Teleport(newPosition, newRotation);"
  },
  "articles/change-callback.html": {
    "href": "articles/change-callback.html",
    "title": "Change Callback | Netick Networking Engine",
    "summary": "Change Callback You can have a method get called whenever a networked variable changes, which is very useful. To do that, add the attribute [OnChanged] to the method and give it the name of the variable. The method must must have a parameter of OnChangedData type which can be used to retrieve the previous variable value. For Properties Example: [Networked] public int Health { get; set; } [OnChanged(nameof(Health))] private void OnHealthChanged(OnChangedData onChangedData) { var previous = onChangedData.GetPreviousValue<int>(); } For Arrays Example: [Networked(size: 32)] public readonly NetworkArray<int> ArrayExample = new NetworkArray<int>(32); [OnChanged(nameof(ArrayExample))] private void OnArrayExampleChanged(OnChangedData onChangedData) { // getting the changed element value directly var changedPreviousElementValue = onChangedData.GetArrayPreviousElementValue<int>(); // or just getting the index var changedPreviousElementIndex = onChangedData.GetArrayChangedElementIndex(); // or maybe getting the previous value of another index we want var someRandomPreviousElementValue = onChangedData.GetArrayPreviousElementValue<int>(13); } For Collections NetworkLinkedList Example: [Networked(size: 32)] public readonly NetworkLinkedList<int> MyNetworkLinkedList = new NetworkArray<int>(32); [OnChanged(nameof(MyNetworkLinkedList))] private void OnMyNetworkLinkedListChanged(OnChangedData onChangedData) { // getting a snapshot of the previous state of the collection var previous = onChangedData.GetPreviousNetworkLinkedList(MyNetworkLinkedList); } NetworkDictionary Example: [Networked(size: 5)] public readonly NetworkDictionary<int, int> MyNetworkDictionary = new NetworkDictionary<int, int>(5); [OnChanged(nameof(MyNetworkDictionary))] private void OnMyNetworkDictionaryChanged(OnChangedData onChangedData) { // getting a snapshot of the previous state of the collection. var previous = onChangedData.GetPreviousNetworkDictionary(MyNetworkDictionary); } NetworkHashSet Example: [Networked(size: 5)] public readonly NetworkHashSet<int> MyNetworkHashSet = new NetworkHashSet<int>(5); [OnChanged(nameof(MyNetworkHashSet))] private void OnMyNetworkHashSetChanged(OnChangedData onChangedData) { // getting a snapshot of the previous state of the collection. var previous = onChangedData.GetPreviousNetworkHashSet(MyNetworkHashSet); } NetworkUnorderedList Example: [Networked(size: 5)] public readonly NetworkUnorderedList<int> MyNetworkUnorderedList = new NetworkUnorderedList<int>(5); [OnChanged(nameof(MyNetworkUnorderedList))] private void OnMyNetworkUnorderedListChanged(OnChangedData onChangedData) { // getting a snapshot of the previous state of the collection. var previous = onChangedData.GetPreviousNetworkUnorderedList(MyNetworkUnorderedList); } NetworkQueue Example: [Networked(size: 5)] public readonly NetworkQueue<int> MyNetworkQueue = new NetworkQueue<int>(5); [OnChanged(nameof(MyNetworkQueue))] private void OnMyNetworkQueueChanged(OnChangedData onChangedData) { // getting a snapshot of the previous state of the collection. var previous = onChangedData.GetPreviousNetworkQueue(MyNetworkQueue); } NetworkStack Example: [Networked(size: 5)] public readonly NetworkStack<int> MyNetworkStack = new NetworkStack<int>(5); [OnChanged(nameof(MyNetworkStack))] private void OnMyNetworkStackChanged(OnChangedData onChangedData) { // getting a snapshot of the previous state of the collection. var previous = onChangedData.GetPreviousNetworkStack(MyNetworkStack); } Warning Don't use the array methods of OnChangedData on network collections. They only work on NetworkArray<T>. Warning Be careful when using these methods on OnChangedData, since they are unsafe and can cause a crash if you go outside array range or use an incorrect type. Finding Removed and Added Items to Collections Using the previous snapshot (version) of the collection, we are able to compare the current collection against the previous snapshot to find the items that were added and the items that were removed. Example: This example uses a NetworkDictionary but the same applies to other collections. [Networked(size: 10)] public NetworkDictionary<int, Vector3> NetworkDictionaryExample = new NetworkDictionary<int, Vector3>(10); [OnChanged(nameof(NetworkDictionaryExample))] void OnNetworkDictionaryExampleChanged(OnChangedData dat) { var previous = dat.GetPreviousNetworkDictionary(NetworkDictionaryExample); // finding the newly added items foreach (var item in NetworkDictionaryExample) if (!previous.ContainsKey(item.Key)) // does not exist in the previous version of the collection, meaning it's a new item. Debug.Log($\"{item} was added!\"); // finding the newly removed items foreach (var item in previous) if (!NetworkDictionaryExample.ContainsKey(item.Key)) // if the current version of the collection does not have the item, it means it was removed. Debug.Log($\"{item} was removed!\"); } Invoke Behavior of [OnChanged] Callbacks When you change a variable in the server or in the client (on a predicted object), the [OnChanged] method will be invoked from the setter of the networked variable, therefore it's immediately invoked when changing the variable. In the client, when the client receives data for a networked variable that was changed in the server, the client will also invoke the callback, but only if the received value is different from the current value or when there was a misprediction. A misprediction means the value of the variable before rollback is not equal to the value after rollback and resimulation. Read the article on Client-Side Prediction to learn more. If the server changes a variable multiple times, but then back to the original value before all of this, the client will not invoke the callback, because to the client that networked variable never changed, but to the server it did but it eventually went back to the same value at the start of the tick. Therefore it's important to realize that in this case the callback is invoked multiple times in the server but never in the client. Invoking [OnChanged] Callbacks During Rollback & Resimulation Read the article on Client-Side Prediction before reading this section. By default, Netick will not invoke [OnChanged] callbacks when the client rolls back to the latest received server state, and neither during the resimulation stage of prediction. This is usually the desired behaviour because you only want the callback to fire when the value is changed for the first time (usually in the client, on predicted objects). However, sometimes you want the [OnChanged] callback to always be in sync with the value of the networked variable and have it also get invoked during rollback and during resimulation. This is easily possible by simply passing true to invokeDuringResimulation optional parameter of [OnChanged]."
  },
  "articles/coming-from-netick-1.html": {
    "href": "articles/coming-from-netick-1.html",
    "title": "Coming from Netick 1 (Unity) | Netick Networking Engine",
    "summary": "Coming from Netick 1 (Unity) This is a guide to help you migrate from Netick 1 to Netick 2, for Unity users. It shows you what has changed in Netick 2 and it also shows you many of the new features that Netick 2 brings to your toolset. First of all, please make a back-up copy of your project. Then carefully read each section of this article. If you need help, please feel free to join our discord. Importing Netick 2 Assuming you have already downloaded Netick 2 package, delete the root folder of Netick 1 from your project, which is located at Assets/Netick. After that, simply unpack/copy Netick 2 into your project. It is recommended to do this in your operating system's File Explorer instead of Unity Project Panel. Project Settings Go to Project Settings -> Player -> Other Settings and change these settings to be as follows: Allow 'unsafe' code: true Api compatibility level: .NET Standard 2.1 API Naming Changes: Netick 1 Netick 2 NetworkSandbox.GetRpcCaller NetworkSandbox.CurrentRpcCaller NetworkSandbox.RpcSource NetworkSandbox.CurrentRpcSource NetworkEventsListner NetworkEventsListener NetworkBehaviour.ApplyToBehaviour NetworkBehaviour.GameEngineIntoNetcode NetworkBehaviour.ApplyToComponent NetworkBehaviour.NetcodeIntoGameEngine NetHit LagCompHit Game Starter Now the transport is specified when starting Netick and not using NetickConfig. A field has been added to GameStarter for that. Network Events Listener A parameter for disconnection reason (TransportDisconnectReason) has been added to OnClientDisconnected: Netick 1 Netick 2 public override void OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client) { } public override void OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client, TransportDisconnectReason reason) { } Network Behaviour Add using Netick.Unity to every script that you have which inherits from NetworkBehaviour. using Netick; using Netick.Unity; public class MyScript : NetworkBehaviour { ... } Network Input Network inputs are now structs instead of classes, which makes it easy to sync them as network properties if needed. Netick 1 Netick 2 public class MyInput : NetworkInput { public bool ShootInput; public float MoveDirX, MoveDirY; } public struct MyInput : INetworkInput { public bool ShootInput; public float MoveDirX, MoveDirY; } Because they are now value types instead of reference types, this means the previous method of populating them won't work anymore. Instead, you have to use another call to update the input. Netick 1 Netick 2 public override void OnInput(NetworkSandbox sandbox) { var input = sandbox.GetInput<BombermanInput>(); input.Movement = GetMovementDir(); input.PlantBomb |= Input.GetKeyDown(KeyCode.Space); } public override void OnInput(NetworkSandbox sandbox) { var input = sandbox.GetInput<BombermanInput>(); input.Movement = GetMovementDir(); input.PlantBomb |= Input.GetKeyDown(KeyCode.Space); // since this is a struct, you have to call this method too to update input sandbox.SetInput<FPSInput>(input); } OnChanged Now OnChanged methods must have a parameter of OnChangedData type which can be used to retrieve the previous property value: Netick 1 Netick 2 [Networked] public int Health { get; set; } [OnChanged(nameof(Health ))] private void OnHealthChanged(int previous) { // Something that happens when the Health property changes } [Networked] public int Health { get; set; } [OnChanged(nameof(Health ))] private void OnHealthChanged(OnChangedData onChangedData) { var previous = onChangedData.GetPreviousValue<int>(); } It also now supports retrieving previous array values: [Networked(size: 32)] public NetworkArray<int> ArrayExample = new NetworkArray<int>(32); [OnChanged(nameof(IntArray))] private void OnArrayExampleChanged(OnChangedData onChangedData) { // getting the changed element value directly var changedPreviousElementValue = onChangedData.GetArrayPreviousElementValue<int>(); // or just getting the index var changedPreviousElementIndex = onChangedData.GetArrayChangedElementIndex(); // or maybe getting the previous value of another index we want var someRandomPreviousElementValue = onChangedData.GetArrayPreviousElementValue<int>(13); } Behavioral Change [OnChanged] methods now will be called for all non-default initialization values - property definition assignments and inspector values. And this happens for the first time when the object is first created, before NetworkStart is called. So if you try to access a class instance variable inside the [OnChanged] method which is initialized inside NetworkStart, it can cause a null reference exception - because NetworkStart is invoked after [OnChanged] method, not before. To fix this, transfer all class instance variables initialization into NetworkAwake (which is called before the first [OnChanged] ever). Network Arrays Network arrays syntax has changed a little bit. They are now field members instead of property members. Netick 1 Netick 2 [Networked (size: 3)] public NetworkArray<int> IntArrayExample { get; set; } [Networked(size: 32)] public NetworkArray<int> IntArrayExample = new NetworkArray<int>(32) { 55, 66, 77 }; Warning Regarding network arrays for Netick 2: size of [Networked(size: 32)] must be the same as the value that is passed to the array constructor new NetworkArray<int>(32) As you can see, it's now possible to have initialization values for network arrays. Network Array Struct Netick 2 introduces a new type of network array, network arrays that are completely value types - Network Array Structs. These are fixed-size struct arrays available only in 4 fixed sizes: 8, 16, 32, and 64. Network Array Structs are pretty useful since they can used as members of another struct, or even nested inside other arrays. // Network Struct Array Examples [Networked] public NetworkArrayStruct8<int> IntFixedArray { get; set; } = new int[] {1 , 4 ,5}.ToNetworkStructArray8(); [Networked] public NetworkArrayStruct8<NetworkArrayStruct8<int>> ArrayOfArrays { get; set; }; Note Network Array Structs are treated as if they were simple struct types like int or float, so they must be defined as a property not as a field (like normal NetworkArray that is non-fixed size). Changing elements of Network Array Struct Because Network Array Structs are structs, the whole array will be replaced even when you change a single element. To avoid bugs, this should be how you change array elements: IntFixedArray = IntFixedArray.Set(index, value); // as you can see, we are reassigning the property with the new changed array which has the change. Network Structs Now all structs are networked by default, so you don't need to add [Networked] to them or even implement custom equality. You no longer have a limit size for a single struct too. You can also now have nested structs. So this works as expected: public struct MyNestedStruct { public int Int1; public bool Bool1; public float Float1; public double Double1; } public struct MyStruct { public MyNestedStruct MyNestedStruct; public NetworkArrayStruct8<int> StructArray; public int Int1; public bool Bool1; public float Float1; public double Double1; } [Networked] public MyStruct MyStructProperty {get; set;} Input Source Now, to change the input source of an object you do that directly using the InputSource property setter: Netick 1 Netick 2 // assigning an input source to network object: Object.PermitInput(myNewInputSource); // removing the input source from the object: Object.RevokeInput(); // assigning an input source to network object: Object.InputSource = myNewInputSource; // removing the input source from the object: Object.InputSource = null; Callbacks of NetworkBehaviour, OnInputPermitted and OnInputRevoked, have been removed and replaced by one single callback: Netick 1 Netick 2 public override void OnInputPermitted() { // called on the InputSource machine when InputSource is now equal to this machine. } public override void OnInputRevoked() { // called on the InputSource machine when this machine is no longer the InputSource. } public override void OnInputSourceChanged(NetworkPlayer previous) { // this method is called on the server not only on the client InputSource, so the behaviour is different from OnInputPermitted and OnInputRevoked. // to imitate the behaviour of OnInputPermitted and OnInputRevoked: if (IsInputSource) // same as OnInputPermitted { // called on the InputSource machine when InputSource is now equal to this machine. } else if (previous == Sandbox.LocalPlayer) // same as OnInputRevoked { // called on the InputSource machine when this machine is no longer the InputSource. } } Rpcs At this moment in time, string is not supported as a parameter to Rpcs. Instead, fixed-size structs can be used: Netick 1 Netick 2 [Rpc] public void MyRpc(string myString) { } [Rpc] public void MyRpc(NetworkString32 myString) { string asString = myString.ToString(); } // this is how you would call the rpc: var myString = \"Hello World!\"; myRpc(new NetworkString32(myString)); Now, you can have static Rpcs on NetworkBehaviour classes which can be pretty useful. [Rpc] public static void MyStaticRpc(NetickEngine engine, int someRpcPara) { var sandbox = engine.UserObject as NetworkSandbox; } // this is how you would call the rpc: MyStaticRpc(Sandbox.Engine, 56); Note that they must have a NetickEngine as the first parameter. Lag Compensation LagCompensation component class has been removed. Netick 1 Netick 2 Sandbox.GetComponent<LagCompensation>().Raycast(...); Sandbox.Raycast(...); Interpolation Interpolator is now an non-generic struct. To find an Interpolator, now you simply use the name of the property instead of using an Id. Netick 1 Netick 2 [Networked][Smooth(6)] public MyType SomeProperty {get; set;} public override void NetworkStart() { var interpolator = FindInterpolator<MyType>(6); } [Networked][Smooth] public MyType SomeProperty {get; set;} public override void NetworkStart() { var interpolator = FindInterpolator(nameof(SomeProperty)); } Also, now [Smooth] takes a parameter to specify if it should give auto-interpolated values inside NetworkRender or not, by specifying a true or false value for auto parameter of [Smooth]. Accessing Interpolation Data To get interpolation data, now instead of using To, From, and Alpha fields of Interpolator, you use GetInterpolationData method of Interpolator struct: bool didGetData = interpolator.GetInterpolationData<int>(InterpolationMode.Auto, out var from, out var to, out float alpha); It also now supports getting interpolation data for network arrays: int myIndex = 4; bool didGetData = interpolator.GetInterpolationData<int>(InterpolationMode.Auto, myIndex, out var from, out var to, out float alpha); Replication Netick 2 introduces a new replication method called Pessimistic Replication (in contrast to Optimistic Replication, which was the only replication method in Netick 1), which ensures that the client always receives the full state together, not partial, but always the full state. In addition, this new replication method uses delta encoding to highly reduce the bandwidth required. This replication method eliminates the burden of having to account for the potential bugs caused by not always having the entire changed state together using Optimistic Replication. As of now, this is the default and only replication method. But the old Optimistic Replication will come back later in the future. Pessimistic Replication as of now works with AoI by disabling delta encoding, but this will change in the future. When that happens, Pessimistic Replication will be better than Optimistic Replication for almost every single situation. This is why it has not been a priority to make Optimistic Replication present in Netick 2 from the start. Network Transport Note If you are not a transport or a transport wrapper developer, you can ignore this section. In Netick 1, your network transport main script was inheriting from NetworkTransport, which by itself was inheriting from ScriptableObject. But now that's not possible anymore, since ScriptableObject is a Unity class. Now, NetworkTransport does not inherit from ScriptableObject, which means you no longer can have assets on your project representing a transport like in Netick 1. To solve this, a wrapper class has been added NetworkTransportProvider, which inherits from ScriptableObject and wraps the network transport: [CreateAssetMenu(fileName = \"LiteNetLibTransportProvider\", menuName = \"Netick/Transport/LiteNetLibTransportProvider\", order = 1)] public class LiteNetLibTransportProvider : NetworkTransportProvider { public override NetworkTransport MakeTransportInstance() => new LiteNetLibTransport(); } MakeTransportInstance is called by Netick to create an instance of the transport. Netick now only receives data in the form of BitBuffer. BitBuffer.SetFrom is used to set a pointer to the data which BitBuffer will use. Take a look at the new LiteNetLib transport to understand how it all works. public unsafe void INetEventListener.OnNetworkReceive(NetPeer peer, NetPacketReader reader, DeliveryMethod deliveryMethod) { if (_clients.TryGetValue(peer, out var c)) { var len = reader.AvailableBytes; reader.GetBytes(_bytes, 0, reader.AvailableBytes); fixed(byte* ptr = _bytes) { _buffer.SetFrom(ptr, len, _bytes.Length); NetworkPeer.Receive(c, _buffer); } } }"
  },
  "articles/core-concepts.html": {
    "href": "articles/core-concepts.html",
    "title": "Core Concepts | Netick Networking Engine",
    "summary": "Core Concepts Network Sandbox NetworkSandbox is what controls the whole network game. It can be thought of as representing an instance of the game. You can have more than one network sandbox in a single Unity game, and that happens when you start both a client and a server on the same project. This can be extremely useful for testing/debugging, because it allows you to run a server and a client (or multiple thereof) in the same project and therefore see what happens at both at the same time, without interference. Therefore you can think of a sandbox as representing a server or a client. You can show/hide the current sandboxes from the Network Sandboxes panel. Network Object Any GameObject which needs to be synced/replicated must have a NetworkObject component added to it. If you want to see something on everyone’s screen, it has to have a NetworkObject component added to it. It’s the component that tells Netick that a GameObject is networked. The NetworkObject component by itself just informs Netick that the object is networked. To add networked gameplay-logic to it, you must do so in a component of a class derived from NetworkBehaviour. Netick comes with a few essential built-in components: NetworkTransform: used to sync position and rotation NetworkRigidbody: used to sync controllable physical objects NetworkAnimator: used to sync Unity’s animator’s state Network Behaviour The NetworkBehaviour class is your old friend MonoBehaviour, just the networked version of it. To implement your networked functionality, create a new class and derive it from NetworkBehaviour. You have several methods you can override which correspond to Unity’s non-networked equivalents (they must be used instead of Unity’s equivalents when doing anything related to the network simulation): NetworkStart NetworkDestroy NetworkFixedUpdate NetworkUpdate NetworkRender Example: using System.Collections; using System.Collections.Generic; using UnityEngine; using Netick; using Netick.Unity; public class MyBehaviour : NetworkBehaviour { [Networked] public int IntPropertyExample { get; set;} [Networked] public float FloatPropertyExample { get; set;} public override void NetworkStart() { // Called when this object has been added to the simulation. } public override void NetworkDestroy() { // Called when this object has been removed from the simulation. } public override void NetworkUpdate() { // Called every frame. Executed before NetworkFixedUpdate. } public override void NetworkFixedUpdate() { // Called every fixed-time network step. Any changes to the networked state should happen here. // Check out the chapter named \"Writing Client-Side Prediction code\" to learn more about this method. } public override void NetworkRender() { // Called every frame. Executed after NetworkUpdate and NetworkFixedUpdate. // IMPORTANT NOTE: properties (which can be interpolated) marked with [Smooth] attribute will return interpolated values when accessed in this method. } } Don’t forget to include using Netick and using Netick.Unity. A class derived from NetworkBehaviour is almost useless without the utilization of Network Properties, which are the building blocks of your networked synced state. Network Properties are delta compressed, letting you create objects with complex states and not worry about it."
  },
  "articles/getting-started-guide/0-overview.html": {
    "href": "articles/getting-started-guide/0-overview.html",
    "title": "0 - Overview | Netick Networking Engine",
    "summary": "0 - Overview Introduction In this guide, we will walk you through the process of integrating Netick into your Unity project. This tutorial will be very simple and only teach you the very basics. We will make a simple scene with a simple character movement controller. Note It's recommended that you at least have an intermediate level of C# and Unity before continuing with this tutorial."
  },
  "articles/getting-started-guide/1-project-setup.html": {
    "href": "articles/getting-started-guide/1-project-setup.html",
    "title": "1 - Project Setup | Netick Networking Engine",
    "summary": "1 - Project Setup Step 1 - Unity Version Make sure the version of Unity that you are using is 2021 or later. Step 2 - Create a Blank Project In this tutorial, we will choose 3D (Built-in). Note: Render pipeline doesn't affect Netick whatsoever (unless you were using Netick samples which use built-in render pipeline). Step 3 - Importing Netick Go to Window > Package Manager > \"+\" Icon > Add package from git URL and fill it with https://github.com/NetickNetworking/NetickForUnity.git Great, the project is now set, let's do some coding!"
  },
  "articles/getting-started-guide/2-setting-up-the-game.html": {
    "href": "articles/getting-started-guide/2-setting-up-the-game.html",
    "title": "2 - Setting Up the Game | Netick Networking Engine",
    "summary": "2 - Setting Up the Game Starting the Game There are a few methods we can use to start the game: // start the game as a server with a player Netick.Unity.Network.StartAsHost(...); // start the game as a client var sandbox = Netick.Unity.Network.StartAsClient(...); // connecting the client sandbox.Connect(...); // or just starting a server without a player (dedicated-server way) Netick.Unity.Network.StartAsServer(...); // or if we wanted to shut down Netick Netick.Unity.Network.Shutdown(); Learn More About Managing Netick For quick testing, we can use the built-in GameStarter component, which will start the game for us. Create a new empty GameObject. Add the GameStarter Component. After adding the component, there are several fields we need to take care of. Sandbox Prefab The first field asks for a Sandbox Prefab Create a new empty GameObject. Rename it to MySandboxPrefab (or any name you like). Save it as prefab in the Assets folder, and assign it in Sandbox Prefab of GameStarter. Note Netick will automatically add a few other scripts too on this prefab when it's created which will happen when you start Netick, the most important one of those scripts is NetworkSandox. The Sandbox Prefab is a persistent GameObject, it will only be destroyed when you shut down Netick. Any scripts you add to the Sandbox Prefab will stay around until you shut down Netick. Methods on NetworkSandbox (the script Netick adds to the Sandbox Prefab) lets you do various things like connecting, spawning objects and destroying them. Transport Now we need to assign a transport, Netick uses the LiteNetLib by default. To use this transport, we can right click on an empty place in the Assets folder and go to Create > Netick > Transport > LiteNetLibTransportProvider. Then assign the Transport field of Game Starter. Setting Up the Scene Floor Let's create a 3D Cube named \"Floor\" with a scale of (15, 1, 15) and a position of (0, -1.5, 0). Create and assign a black material into it for visibility Camera Modify the camera's position to (0, 10, -12) and adjust its rotation to (45, 0, 0). Gameplay Manager Let's create our manager script to handle gameplay aspects such as spawning the player character when a certain player joins. Create a C# script named GameplayManager, then add it to the GameStarter GameObject. This script will inherit from NetworkEventsListener. By doing this, GameplayManager now has the ability to listen to important network events such as when a player connects, disconnects, etc. Learn More About Listening to Network Events using Netick; using Netick.Unity; // Change parent class from MonoBehaviour to NetworkEventsListener public class GameplayManager : NetworkEventsListener { } Player Character Let's create our player character: Right click on the hierarchy and select 3D Object > Capsule. Add NetworkObject component. Rename it to PlayerCharacter. Remove the Capsule Collider from the Capsule we just created (we won't use physics in this tutorial) Adding NetworkObject to a GameObject will give it an identity across the network, so that it's synced. Spawning our Player Add a field to hold the player character prefab in our gameplay manager script and give it type of NetworkObject. Then, let's also spawn the character when a player connects to the server. Input Source On the NetworkInstantiate, you can pass an Input Source. Input Source represents which peer has the authority to send inputs to this object, in this case that player is the joining player. Don't forget to assign the player prefab on the GameplayManger script! using Netick; public class GameplayManager : NetworkEventsListener { public NetworkObject PlayerPrefab; public override void OnPlayerConnected(NetworkSandbox sandbox, Netick.NetworkPlayer player) { // Random Spawn Position (to not make them overlap) Vector3 spawnPosition = new Vector3(); spawnPosition.x = Random.Range(-5f, 5f); spawnPosition.z = Random.Range(-5f, 5f); sandbox.NetworkInstantiate(PlayerPrefab.gameObject, spawnPosition, Quaternion.identity, player); } } Note Unity has old methods from the time when UNet was still around, sometimes providing incorrect signature information for OnPlayerConnected in your IDE, for instance. This issue is harmless and can be ignored. Testing Let's go ahead and enter play mode. You can see our player spawning by clicking on \"Start Host\"."
  },
  "articles/getting-started-guide/3-player-character-movement.html": {
    "href": "articles/getting-started-guide/3-player-character-movement.html",
    "title": "3 - Player Character Movement | Netick Networking Engine",
    "summary": "3 - Player Character Movement Since Netick is a server-authoritative networking solution, we can't directly move the player character object (in a client-auth fashion) on the client for security reasons. Instead, we use inputs, which will be used to move our player. To move the player based on our input, here's how it works: we send an input to the server, the server fetches our input, and then uses it to move our character. Netick uses something called Client-Side Prediction to make this process responsive. Learn More About Client-Side Prediction Input Struct Consider the type of player inputs required for our gameplay. In this tutorial, we only use a vector for movement direction. Create a C# script and call it PlayerCharacterInput. Change the type into struct from class. Make sure to implement INetworkInput. This input will be sent to the server, and can be processed later on. using Netick; public struct PlayerCharacterInput : INetworkInput { public Vector2 Movement; } Setting and Sending Input There are a few places to set your input. The preferred way is on OnInput on NetworkEventsListener. Modify the GameplayManager script. Override the OnInput method. Use sandbox.SetInput to set your input. using Netick; using Netick.Unity; using UnityEngine; public class GameplayManager : NetworkEventsListener { // ... public override void OnInput(NetworkSandbox sandbox) { PlayerCharacterInput input = sandbox.GetInput<PlayerCharacterInput>(); input.Movement = new Vector2(Input.GetAxis(\"Horizontal\"), Input.GetAxis(\"Vertical\")); sandbox.SetInput(input); } } Learn More About Inputs Fetch Input We use a method called FetchInput to try to fetch an input for the current tick. If we are able to fetch an input, we use it to drive the gameplay logic, such as the movement of our character. FetchInput must only be called inside NetworkFixedUpdate. To be able to use this method, let's create a new C# script named PlayerCharacterMovement, to handle our movement logic. Let's also change its parent class from MonoBehaviour to NetworkBehaviour. We also need a moveSpeed variable, declare it using float type and set the default value to 5. Learn More About Network Behaviour public class PlayerCharacterMovement : NetworkBehaviour { public float moveSpeed = 5; public override void NetworkFixedUpdate() { if (FetchInput(out PlayerCharacterInput input)) { Vector3 movement = new Vector3(input.Movement.x, 0, input.Movement.y); transform.position += movement * Sandbox.FixedDeltaTime * moveSpeed; } } } In a single-player game, we use Time.deltaTime to move our player to make it frame independent. With Netick, instead of using Time.deltaTime, we use Sandbox.FixedDeltaTime, which represents the time between two network ticks. Note Do not confuse Sandbox.FixedDeltaTime with Sandbox.DeltaTime (equal to Unity's Time.deltaTime). Learn More About Writing Client-Side Prediction Code Network Transform Adding NetworkTransform allows us to sync the position, rotation of our character. Add NetworkTransform component to our player character prefab. Learn More About NetworkTransform Gameplay & Visual Seperation In the NetworkTransform component, there is a Render Transform field which asks for a Transform. Because Netick is a tick-based netcode, it means movement will happen at a fixed rate which is lower than your FPS. Which will cause unsmooth movement. To fix this, we use interpolation which lets us give smoothed position and rotation to our player character visual. Create a child on the player and name it \"Visual\". Delete & Move the Capsule (Mesh Filter) and Mesh Renderer component to Visual. Assign Visual to Render Transform of NetworkTransform . Learn More About Interpolation Here's what our player character object looks like now: Multiplayer Testing Let's try to run the game now. In Netick, there is something called Sandboxing (or multi-peer), that allows us to simulate multiple peers on a single Unity process, meaning we don't have to build the game (or use two editors) to test multiplayer. Instead, we run a server and a client (or multiple) together in the same project at the same time. Enter play mode. Click on Run Host + Client. Click Connect. You can show/hide sandboxes in Netick > Sandboxes. Learn More About Sandboxing"
  },
  "articles/getting-started-guide/4-network-property.html": {
    "href": "articles/getting-started-guide/4-network-property.html",
    "title": "4 - Network Property | Netick Networking Engine",
    "summary": "4 - Network Property A network property allows us to replicate things in the game and keep them in sync across the network. In this tutorial, we are going to replicate our mesh color between players using inputs and network property. Learn More About Network Properties Color Input Let's add one more type of input which is a bool and give it the name of randomizeColor. If this bool is true, then we will randomize the color. public struct PlayerCharacterInput : INetworkInput { //... public bool RandomizeColor; } Let's modify our GameplayManager to also set the randomizeColor using the Space key. public class GameplayManager : NetworkEventsListener { //... public override void OnInput(NetworkSandbox sandbox) { //... input.RandomizeColor = Input.GetKey(KeyCode.Space); sandbox.SetInput(input); } //... } Defining a Network Property Create a new C# script and name it PlayerCharacterVisual. Replace the parent class from MonoBehaviour to NetworkBehaviour. Declare a network property of a Color type. using UnityEngine; using Netick; using Netick.Unity; public class PlayerCharacterVisual : NetworkBehaviour { [Networked] public Color MeshColor { get; set; } } Note that you must make your variable a property by adding {get; set;} to its end, this is used by Netick to make it synced automatically. Let's use the FetchInput method to handle the color changing logic. When RandomizeColor field of the input is true, we generate a random color and assign it to the MeshColor network property. using UnityEngine; using Netick; using Netick.Unity; public class PlayerCharacterVisual : NetworkBehaviour { [Networked] public Color MeshColor { get; set; } public override void NetworkFixedUpdate() { if (FetchInput(out PlayerCharacterInput input)) { if (input.RandomizeColor) MeshColor = Random.ColorHSV(0f, 1f); } } } Declare a field of MeshRenderer. Detecting Changes Netick lets you automatically detect whenever a certain network property changes, which is by using the [OnChanged] attribute on a method that will be invoked when the specified property changes. Create a method and name it OnColorChanged with OnChangedData parameter. Add [OnChanged] attribute on top of the method. Supply the property name we want to detect inside the [OnChanged] attribute which is MeshColor. Update the material color on OnColorChanged. using UnityEngine; using Netick; using Netick.Unity; public class PlayerCharacterVisual : NetworkBehaviour { [Networked] public Color MeshColor { get; set; } public MeshRenderer meshRenderer; public override void NetworkFixedUpdate() { if (FetchInput(out PlayerCharacterInput input)) { if (input.RandomizeColor) MeshColor = Random.ColorHSV(0f, 1f); } } [OnChanged(nameof(MeshColor))] private void OnColorChanged(OnChangedData onChangedData) { meshRenderer.material.color = MeshColor; } } Learn More About OnChanged Don't forget to assign the meshRenderer field in our player component!"
  },
  "articles/getting-started-guide/5-remote-procedure-call.html": {
    "href": "articles/getting-started-guide/5-remote-procedure-call.html",
    "title": "5 - Remote Procedure Call | Netick Networking Engine",
    "summary": "5 - Remote Procedure Call In this tutorial, we are going to use an RPC (Remote Procedure Call) to set our nickname randomly. RPC is the most primitive way to sync things in the game. It's not recommended to use RPCs most of the time, and should only be used for infrequent actions like sending the player's name to the server. Learn More About RPCs UI Setup In PlayerCharacter prefab, on the Visual transform, add a UI > Text - TextMeshPro. It might asks you to Import TMP Essentials, import it and close the window afterwards. Change the Canvas Render Mode from Screen Space - Overlay to World Space. Position your canvas to be Pos X: 0 Pos Y: 2 Change the canvas scale to 0.005 for all axis. In your text component, change font size to 128, and middle & center alignment. Make sure your text now is in the center. PlayerCharacterNametag Create a new script and name it PlayerCharacterNametag. Change parent class to NetworkBehaviour. Create a network property named Nickname and give it the type of NetworkString32 (string works too, however you should always use NetworkString as string can't work as an RPC parameter or a struct field). RPC Implementation We're going to set the RPC source to InputSource and the target to Owner (Server/Host). This means only the input source peer is able to call this RPC, but only the server will execute the RPC. We also want to set isReliable to true, this will ensure that this RPC will arrive to the server, even if packet loss occurs. using UnityEngine; using Netick; using Netick.Unity; public class PlayerCharacterNametag : NetworkBehaviour { [Networked] public NetworkString32 Nickname { get; set; } [Rpc(source: RpcPeers.InputSource, target: RpcPeers.Owner, isReliable: true)] public void RPC_SetNicknameRandom() { Nickname = new NetworkString32($\"Player_{Random.Range(1000, 9999)}\"); } } Calling the RPC RPCs can be called from any place. We're going to call them from inside NetworkUpdate (not to be confused with NetworkFixedUpdate) which is just a regular Unity Update. We only want to call the RPC if we have the input authority and if we press the Enter keycode. public class PlayerCharacterNametag : NetworkBehaviour { //.... public override void NetworkUpdate() { if (IsInputSource && Input.GetKeyDown(KeyCode.Return) && Sandbox.InputEnabled) { RPC_SetNicknameRandom(); } } //... } Nickname OnChanged Then, we're going to use an OnChanged callback for our Nickname: public class PlayerCharacterNametag : NetworkBehaviour { //... public TMP_Text TextNametag; //... [OnChanged(nameof(Nickname))] private void OnNicknameChanged(OnChangedData onChangedData) { TextNametag.SetText(Nickname); } //... } Assign the TextNametag with the TextMeshPro UI we have created before. Final Testing Let's press the Enter key repeatedly to check if the RPC is working."
  },
  "articles/getting-started-guide/6-next.html": {
    "href": "articles/getting-started-guide/6-next.html",
    "title": "6 - Next | Netick Networking Engine",
    "summary": "6 - Next There are still many things which remain unexplored, but for now you should be able to experiment and learn yourself. If you find yourself stuck, feel free to join our discord server and we will help you! Go to Manual More Learning Resources For a full beginners video guide, this is a Udemy course done by one our community members on how to make a 3D top-down shooter using Netick: Link"
  },
  "articles/how-to-write-a-transport-wrapper.html": {
    "href": "articles/how-to-write-a-transport-wrapper.html",
    "title": "How To Write a Transport Wrapper | Netick Networking Engine",
    "summary": "How To Write a Transport Wrapper Introduction A transport is the low-level component that does the actual data sending, receiving and handling connections. This guide will show how to implement a wrapper for the Unity Transport Defining the Connection Wrapper First you need to define a connection class which you will pass to Netick. This represents a transport connection. It must implement several properties and a send method: public unsafe class NetickUnityTransportConnection : TransportConnection { public NetickUnityTransport Transport; public Unity.Networking.Transport.NetworkConnection Connection; public override IEndPoint EndPoint => Transport._driver.GetRemoteEndpoint(Connection).ToNetickEndPoint(); public override int Mtu => MaxPayloadSize; public int MaxPayloadSize; public NetickUnityTransportConnection(NetickUnityTransport transport) { Transport = transport; } public unsafe override void Send(IntPtr ptr, int length) { if (!Connection.IsCreated) return; Transport._driver.BeginSend(NetworkPipeline.Null, Connection, out var networkWriter); networkWriter. WriteBytesUnsafe((byte*)ptr.ToPointer(), length); Transport._driver.EndSend(networkWriter); } } The Send method is called by Netick when it wants to send a packet to this connection. Transport represents the UnityTransport transport class which we will talk about in a bit. Connection represents the UnityTransport connection that corresponds to this NetickUnityTransportConnection type that we will pass into Netick. Defining the End Point Wrapper Let's also define an end point wrapper over UnityTransport NetworkEndPoint, and a extension class to do the conversion: public static class NetickUnityTransportExt { public static NetickUnityTransportEndPoint ToNetickEndPoint(this NetworkEndpoint networkEndpoint) => new NetickUnityTransportEndPoint(networkEndpoint); } public unsafe class NetickUnityTransport : NetworkTransport { public struct NetickUnityTransportEndPoint : IEndPoint { public NetworkEndpoint EndPoint; string IEndPoint.IPAddress => EndPoint.Address.ToString(); int IEndPoint.Port => EndPoint.Port; public NetickUnityTransportEndPoint(NetworkEndpoint networkEndpoint) { EndPoint = networkEndpoint; } public override string ToString() { return $\"{EndPoint.Address}\"; } } Defining the Transport Wrapper public unsafe class NetickUnityTransportConnection : TransportConnection { } Let's add a few fields which will be important in the functionality of the transport. private NetworkDriver _driver; private Dictionary<Unity.Networking.Transport.NetworkConnection, NetickUnityTransportConnection> _connectedPeers = new(); private Queue<NetickUnityTransportConnection> _freeConnections = new(); private Unity.Networking.Transport.NetworkConnection _serverConnection; private NativeList<Unity.Networking.Transport.NetworkConnection> _connections; _driver represents an instance of a UnityTransport manager. _connectedPeers contains the a dictionary that maps between the UnityTransport connection type, and the transport wrapper connection type. _freeConnections is a pool for free connections that we will use. _serverConnection is only relevant when the transport is started as a client, it represents the UnityTransport connection to the server. And _connections is the buffer that is used by UnityTransport for the connections. private BitBuffer _bitBuffer; private byte* _bytesBuffer; private int _bytesBufferSize = 2048; private byte[] _connectionRequestBytes = new byte[200]; private NativeArray<byte> _connectionRequestNative = new NativeArray<byte>(200, Allocator.Persistent); _bitBuffer is the buffer that is passed to Netick when receiving a packet. Netick only receives the packets in the form of a BitBuffer. _bytesBuffer is an unsafe buffer that is used with _bitBuffer. _connectionRequestBytes is a managed buffer for the connection request. In the constructor, we allocate _bytesBuffer. And we make sure to deallocate, in addition to disposing of _connectionRequestNative. public NetickUnityTransport() { _bytesBuffer = (byte*)UnsafeUtility.Malloc(_bytesBufferSize, 4, Unity.Collections.Allocator.Persistent); } ~NetickUnityTransport() { UnsafeUtility.Free(_bytesBuffer, Unity.Collections.Allocator.Persistent); _connectionRequestNative.Dispose(); } Let's override the Init method. This method is called by Netick once to initialize the transport. We initialize the _bitBuffer and the UnityTransport network driver _driver, and also let's initialize _connections buffer. public override void Init() { _bitBuffer = new BitBuffer(createChunks: false); _driver = NetworkDriver.Create(new WebSocketNetworkInterface()); _connections = new NativeList<Unity.Networking.Transport.NetworkConnection>(Engine.IsServer ? Engine.Config.MaxPlayers : 0, Unity.Collections.Allocator.Persistent); } The Run method is called by Netick when starting Netick. Shutdown is called when shuting down Netick. public override void Run(RunMode mode, int port) { if (Engine.IsServer) { var endpoint = NetworkEndpoint.AnyIpv4.WithPort((ushort)port); if (_driver.Bind(endpoint) != 0) { Debug.LogError($\"Failed to bind to port {port}\"); return; } _driver.Listen(); } for (int i = 0; i < Engine.Config.MaxPlayers; i++) _freeConnections.Enqueue(new NetickUnityTransportConnection(this)); } public override void Shutdown() { if (_driver.IsCreated) _driver. Dispose(); _connections.Dispose(); } Connect method is called by Netick in the client when wanting to connect to the server. Disconnect method is called when you are kicking or disconnecting a connection. public override void Connect(string address, int port, byte[] connectionData, int connectionDataLength) { var endpoint = NetworkEndpoint.LoopbackIpv4.WithPort((ushort)port); if (connectionData != null) { _connectionRequestNative.CopyFrom(connectionData); _serverConnection = _driver.Connect(endpoint, _connectionRequestNative); } else _serverConnection = _driver.Connect(endpoint); } public override void Disconnect(TransportConnection connection) { var conn = (NetickUnityTransport.NetickUnityTransportConnection)connection; if (conn.Connection.IsCreated) _driver.Disconnect(conn.Connection); } Now let's override the last method which is PollEvents. This is called by Netick each frame, to poll network events on the transport. Here we are handling everything from making new connections, handling disconnections, and receiving packets, etc. public override void PollEvents() { _driver.ScheduleUpdate().Complete(); if (Engine.IsClient && !_serverConnection.IsCreated) return; // reading events if (Engine.IsServer) { // clean up connections. for (int i = 0; i < _connections.Length; i++) { if (!_connections[i].IsCreated) { _connections.RemoveAtSwapBack(i); i--; } } // accept new connections in the server. Unity.Networking.Transport.NetworkConnection c; while ((c = _driver.Accept(out var payload )) != default) { if (_connectedPeers.Count >= Engine.Config.MaxPlayers) { _driver.Disconnect(c); continue; } if (payload.IsCreated) payload.CopyTo(_connectionRequestBytes); bool accepted = NetworkPeer.OnConnectRequest(_connectionRequestBytes, payload.Length, _driver.GetRemoteEndpoint(c).ToNetickEndPoint()); if (!accepted) { _driver.Disconnect(c); continue; } var connection = _freeConnections.Dequeue(); connection.Connection = c; _connectedPeers.Add(c, connection); _connections. Add(c); connection.MaxPayloadSize = NetworkParameterConstants.MTU - _driver.MaxHeaderSize(NetworkPipeline.Null); NetworkPeer. OnConnected(connection); } for (int i = 0; i < _connections.Length; i++) HandleConnectionEvents(_connections[i], i); } else HandleConnectionEvents(_serverConnection, 0); } private void HandleConnectionEvents(Unity.Networking.Transport.NetworkConnection conn, int index) { DataStreamReader stream; NetworkEvent.Type cmd; while ((cmd = _driver.PopEventForConnection(conn, out stream)) != NetworkEvent.Type.Empty) { // game data if (cmd == NetworkEvent.Type.Data) { if (_connectedPeers.TryGetValue(conn, out var netickConn)) { stream. ReadBytesUnsafe(_bytesBuffer, stream.Length); _bitBuffer. SetFrom(_bytesBuffer, stream.Length, _bytesBufferSize); NetworkPeer.Receive(netickConn, _bitBuffer); } } // connected to server if (cmd == NetworkEvent.Type.Connect && Engine.IsClient) { var connection = _freeConnections.Dequeue(); connection.Connection = conn; _connectedPeers.Add(conn, connection); _connections. Add(conn); connection.MaxPayloadSize = NetworkParameterConstants.MTU - _driver.MaxHeaderSize(NetworkPipeline.Null); NetworkPeer. OnConnected(connection); } // disconnect if (cmd == NetworkEvent.Type.Disconnect) { if (_connectedPeers.TryGetValue(conn, out var netickConn)) { TransportDisconnectReason reason = TransportDisconnectReason.Shutdown; NetworkPeer. OnDisconnected(netickConn, reason); _freeConnections.Enqueue(netickConn); _connectedPeers. Remove(conn); } if (Engine.IsClient) _serverConnection = default; if (Engine.IsServer) _connections[index] = default; } } } Defining the Transport Provider Finally, we have to define a transport provider (a ScriptableObject), which will be used by Netick to create a new instance of the transport wrapper. [CreateAssetMenu(fileName = \"UnityTransportProvider\", menuName = \"Netick/Transport/UnityTransportProvider\", order = 1)] public class UnityTransportProvider : NetworkTransportProvider { public override NetworkTransport MakeTransportInstance() => new NetickUnityTransport(); } We can then go to the Assets folder in Unity, and double click and go to Create->Netick->Transport->UnityTransportProvider. Assign the created instance to your GameStarter transport field, and you are done!"
  },
  "articles/interest-management.html": {
    "href": "articles/interest-management.html",
    "title": "Interest Management [Pro] | Netick Networking Engine",
    "summary": "Interest Management [Pro] Understanding Interest Management When you have a game with a big world and a high player count, it becomes more and more expensive to replicate every object in the game to every connected client. It's an O(N2) problem, meaning the bandwidth sent from the server scales quadratically with the number of players connected. Interest Management mitigates this problem by filtering objects that are of no interest to the client. Usually, this is done using Area of Interest, which is the area around the player. The client will only receive objects existing in this area. Interest management is often used in battle-royale scale games Interest Management is also useful as an anti-cheat measure. For instance, you can replicate team-specific objects to only players of the same team, using a Custom interest group, which we will learn about in this article. Netick handles Interest Management (filters objects replicated to a client) in two phases: Broad Phase Filtering Narrow Phase Filtering Broad Phase Filtering Broad Phase Filtering is done using a group. An interest management group is a list of network objects that are processed together. Every network object has an option to choose the broad phase filter source, it can be one of three options: Global: no filtering, the object is replicated to everyone. Area of Interest: only when a client's Area of Interest intersects this object's group cell it will be replicated. Custom: using an explicitly assigned custom group through code, with an index. Only clients who explicitly choose to be interested in this group will receive updates to the object. Note Area of Interest implementation is done using a grid, which you can specify its settings in Netick Settings window. Note The number of available custom interest groups can be set in Netick Settings. Explicitly specifying the custom interest group of an object Object.InterestGroup = Sandbox.InterestManagement.CustomGroups[groupIndex]; Note The above is only valid when the Broad Phase Filter of the object is set to Custom. When it's set to Area of Interest, it will only be controllable by Netick - meaning the object will be assigned a group that corresponds to its current position in the world. Narrow Phase Filtering Narrow Phase Filtering allows for finer control. Instead of being handled per-group basis, it's done per-object per-client basis. Which is slower. Thus, it should only be used when necessary. Filtering an object to a specific client Object.SetNarrowphaseInterest(client, false); Specifying the interest of a client Adding area of interest regions The area of interest of the client is specified using bounding boxes that you can add. InputSource.AddInterestBoxArea(new Bounds(transform.position, (InterestBox))); Adding custom interest groups InputSource.AddInterestGroup(customInterestGroupIndex); Caution This must be done every NetworkFixedUpdate callback since it's cleared at the end of the tick. Usually, you should do this in the movement controller of your player character. Callbacks There are two callbacks on NetworkBehaviour for when the interest status of an object changes in the client. public override void OnBecameInterested() { // called when this client becomes interested in this object. } public override void OnBecameUninterested() { // called when this client becomes uninterested in this object. } One of the things you can do using these callbacks is hide/show the object when the client becomes interested/uninterested."
  },
  "articles/interpolation.html": {
    "href": "articles/interpolation.html",
    "title": "Interpolation | Netick Networking Engine",
    "summary": "Interpolation Netick runs at a fixed-time step, equal to the inverse of the tick rate used for the simulation, which you can specify in Netick Settings. Because of that, the motion of network objects will appear unsmooth and jittery. The reason for this is that, usually, your update rate (render rate) is way higher than your fixed network tick rate. The solution to this problem is called interpolation, which means filling in the gaps between these fixed-time steps/ticks: So, for example, at tick 6, the value of a network property is 2.0. And at tick 7, it becomes 3.0. Since there are 5 frames between two ticks, the values at each frame would be: Frame 1: 2.0 — Beginning of tick 6 Frame 2: 2.25 Frame 3: 2.5 Frame 4: 2.75 Frame 5: 3 — End of tick 6, beginning of tick 7 Interpolation of Network Transform For moving objects, this is important to deal with. Every NetworkTransform has a slot for a Render transform, which is basically the smoothed/interpolated mesh of the object, while the parent would be the simulated/non-interpolated object. So, you must break your moving objects into a parent (which has the NetworkTransform), and a child which is the interpolated object, and has the mesh/s. Then you specify that child in the NetworkTransform RenderTransform property in the inspector. Check the samples if you are confused. Interpolation Source The source of interpolation data can be of two options: Local/Predicted Snapshot: This is called Local Interpolation. It means using the local predicted snapshots for interpolation. This is what you usually use for your local player as you want to use the local predicted snapshots, and it's chosen by default for objects the client is the Input Source of when Interpolation Source is set to Auto. Remote Snapshot: This is called Remote Interpolation. It means using the received snapshots from the server for interpolation. This data is delayed, and that's why it's called remote. This is what you usually use for other objects (not your own player) as you want to use the smoothed and buffered server snapshots, and it's chosen by default for objects the client is not the Input Source of when Interpolation Source is set to Auto. Note When you want the server only to move your local player object, you must switch Interpolation Source to Remote Snapshot, to keep smooth rendering of the object as it's being controlled remotely and the prediction buffers will contain jittery data as the object is not being moved locally in the client. Interpolation of Network Properties To interpolate a property, add the [Smooth] attribute to its declaration: [Networked][Smooth] public Vector3 Movement {get; set;} Automatic Interpolation To access the interpolated value, by referencing the property in NetworkRender, you automatically get interpolated values: public override NetworkRender() { var interpolatedValue = Movement; } Automatic Interpolation is implemented by Netick on these types: Float Double Vector2 Vector3 Quaternion Color Int NetworkBool Warning Currently this is only supported in Unity. Use Manual Interpolation in other engines. Manual Interpolation To manually interpolate a network property or network array, you can do that using the Interpolator struct. You also have to pass false to [Smooth] to inform Netick we want to manually interpolate the property. Interpolating Properties [Networked][Smooth(false)] public MyType MyType {get; set;} public override NetworkRender() { var interpolator = FindInterpolator(nameof(MyType)); bool didGetData = interpolator.GetInterpolationData<MyType>(InterpolationSource.Auto, out var from, out var to, out float alpha); MyType interpolatedValue = default; // if we were able to get interpolation data if (didGetData) interpolatedValue = LerpMyType(from,to,alpha); else // if not we just use the non-interpolated value interpolatedValue = MyType; } private MyType LerpMyType(MyType from, MyType to, float alpha) { // write the interpolation code here } Interpolating Arrays [Networked (size: 10)][Smooth(false)] public readonly NetworkArray<MyType> MyTypeArray = new NetworkArray<MyType>(10); public override NetworkRender() { var interpolator = FindInterpolator(nameof(MyTypeArray)); int index = 5; bool didGetData = interpolator.GetInterpolationData<MyType>(InterpolationSource.Auto, index, out var from, out var to, out float alpha); MyType interpolatedValue = default; // if we were able to get interpolation data if (didGetData) interpolatedValue = LerpMyType(from, to, alpha); else // if not we just use the non-interpolated value interpolatedValue = MyTypeArray[index]; } private MyType LerpMyType(MyType from, MyType to, float alpha) { // write the interpolation code here } Note You should cache the result to FindInterpolator on NetworkStart, instead of calling it repeatedly every frame (NetworkRender is called every frame), since it might be a bit slow."
  },
  "articles/lag-compensation.html": {
    "href": "articles/lag-compensation.html",
    "title": "Lag Compensation [Pro] | Netick Networking Engine",
    "summary": "Lag Compensation [Pro] Understanding the Need for Lag Compensation Due to varying latencies (ping) of connected players, each player will see the world at a different point in time than the server. For instance, when the client sends an input to the server to shoot its weapon, the target that the client was aiming at would be at a different place in the client than the server. Therefore the client would miss its shoots. Because, usually, from the perspective of the client, the positions of other objects (players) are in the remote snapshot timeline, which is always in the past compared to the timeline of the player-controlled character, which’s the predicted snapshot timeline. On the server, everything is in the present. While on the client, only the player-controlled character is in the present, while other players’ (proxies) positions are in the past. Though this is not always the case, because due to the ability of Netick to do full-world prediction, it’s possible to put proxies in the predicted snapshot timeline, in which case lag compensation wouldn’t be needed. So, what’s Lag Compensation? Lag Compensation basically means going back in time to what the client was seeing at the time of the shooting, and simulating its shooting in that past view. Question: why not just let the client tell the server the target that it hit and how much damage it dealt? Answer: we can’t trust the client. We should never trust the client, especially in game-critical aspects like applying damage. Lag Compensation gives us authority over hit detection. Watch this video for a visual explanation: Lag Compensation in Netick To use Lag Compensation in your project, you first need to enable it in Netick Settings. Go to Netick Settings -> Lag Compensation and turn on Enable. Setting up your character for Lag Compensation You have to add a HitShape component (commonly known as a hitbox) on every part of your character which can move. And in the root of your character, you have to add a HitShape Container component which will register all child HitShapes. HitShape on each bone HitShape Container on the root of the character. The hierarchy should be as follows: > Root (with NetworkObject) > `HitShape Container` > Render Transform > Character Rig > Character Bone (with HitShape) Warning Make sure to enable Lag Compensation in Netick Settings. Performing a Lag-Compensated Raycast in Unity // lag-compensated Raycast if (Sandbox.Raycast( shootPos, shootDirection, out var hit, Object.InputSource, Mathf.Infinity, includeUnityColliders: true, queryTriggerInteraction: QueryTriggerInteraction.Ignore)) { if (hit.HitShape != null) { // code to be executed when a HitShape was hit } } Performing a Lag-Compensated OverlapSphere in Unity // lag-compensated OverlapSphere List<LagCompHit> overlapSphereHits = new List<LagCompHit>(32); Sandbox.OverlapSphere(point, _projectileBlastRadius, overlapSphereHits, InputSource, queryTriggerInteraction: QueryTriggerInteraction.Ignore); For a practical example, you might want to get our comprehensive Arena Shooter sample which covers everything we talked about and more: https://netick.net/arena-shooter-sample/"
  },
  "articles/listening-to-network-events.html": {
    "href": "articles/listening-to-network-events.html",
    "title": "Listening to Network Events | Netick Networking Engine",
    "summary": "Listening to Network Events Netick has several useful callbacks you can use: Callbacks Description Invoke target OnStartup(NetworkSandbox sandbox) Invoked when Netick has been started. Client/Server OnShutdown(NetworkSandbox sandbox) Invoked when Netick has been shut down. Client/Server OnInput(NetworkSandbox sandbox) Invoked to read inputs. Client/Server OnConnectRequest(NetworkSandbox sandbox, NetworkConnectionRequest request) Invoked when a client tries to connect. Use request to decide whether or not to allow this client to connect. Server OnConnectFailed(NetworkSandbox sandbox, ConnectionFailedReason reason) Invoked when the connection to the server was refused, or simply failed. Client OnConnectedToServer(NetworkSandbox sandbox, NetworkConnection server) Invoked when the connection to the server has succeeded. Client OnDisconnectedFromServer(NetworkSandbox sandbox, NetworkConnection server, TransportDisconnectReason transportDisconnectReason) Invoked when connection to the server ended, or when a network error caused the disconnection. Client OnPlayerConnected(NetworkSandbox sandbox, Netick.NetworkPlayer client) Invoked when a specific player has connected. Called for the server, when started as a Host. Server OnPlayerDisconnected(NetworkSandbox sandbox, Netick.NetworkConnection client) Invoked when a specific player has disconnected. Invoked in host mode for the host player when Netick shuts down. Server OnClientConnected(NetworkSandbox sandbox, NetworkConnection client) Invoked when a specific client has connected. Server OnClientDisconnected(NetworkSandbox sandbox, NetworkConnection client) Invoked when a specific client has disconnected. Server OnSceneOperationBegan(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) Invoked when a scene operation has began. Client/Server OnSceneOperationDone(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) Invoked when a scene operation has finished. Client/Server OnObjectCreated(NetworkObject obj) Invoked when a network object has been created/initialized. Client/Server OnObjectDestroyed(NetworkObject obj) Invoked when a network object has been destroyed/recycled. Client/Server You can override these methods on a class inheriting from NetworkEventsListener, and add it to an object in the scene, and Netick will find it automatically. Or, you can add it to a network prefab that you instantiate, and Netick will also find it can call methods on it. You could also add the component NetworkEvents to an object, which does the same, but the difference is that you can plug your events right into it. And finally, you can use Sandbox.Events to directly subscribe/unsubscribe network events from any script, including network behaviours: public override void NetworkStart() { Sandbox.Events.OnPlayerConnected += OnPlayerConnected ; } public override void NetworkDestroy() { Sandbox.Events.OnPlayerConnected -= OnPlayerConnected ; } private void OnPlayerConnected (....) { } This is the cleanest way of using network events."
  },
  "articles/managing-netick.html": {
    "href": "articles/managing-netick.html",
    "title": "Managing Netick | Netick Networking Engine",
    "summary": "Managing Netick Starting and Shutting Down Netick When you start Netick, you need to specify the mode you want to start it in. Like this: Single Peer Start as Client var sandbox = Netick.Unity.Network.StartAsClient(Transport, Port); Start as Host (a server with a local player) var sandbox = Netick.Unity.Network.StartAsHost(Transport, Port); Start as Server var sandbox = Netick.Unity.Network.StartAsServer(Transport, Port); Start as Single-Player (disables low level networking) var sandbox = Netick.Unity.Network.StartAsSinglePlayer(); Multiple Peers (Sandboxing) Learn More About Sandboxing You can start both a client and a server together: var sandboxes = Netick.Unity.Network.Launch(StartMode.MultiplePeers, new LaunchData() { Port = Port, TransportProvider = Transport, NumberOfServers = 1, NumberOfClients = 1 }); Starting multiple servers: int portOffset = 4567; int[] ports = new int[20]; for (int i = 0; i < 20; i++) ports[i] = portOffset + i; // starts multiple servers (20 servers) var sandboxes = Netick.Unity.Network.Launch(StartMode.MultiplePeers, new LaunchData() { Ports = ports, TransportProvider = Transport, NumberOfServers = 20 }); To shut down Netick completely: Netick.Unity.Network.Shutdown(); Connecting to the Server To connect the client to the server: sandbox.Connect(serverIPAddress); Disconnecting From the Server To disconnect the client: sandbox.Disconnect(); You are advised to have a game starting scene used for server finding/matchmaking."
  },
  "articles/network-object-instantiation-and-destruction/network-object-instantiation-and-destruction.html": {
    "href": "articles/network-object-instantiation-and-destruction/network-object-instantiation-and-destruction.html",
    "title": "Network Object Instantiation and Destruction | Netick Networking Engine",
    "summary": "Network Object Instantiation and Destruction Instantiate To Instantiate a network prefab: sandbox.NetworkInstantiate(prefab, position, Quaternion.identity); This must be called only in the server. Destroy To destroy a network object: sandbox.Destroy(obj) This will destroy obj and all of its nested Network Objects. This must be called only in the server. Warning Make sure to never use Unity’s instantiate/destroy methods to create/destroy a network object, only Netick’s methods. Warning Make sure that all your prefabs are registered by Netick in Netick Settings panel. And also make sure the prefab list is identical in both the client and the server (if you are running two Unity editors), otherwise, weird stuff will occur."
  },
  "articles/network-object-instantiation-and-destruction/network-prefab-pool.html": {
    "href": "articles/network-object-instantiation-and-destruction/network-prefab-pool.html",
    "title": "Network Prefab Pool | Netick Networking Engine",
    "summary": "Network Prefab Pool Object pooling is a very effective technique to avoid run-time allocations (and thus, improve performance), by creating a pool of objects of the same type, at the start of the game. So that when you want to instantiate a certain prefab, you will not create a new object in memory. But rather, all instances of that prefab are already created, and you simply grab one out of the pool and initialize it. And when you want to destroy an instance, instead of removing it from memory (which causes GC), you put it back on the pool – recycling it. Pooling is extremely useful and effective if you have a prefab in your game that you instantiate and destroy repeatedly. For instance, the bomb in Bomberman. Netick has a built-in pooling system that you can use. By default, all prefabs are not pooled. To enable pooling for a certain prefab, you must call InitializePool (should be called at the start of Netick in NetworkEventsListener so that all prefab instances created are pooled) on that prefab and pass it the initial amount to create: public override void OnStartup(NetworkSandbox sandbox) { var bombPrefab = sandbox.GetPrefab(\"Bomb\"); sandbox.InitializePool(bombPrefab, 5); } Note Check out the Bomberman sample if you are confused. It demonstrates pooling of the bomb prefab. And if this amount happens to be exceeded, Netick will simply create more objects in the pool automatically. And you don’t need to use special instantiate or destroy methods to deal with pooled prefabs, it all works through the same Sandbox.NetworkInstantiate and Sandbox.Destroy methods. Although you still need to reset your objects. However, Netick automatically resets all network properties to their declaration values. Resetting Prefab Instances You can simply use NetworkStart to reset your prefab instances."
  },
  "articles/networked-platform.html": {
    "href": "articles/networked-platform.html",
    "title": "| Netick Networking Engine",
    "summary": "Networked Platforms"
  },
  "articles/networked-procedural-generation.html": {
    "href": "articles/networked-procedural-generation.html",
    "title": "Networked Procedural Generation | Netick Networking Engine",
    "summary": "Networked Procedural Generation When you want to procedurally generate a level of static objects, you don't need to network any of the objects. Since the procedural generation operation can be deterministic, and therefore all you have to sync to be able to independently create the level in the client is the initial random seed. Example: public class MapCreator: NetworkBehaviour { [Networked] public int RandomSeed { get; set;} public override void NetworkStart() { if (IsServer) RandomSeed = Random.Range(0,1000); // setting the seed Random.InitState(RandomSeed); CreateMap(); } public void CreateMap() { // add here the logic for procedurally generating the map/level. } }"
  },
  "articles/networked-state.html": {
    "href": "articles/networked-state.html",
    "title": "Networked State | Netick Networking Engine",
    "summary": "Networked State Networked state is the data of the game that you want to replicate to players. In Netick, networked state is delta compressed, therefore only changes are replicated. If a field of a struct changes, only that field is replicated. If a counter increases, only the delta to the previous value is replicated. If your counter was at 32534536, and now it is at 32534537, it will be replicated as a delta of one. It applies to vectors and quaternions too. Thus, using as little bandwidth as possible. Every networked variable can be predicted and interpolated too. Allowing you to create complex networked systems easily. Network Properties A network property is a C# property which is replicated across the network. For a property to be networked, the attribute [Networked] must be added to it. Examples of networked properties: [Networked] public int Health {get; set;} [Networked] public float Speed {get; set;} [Networked] public Vector3 Velocity {get; set;} [Networked] public int Ammo {get; set;} [Networked] public NetworkBool IsAlive {get; set;} [Networked] public NetworkString32 Name {get; set;} Warning Reference types are not networkable. Warning If you are intending on building your game using IL2CPP, you must use NetworkBool instead of bool. Note Don't use types with sizes lower than 4 bytes such as byte or short, instead simply use int. Netick already compresses everything to only the required bits of the current value of a variable. So if an int variable current value is 5, it will only be serialized as a few bits, not anywhere near 4 bytes (the byte size of int). Network Arrays Network arrays are just like regular C# arrays, but their syntax is a bit different. They are defined using the NetworkArray<T> generic class. Example of a network array: [Networked(size: 5)] public readonly NetworkArray<int> IntArrayExample = new NetworkArray<int>(5) { 55, 66, 77 }; Warning size of [Networked(size: 32)] must be the same as the value that is passed to the array constructor new NetworkArray<int>(32). Network Array Structs Netick 2 introduces a new type of network array, network arrays that are completely value types - Network Array Structs. These are fixed-size struct arrays available only in 4 fixed sizes: 8, 16, 32, and 64. Network Array Structs are pretty useful since they can used as members of another struct, or even nested inside other arrays. In addition, they can be sent as RPC parameters. // Network Array Struct Examples [Networked] public NetworkArrayStruct8<int> IntFixedArray { get; set; } = new int[] {1 , 4 ,5}.ToNetworkStructArray8(); [Networked] public NetworkArrayStruct8<NetworkArrayStruct8<int>> ArrayOfArrays { get; set; }; Note Network Array Structs are treated as if they were simple struct types like int or float, so they must be defined as a property not as a field (like NetworkArray<T> that is non-fixed size). Changing Elements of Network Array Struct Because Network Array Structs are structs, the whole array will be replaced even when you change a single element. To avoid bugs, this should be how you change array elements: IntFixedArray = IntFixedArray.Set(index, value); // as you can see, we are reassigning the property with the new changed array which has the change. Network Collections In addition to NetworkArray<T>, Netick also has alternatives to C# collections that are fully synced, predicted, and interpolated. NetworkLinkedList<T> NetworkDictionary<TKey,TValue> NetworkHashSet<T> NetworkUnorderedList<T> NetworkStack<T> NetworkQueue<T> In terms of bandwidth usage, the most expensive collection is NetworkDictionary, while the cheapest is NetworkUnorderedList (excluding NetworkArray). The order from the most expensive to the cheapest is: NetworkDictionary > NetworkLinkedList > NetworkHashSet > NetworkQueue > NetworkStack > NetworkUnorderedList. However, note that this only relates to the bandwidth usage when adding/removing elements, as all collections (or any networked variable) use no bandwidth or CPU time when they're idle and not changing. Usage examples: [Networked(size: 5)] public readonly NetworkDictionary<int, int> MyNetworkDictionary = new NetworkDictionary<int, int>(5); [Networked(size: 5)] public readonly NetworkHashSet<int> MyNetworkHashSet = new NetworkHashSet<int>(5); [Networked(size: 5)] public readonly NetworkLinkedList<int> MyNetworkLinkedList = new NetworkLinkedList<int>(5); [Networked(size: 5)] public readonly NetworkUnorderedList<int> MyNetworkUnorderedList = new NetworkUnorderedList<int>(5); [Networked(size: 5)] public readonly NetworkStack<int> MyNetworkedStack = new NetworkStack<int>(5); [Networked(size: 5)] public readonly NetworkQueue<int> MyNetworkedQueue = new NetworkQueue<int>(5); Removing and adding elements is the same as with C# collections. Note The size that you pass to [Networked] and the constructor represents the fixed capacity of the collection. The collections don't support resizing as all network state sizes are set at compile time. Network Structs Netick can synchronize any struct that does not contain class-based arrays or references. Which includes all C# primitive types and Unity/Godot/Flax primitive types. Example: [Networked] public struct MyNestedStruct { public int Int; public NetworkBool Bool; [Networked] public float Float { get; set;} [Networked] public Vector3 Position { get; set;} [Networked] public Quaternion Rotation { get; set;} [Networked] public Color Color { get; set;} public NetworkString8 Name; } [Networked] public struct MyStruct { public MyNestedStruct MyNestedStruct; public NetworkArrayStruct8<int> StructArray; public int Int; public NetworkBool Bool; [Networked] public float Float { get; set;} public double Double; } [Networked] public MyStruct MyStructProperty {get; set;} Note string is not supported as a type that can be used inside a struct. Use NetworkString instead. Note [Networked] attribute on structs is optional. However, when adding it to a struct, it allows float-based types (such as float or Vector3, which also have [Networked] on them) of a struct to have extra compression on them. Networking References to NetworkObject and NetworkBehaviour Since you can't directly synchronize class references, we provide two helper structs that are used to synchronize a reference to NetworkObject and NetworkBehaviour: NetworkObjectRef Usage Example: public class PlayerController : NetworkBehaviour { [Networked] public NetworkObjectRef MyPlayer { get; set;} public override void NetworkStart() { // assigning the ref MyPlayer = Object.GetRef(); } public void ExampleOfUsingTheRef() { // getting the object from the ref var netObj = MyPlayer.GetObject(Sandbox); // or TryGetObject } } NetworkBehaviourRef Usage Example: public class PlayerController: NetworkBehaviour { [Networked] public NetworkBehaviourRef<PlayerController> MyPlayer { get; set;} public override void NetworkStart() { // assigning the ref MyPlayer = this.GetRef<PlayerController>; } public void ExampleOfUsingTheRef() { // getting the behaviour from the ref var playerController = MyPlayer.GetBehaviour(Sandbox); // or TryGetBehaviour } } Replication Relevancy You can choose to replicate a property only to the Input Source client of the object. This is done using the optional parameter relevancy of [Networked]. Example: [Networked(relevancy: Relevancy.InputSource)] public int Ammo {get; set;} State Synchronization Updates to the network state are atomic, it's not possible for a property to update in the client without other changed properties to update alongside it. If you change two (or more) properties in the server at the same time (or in two subsequent ticks), you are ensured to have both replicate together in the client. This makes it so that you don't have to worry about packet loss and possible race conditions that might occur due to some properties updates arriving while others arriving later. This simplifies how you program your game as you never have to worry about such things happening. This also means that when you create an object in the server, assign some initial values to some network properties, when this object is created in the client, inside NetworkStart of that object you will have full initial state that you assigned in the server."
  },
  "articles/optimizing-large-numbers-of-objects.html": {
    "href": "articles/optimizing-large-numbers-of-objects.html",
    "title": "Optimizing Large Numbers of Objects | Netick Networking Engine",
    "summary": "Optimizing Large Numbers of Objects Usually networked objects in a video game are simulated in one of two ways: Internal Simulation Internal Simulation refers to objects which are simulated and changed from within. Objects such as these include the character of the player. They also include objects such as vehicles, all sorts of physics objects, and game management objects. Any object that is self-controlled and needs to run each tick is within this category. External Simulation External Simulation refers to objects that never simulate or change themselves, instead they are controlled from the outside. There are many examples of such objects: doors, pickups, trees, buildings, etc. All these objects are altered from an external object that belongs to the first category (Internal Simulation). These objects don't need to run themselves or have NetworkFixedUpdate, NetworkUpdate, or NetworkRender run on them each tick/frame. Therefore we should simply exclude them from the network loop, meaning all of their network loop methods (NetworkFixedUpdate, NetworkUpdate, NetworkRender, etc) will not be invoked. This will save a lot of performance, potentially making some types of games possible when they wouldn't be. Netick makes this very simple. To make an object externally simulated, disable Add to Network Loop on its NetworkObject. It will no longer be simulated each tick, but it will still be synced, and its NetworkStart and NetworkDestroy methods invoked. The object will have no CPU cost almost at all, you can have 1000 objects and shouldn't see a difference in CPU performance, excluding the rendering cost which is irrelevant. It's important to note that you should stop using the built-in components such as NetworkTransform on these objects since these components assume the object is internally simulated. Instead, you would write simple scripts that react to networked properties using [OnChanged] callbacks to handle them. Example This is an example of a script that is used to synchronize the position of an object that will only be simulated externally. By a script on the player object, for instance. using UnityEngine; using Netick; using Netick.Unity; public class CustomPosSyncer : NetworkBehaviour { [Networked] public Vector3 Position { get; set; } [OnChanged(nameof(Position))] void OnPositionChanged(OnChangedData dat) { transform.position = Position; } }"
  },
  "articles/parenting.html": {
    "href": "articles/parenting.html",
    "title": "Parenting | Netick Networking Engine",
    "summary": "Parenting The parent of a network object can only be changed if you are the Input Source of the object, or if you are the owner (server). To change the parent of an object: Object.SetParent(newParent); Caution The original hierarchy of network prefab instances shouldn’t be changed at run-time. In other words, you shouldn’t unparent the original children of a prefab. Although, you can parent objects to them, just not unparenting them (prefab children) from their original parent."
  },
  "articles/physics-prediction.html": {
    "href": "articles/physics-prediction.html",
    "title": "Physics Prediction (Unity) | Netick Networking Engine",
    "summary": "Physics Prediction (Unity) Predicting physics means resimulating multiple physics steps in one tick. This can be very expensive and so by default physics prediction is turned off. To enable it, go to Netick -> Settings and enable Physics Prediction. To make a Rigidbody/Rigidbody2D predictable, add NetworkRigidbody/NetworkRigidbody2D to its GameObject. To enable/disable Physics Prediction in the client at runtime, use Sandbox.PhysicsPrediction. Cost of Predicting PhysX (Rigidbody3D) It's very expensive to predict 3D physics as PhysX and its integration with Unity perform very badly when calling PhysicsScene.Simulate multiple times in one frame, even with small numbers of rigidbodies. The cost of predicting physics increases with two factors: Ping Tickrate As ping increases, you would need to simulate more ticks in one frame for rollback and resimulation. As tickrate increases, the time period between each tick becomes smaller, therefore you will need to simulate more ticks for smaller values of latency. It's very much not recommended to enable 3D physics prediction, as it's almost impractical on some machines on relatively high tickrates (+33). It can take more than 10ms on some machines on 100ms ping just to resimulate a bunch of physics ticks. If you don't want to predict physics, you have two other alternatives: Not predicting physics at all, and make it server-authoritative completely. Make your physics objects client-authoritative by sending the resultant states as RPCs or network inputs."
  },
  "articles/prediction-in-depth.html": {
    "href": "articles/prediction-in-depth.html",
    "title": "Prediction In-Depth | Netick Networking Engine",
    "summary": "Prediction In-Depth Let's start this by doing a recap on what prediction means. Prediction is when the client tries to guess what the game (the networked state of the game) looks like in the server, starting from the latest received server world snapshot as a starting point. The client uses its local inputs (that have yet to be acknowledged and processed by the server) to simulate forward up to the latency (ping/RTT) between it and the server. Therefore, the client runs ahead of the server time, so that the inputs of the client arrive just when they are needed in the server. Put differently, from the perspective of the client, prediction means predicting the future state of the server world. However, for many types of games, namely First Person Shooters, it's common to only predict one (and few more) objects, notably the local player character. When we do this, our local player character object will live in the local (predicted) timeline. While remote objects (including remote players) will live in the remote timeline. What do we mean by these terms? Remote Timeline: Remote Timeline refers to the old or delayed timeline we see proxy objects in the client. It's delayed because of ping/latency, incoming data from the server takes a bit of time to arrive. A proxy object is any object that the client is not providing inputs to (not an Input Source of), and the client merely observes the incoming server state snapshots for it. Because the server data is delayed/old (due to latency), what we see for these objects is delayed by half RTT + interpolation delay. Local/Predicted Timeline: Local/Predicted Timeline refers to the timeline predicted objects in the client live in. The local timeline differs to the remote timeline by being ahead of the remote timeline by RTT + additional buffering (due to adaptation to non-ideal network conditions). Therefore, there is a discrepancy between the two timelines. Some objects will be in the local timeline, and others will be in the remote timeline. The remote timeline is out-of-sync with the local timeline, which gets worse with ping. Even though this might seem bad, but that's how almost every First Person Shooter works. The local player in an FPS game is in the predicted timeline, while other players (remote players) are in the remote timeline. Why is that though? Why not put all objects in the predicted timeline for an FPS game? The problem with this is that, usually, the acceleration rate of an FPS character is so fast that the prediction will always be wrong, and it results in a poor gameplay experience. You will see a player come out of a corner and suddenly disappear, due to mispredictions and their subsequent corrections. In addition, server-authoritative bullet hit-detection is tricky on predicted remote objects. Since, due to mispredictions, missed shots will be common. In contrast, lag-compensation, which is a technique that only works with the remote timeline, allows for perfect hit-detection. An important fact to emphasize is that it's impossible for the client to accurately predict the inputs of other clients. However, players usually don't drastically change their inputs from one moment to the other, which is a good thing. But, does this mean remote prediction is to be avoided? No. For many types of games, remote prediction provides a better gameplay experience than putting every other object (except the local player) in the remote timeline. Notably anytime you want to do comprehensive interactions (mostly physical interactions) between players, remote prediction will result in a better experience. This is because, without prediction, if you were to collide with a remote object, you will only see the effect of the collision by RTT time. Physics-based games, fighting games, and racing games are all examples of games where predicting remote objects is a better strategy. By default, Netick only predicts objects that the client is the Input Source of. To understand what it means to predict remote/proxy objects, let's explore an example. In Rocket Cars, we not only predict the local car, but also the other (remote) cars and the ball. Now, let's see what that means, and also let's see what happens when we don't do that. Look at the previous image. In this scenario, we assume that each car starts moving at the exact same time. Let's also assume that the cars were moving at the exact same speed for some time, and we are looking at what they look like after that amount of time. In addition, let's say that the ball was also moving in the same direction as the cars. Therefore, all the objects in this scenario are moving, and at the same direction. In the left-side figure, we see that all cars are aligned with each other, which is what we expect if they started moving at the exact same time and at the exact same speed. Everything looks correct. This is because the clients are not changing their inputs, so the input prediction is correct. But this is usually not the case in practice. However, this shows that prediction will converge to the correct state if the clients are not changing their inputs too much. Now, let's see what the game looks like if we didn't predict remote/proxy objects. Let's look at the right-side figure above. What we see here is that, now, only our local car is in the predicted position. Other cars are, to us, delayed. They are out-of-sync with the local player car. The gray ghost shapes show where the cars should be, if they were to be predicted. The difference in position here is the amount of positional discrepancy between the local/predicted timeline against the remote timeline, which is proportional to RTT/latency. So, the conclusion here is that neither approach is perfect. Not predicting remote objects will result in delayed collisions. Predicting them will result in mispredictions. This is the reality of game-networking, there is not a one-size-fit-all solution. You choose the lesser evil. The lesser evil for this game is to predict remote objects. Therefore, it's a matter of choosing which approach works better for a particular game. In conclusion, let's see the pros and cons of each approach: Without Proxy/Remote Prediction Pros Accurate Snapshots: the states of remote objects are correct, since they come directly from the received server snapshots. Lag Compensation: you can have perfect server-authoritative hit-detection using lag compensation for clients since what the clients see is what actually happened, without mispredictions. Low CPU Overhead: since you only simulate the local player, CPU performance will be better. Cons Weak Player-to-Player Interactions: usually the best approach is to disable collisions between players. Multiple Timelines: the local player is out-of-sync with remote players, due to being in the Local Timeline, while they are in the Remote Timeline. With Proxy/Remote Prediction Pros Good Player-to-Player Interactions: you can have smooth and responsive interactions between players, such as collisions. Single Timeline: all objects live in the same timeline, which is the local/predicted timeline. No desync between objects. Simpler Code: by being able to simulate other objects and have them all in the same timeline, the coding experience will be closer to single-player development. Cons Mispredictions: the rendered states of predicted remote objects are not necessarily states that actually happened in the server, due to mispredictions. One player can report seeing different things compared to other players, creating contradictory perspectives on what happened. Mispredictions get worse with higher pings, so clients with very high pings (+300) might have almost an unplayable experience. No Lag Compensation: you can't perform lag compensation on predicted objects. However, because all objects are in the same timeline, there is no need for lag compensation. But, due to mispredictions, the client hits will often miss. High CPU Overhead: predicting more objects will use more CPU time, and the cost of that increases with ping and tickrate. Predicting Remote/Proxy Objects Now, let's see how we can actually predict remote objects, in practice. Using Netick, this is quite simple. Simply change the Prediction Mode of an object to be equal to Everyone in the inspector. This will cause the NetworkFixedUpdate of this object to execute multiple times due to resimulation. However, this is not all. To be able to predict the input of other players, we need to sync their inputs. The following code snippet is taken from Rocket Cars. [Networked] public GameInput LastInput { get; set; } // We sync the last input for the player. So we can use it to predict remote players cars. public override void NetworkFixedUpdate() { if (FetchInput(out GameInput input)) LastInput = input; SimulateVehicle(LastInput); } That's all there is to it. FetchInput only returns true on the Input Source itself, and the server. So, by simply defining a network property to store the input in, we are able to sync the input to everyone, including observing (proxies) players. Notice that we don't actually try to predict the input, we simply use the last input for prediction. Because predicting that the client pressed something it never did is a lot worse than simply assuming the client is still pressing the same buttons. Rocket Cars serves as an excellent example of how Proxy/Remote Prediction works. Prediction Error Correction Smoothing By default, correcting mispredictions is instantaneous. This will cause the predicted remote objects to snap somewhere else when a player changes their movement direction suddenly. And as we said, the magnitude of mispredictions is proportional to latency. Therefore, for a smooth visual experience, we must smooth out the prediction correction. Netick implements a smooth correcter in NetworkTransfrom/NetworkRigidbody. By enabling it, it will smooth out the corrections over multiple frames. There are a few settings for it which will need to be fine-tuned to find what is best for your object. Input Delay A powerful technique to reduce mispredictions on remote objects is to to delay the inputs of everyone by a specific amount/ticks. This will make the game almost perfectly synced without mispredictions for players with pings roughly below the input delay. Example: public float InputDelay = 100; // in milliseconds public const int InputQueueCapacity = 6; [Networked(size: InputQueueCapacity)] public readonly NetworkQueue<MyInput> InputQueue = new(InputQueueCapacity); [Networked] public MyInput LastInput { get; private set; } public override void NetworkFixedUpdate() { if (FetchInput(out MyInput i)) { if (InputQueue.Count == InputQueueCapacity) InputQueue.Dequeue(); InputQueue.Enqueue(i); } int inputDelayInTicks = (int)Mathf.Round((InputDelay / 1000f) / Sandbox.FixedDeltaTime); if (InputQueue.Count > 0 && (Sandbox.Tick - InputQueue.Peek().Tick >= inputDelayInTicks)) LastInput = InputQueue.Dequeue(); // logic Move(LastInput); } Note that we've added a field called Tick to the input struct, which we assign it the value of Sandbox.Tick when setting the input struct fields."
  },
  "articles/remote-procedure-calls-rpcs.html": {
    "href": "articles/remote-procedure-calls-rpcs.html",
    "title": "Remote Procedure Calls (RPCs) | Netick Networking Engine",
    "summary": "Remote Procedure Calls (RPCs) RPCs are method calls on Network Behaviors that are replicated across the network. They can be used for syncing events or to transfer small amounts of data. An important use of RPCs is to set up the game and send configuration messages. Use reliable RPCs for things like that. Note While other solutions are heavily dependent on RPCs, Netick is designed to make usage of RPCs very minimal (less than 3 RPCs in the entire game). RPCs teach bad practices and produce spaghetti code. Read the article on RPCs vs Properties for more. Warning RPCs are not suitable for sending large amounts of data (e.g., over 500 bytes) or transferring files. For those use cases, refer to this article. An RPC example: [Rpc(source: RpcPeers.Everyone, target: RpcPeers.InputSource, isReliable: true, localInvoke: false)] private void MyRpc(int arg1) { // Code to be executed } You use the [Rpc] attribute to mark a method as an RPC. Static RPCs Static RPCs are RPCs not attached to a specific instance of a network behavior. Static RPCs must have their first parameter as a NetickEngine type. Which can be used to access the NetworkSandbox instance if needed. [Rpc] public static void MyStaticRpc(NetickEngine engine, int someRpcPara) { var sandbox = engine.UserObject as NetworkSandbox; } // this is how you would call the rpc: MyStaticRpc(Sandbox.Engine, 56); Warning RPCs are not called on resimulated ticks. Warning By default all RPCs are unreliable. [Rpc] method constraints Must have the return type of void. Must not have reference types as parameters. Must not have class-based network collections as parameters. Only NetworkArrayStruct varaints are allowed as array RPC parameters. Must not have string as a parameter type. Instead, you can use NetworkString varaints. [Rpc] attribute parameters Source: the peer/peers the RPC should be sent from Target: the peer/peers the RPC will be executed on isReliable: whether the RPC is sent reliably or unreliably localInvoke: whether to invoke the RPC locally or not Source and target can be any of the following: Owner (the server) Input Source: the client which is providing inputs for this Network Object Proxies: everyone except the Owner and the Input Source Everyone: the server and every connected client Source Connection of RPCs If you need to know which connection (a client, or the server) the current RPC is being executed from, you can use Sandbox.CurrentRpcSource [Rpc(source: RpcPeers.Everyone, target: RpcPeers.InputSource, isReliable: true, localInvoke: false)] private void MyRpc(int arg1) { var rpcSource = Sandbox.CurrentRpcSource; }"
  },
  "articles/rpcs-vs-properties.html": {
    "href": "articles/rpcs-vs-properties.html",
    "title": "RPCs vs Properties | Netick Networking Engine",
    "summary": "RPCs vs Properties RPCs can be used to replicate non-critical (often visual/cosmetic) events. In contrast, Network Properties are used to replicate critical gameplay state. Network Properties are best when you have a variable that is constantly changing and whose exact value matters for the duration of the game, because properties will replicate to everyone regardless of whether they joined the game in the middle or the start of it. Example: a health property. On the other hand, RPCs are only relevant at the time of their execution, meaning any client joining after the call will never receive anything about any RPCs before its time of joining. Example: a damage effect event. If an event happens infrequently and is merely visual (doesn’t affect gameplay, for example, a sound effect event) you can use an RPC for it. However, you can, and should, avoid using RPCs even for such events, and that’s by using a change callback using [OnChanged] attribute. Ideally, RPCs should only be used for setting up things in the server by the client (client->server RPC), or sending chat messages. Avoiding using RPCs It's highly recommended to avoid using RPCs, and only use them when necessary. Especially server->client RPCs, if possible, they should be completely avoided. And client->server RPCs should only be used for sending a player's name or setting up things or similar actions. RPCs from the client can be a security concern. Since you can't control how the client calls them. And they are not tick-aligned, which can be a problem if an RPC is intended to be used for tick-accurate gameplay logic. You can use network inputs to handle most of your client->server actions. RPCs from the server to every connected client are expensive. You can always find a way to mimic an RPC using a network property and an [OnChanged] event. Using OnChanged for Events OnChanged callbacks are very powerful. Their use-cases are endless. For a couple examples: A jump counter network property to sync jump audio. Increment it every time you jump, resulting in a callback that you can use to play jump audio. A health network property to sync death event. Check if the previous value is higher than the current value, and the current value has turned to 0. This means the player has died, and you can use the callback to create effects or play audio. Circular Buffers One of the easiest ways to avoid many types of RPCs is to use Circular Buffers. A circular buffer is a NetworkArray that you update in a circular/ring fashion. When you reach the end of the array, you start over at the beginning of the array - this is accomplished by using the modulo operator when indexing the array, using an incrementing value. Using this, you can synchronize many short-lived things such as projectiles, hit indicators, and more. Example: This example showcases how we can use circular buffers to synchronize hit indicators, usually seen in FPS games. Hit indicators are rotating arrows around the middle of the screen that point to the locations of where you were last being damaged from. public struct DamageIndicatorData { public NetworkObjectRef AttackerPlayer; public int Incrementor; } private int _hitIncrementor; [Networked(size: 5)] public readonly NetworkArray<DamageIndicatorData> DamageIndicatorsSources = new NetworkArray<DamageIndicatorData>(5); [OnChanged(nameof(DamageIndicatorsSources))] private void OnDamageIndicatorsSourcesChanged(OnChangedData info) { // invoking an event when the array changes. We subscribe to this event in a UI script to show the damage indicators and fade them overtime. OnDamageIndicatorsSourcesChangedEvent?.Invoke(info.GetArrayChangedElementIndex()); } // This is an example of modifying the circular buffer. public void ApplyDamage(NetworkObjectRef AttackerPlayer, int damageAmount) { // ................ // other code if (IsClient) return; DamageIndicatorsSources[_hitIncrementor % DamageIndicatorsSources.Length] = new DamageIndicatorData() { AttackerPlayer = AttackerPlayer, Incrementor = _hitIncrementor // we included the incrementor variable as part of the struct to force the OnChanged callback to fire again if the same attacker player was assigned. }; _hitIncrementor++; }"
  },
  "articles/samples/arena-shooter.html": {
    "href": "articles/samples/arena-shooter.html",
    "title": "Arena Shooter Sample (Unity) | Netick Networking Engine",
    "summary": "Arena Shooter Sample (Unity)"
  },
  "articles/samples/bomberman.html": {
    "href": "articles/samples/bomberman.html",
    "title": "Bombmerman (Unity) | Netick Networking Engine",
    "summary": "Bombmerman (Unity) This is a very simple clone of the popular Bomberman game. It's a 4-player game where players try to kill each other using bombs. Features Simple character controller Procedural level generation Pickups Download This is included in the main Netick package. https://github.com/NetickNetworking/NetickForUnity/tree/master/Samples~/Bomberman"
  },
  "articles/samples/dungeon-frenzy.html": {
    "href": "articles/samples/dungeon-frenzy.html",
    "title": "Dungeon Frenzy (Unity) | Netick Networking Engine",
    "summary": "Dungeon Frenzy (Unity) A simple 2D fast-paced platformer shooter. Made by one of our community members. Features Efficient projectile spawn system Spawn system Custom interpolation on weapon rotation Optional lag compensation scripts Server-authoritative hit-detection Custom execution order Download https://github.com/StinkySteak/dungeon-frenzy"
  },
  "articles/samples/simple-first-person.html": {
    "href": "articles/samples/simple-first-person.html",
    "title": "Simple First Person (Unity) | Netick Networking Engine",
    "summary": "Simple First Person (Unity) This is a very simple FPS game. Features Simple FPS character controller Download This is included in the main Netick package. https://github.com/NetickNetworking/NetickForUnity/tree/master/Samples~/First%20Person%20Shooter"
  },
  "articles/sandboxing.html": {
    "href": "articles/sandboxing.html",
    "title": "Sandboxing | Netick Networking Engine",
    "summary": "Sandboxing Sandboxing (also known as multi-peer) allows you to start multiple Netick instances in a single Unity process for various purposes: Starting multiple clients and a server. Starting multiple servers in a single Unity process. Sandboxes panel can be accessed by going to Netick > Sandboxes Starting Netick as Multiple Peers Starting a Client and a Server var sandboxes = Netick.Unity.Network.Launch(StartMode.MultiplePeers, new LaunchData() { Port = Port, TransportProvider = Transport, NumberOfServers = 1, NumberOfClients = 1 }); Starting Multiple Servers int portOffset = 4561; int[] ports = new int[20]; for (int i = 0; i < 20; i++) ports[i] = portOffset + i; var sandboxes = Netick.Unity.Network.Launch(StartMode.MultiplePeers, new LaunchData() { Ports = ports, TransportProvider = Transport, NumberOfServers = 20 }); Making Your Project Sandbox-Safe Running any project in multiple-peers mode does not always work, because of how some projects are set up. We call scripts or projects that can work with multiple sandboxes without issues as sandbox-safe. Notes on how to make your project sandbox-safe: Try to completely avoid using static variables. This is because you will run more than one instance of the game and the static variable will conflict between the different Netick instances, since each Netick instance must have its own copy of that variable. If you were using static for singleton types, you can do the same by using a Sandbox Prefab. Attach all your singleton-like components to your sandbox prefab and you can access them from any network behaviour using var mySingleton = Sandbox.GetComponent<TypeOfScript>();. This way each Netick instance will have its own singleton-like scripts. Use Sandbox.Physics.Raycast instead of Physics.Raycast when wanting to perform a raycast, same thing goes for other physics queries too. Using Sandbox.Physics.Raycast lets you query against the physics scene associated with this sandbox. Since Physics.Raycast simply uses the main Unity physics scene that is created when starting Unity, which is not sandbox-safe since it would raycast against objects in the first sandbox only (the sandbox that has the main Unity physics scene associated with it). When you want to disable a render/audio component on a GameObject, use SetEnabled instead of enabled. This method respects the running sandboxes so when a hidden sandbox enables a mesh renderer, for instance, it will not be visible because that sandbox is hidden. When you want to instantiate a non-networked GameObject, use Sandbox.Instantiate instead of GameObject.Instantiate. Sandbox.Instantiate respects the running sandboxes, so when a hidden sandbox instantiates a new GameObject, it will not be visible because that sandbox is hidden. Use Sandbox.Log, Sandbox.LogWarning, and Sandbox.LogError instead of Unity equivalents. These will include the name of the sandbox at the start of the log message. Use Sandbox.FindObjectOfType, Sandbox.FindObjectsOfType, Sandbox.FindGameObjectWithTag, and Sandbox.FindGameObjectsWithTag instead of Unity equivalents. The Netick methods respect the running sandboxes, and only try to find objects in the Sandbox's scene. Some useful properties and events for working with multiple sandboxes: // is the sandbox visible Sandbox.IsVisible // is input enabled for the sandbox Sandbox.InputEnabled // invoked when a sandbox visibility state (shown/hidden) changes. Sandbox.Events.OnVisibilityChanged"
  },
  "articles/scene-management.html": {
    "href": "articles/scene-management.html",
    "title": "Scene Management | Netick Networking Engine",
    "summary": "Scene Management Scene Loading To switch from the current scene to another: Sandbox.SwitchScene(\"sceneName\"); Additive Scenes Loading an additive scene: Sandbox.LoadSceneAsync(\"sceneName\", LoadSceneMode.Additive); Unloading an additive scene: Sandbox.UnloadSceneAsync(\"sceneName\"); Warning All scene load/unload methods must only be called in the server. Warning UnloadSceneAsync must only be called for unloading additively loaded scenes. To unload the main scene, use SwitchScene or LoadSceneAsync with LoadSceneMode.Single. Note To find the build index of a scene, open the Build Settings window where you will see a list of all added scenes. If the desired scene is not present, open that scene and add it to the list. Scene Events When you call Sandbox.LoadSceneAsync in the server, for instance, OnSceneOperationBegan event will be invoked in both the client and the server. You can use the NetworkSceneOperation parameter to know information about the scene load/unload operation like the current progress. OnSceneOperationDone will be invoked when that scene operation finishes. NetworkSceneOperation struct includes a Scene getter you can use to access the UnityEngine.SceneManagement.Scene struct. Using NetworkEventsListener On a script inheriting from NetworkEventsListener, you can run code for when a certain scene operation has began and when it has finished. public override void OnSceneOperationBegan(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) { // invoked in both the client and the server when when you call Sandbox.LoadSceneAsync, Sandbox.UnloadSceneAsync, or Sandbox.SwitchScene. // sceneOperation lets you know information about the scene operation like the current progress of the scene load/unload. } public override void OnSceneOperationDone(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) { // invoked in both the client and the server when a scene operation caused by calling Sandbox.LoadSceneAsync, Sandbox.UnloadSceneAsync, or Sandbox.SwitchScene finishes. } Using Sandbox.Events Or you can manually subscribe/unsubscribe on a NetworkBehaviour. public override void NetworkAwake() { Sandbox.Events.OnSceneOperationBegan += OnSceneOperationBegan; Sandbox.Events.OnSceneOperationDone += OnSceneOperationDone; } public override void NetworkDestroy() { Sandbox.Events.OnSceneOperationBegan -= OnSceneOperationBegan; Sandbox.Events.OnSceneOperationDone -= OnSceneOperationDone; } private void OnSceneOperationBegan(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) { } private void OnSceneOperationDone(NetworkSandbox sandbox, NetworkSceneOperation sceneOperation) { }"
  },
  "articles/script-execution-order.html": {
    "href": "articles/script-execution-order.html",
    "title": "Script Execution Order | Netick Networking Engine",
    "summary": "Script Execution Order The network methods on your Network Behavior classes are called from inside Netick, which means standard Unity MonoBehaviour script order control does not work here. To specify the order of execution, use the attributes: [ExecuteAfter(typeof(SomeOtherScript))] /* to specify that this script executes after SomeOtherScript) */ [ExecuteBefore(typeof(SomeOtherScript))] /* to specify that this script executes before SomeOtherScript */ [ExecutionOrder(65)] /* to specify explicitly the order number Example: [ExecuteAfter(typeof(SomeOtherScript))] public class BomberController : NetworkBehaviour { // ... }"
  },
  "articles/sending-large-amounts-of-data.html": {
    "href": "articles/sending-large-amounts-of-data.html",
    "title": "Sending Large Amounts of Data (Byte Arrays) | Netick Networking Engine",
    "summary": "Sending Large Amounts of Data (Byte Arrays) It's true that RPCs can be used to send small amount of data, but they shouldn't be used to send anything bigger than 500 bytes. For that, the proper way to send data is through the Data Sending API of Netick. Usage Example const int MyDataId = 5; unsafe void Sending_Data_Example() { var text = \"Trying to send some data!\"; byte[] bytes = Encoding.ASCII.GetBytes(text); // there are two variations of SendData, one that takes a pointer and one that takes a byte array. We are using the byte array version here. // sending to the server (in the client) Sandbox.ConnectedServer.SendData(MyDataId , bytes, bytes.Length, TransportDeliveryMethod.Reliable); // sending to a certain player (in the server) NetworkConnection playerConn = someObject.InputSource as NetworkConnection; playerConn.SendData(5, bytes, bytes.Length, TransportDeliveryMethod.Reliable); } // called by subscribing it to Sandbox.Events.OnDataReceived unsafe void OnDataReceived(NetworkSandbox sandbox, NetworkConnection sender, byte id, byte* data, int len, TransportDeliveryMethod transportDeliveryMethod) { if (id == MyDataId) // is the packet i want { // converting the data into a managed array (example) byte[] buffer = new byte[len]; // don't do this, it's just an example for (int i = 0; i < len; i++) buffer[i] = data[i]; } } Warning This functionality is dependent on the underlying transport. Make sure SendUserData is implemented on the transport you are using. All of the available transports already implement it."
  },
  "articles/transports.html": {
    "href": "articles/transports.html",
    "title": "Transports | Netick Networking Engine",
    "summary": "Transports LiteNetLib: Protocol: UDP Platforms: All, except WebGL Download: included with Netick Maintainer: Netick Staff UnityTransport Protocol: UDP & WebSocket Platforms: All Download: https://github.com/karrarrahim/UnityTransport-Netick Maintainer: Netick Staff Facepunch (Steam): Protocol: UDP Platforms: Windows, Mac OS, and Linux Download: https://github.com/Milk-Drinker01/Netick2-Facepunch-Transport Maintainer: community Steamworks.NET (Steam): Protocol: UDP Platforms: Windows, Mac OS, and Linux Download: https://github.com/Milk-Drinker01/Netick2-Steamworks-Transport Maintainer: community LiteNetLib with NAT Punch support: Protocol: UDP Platforms: All, except WebGL Download: https://github.com/StinkySteak/NetickLiteNetLibNatPunchTransport Maintainer: community WebRTC: Protocol: UDP Platforms: WebGL Download: https://github.com/StinkySteak/NetickWebRTCTransport Maintainer: community Multiplex Transport: Allows you to use more than one transport together. Download: https://github.com/StinkySteak/NetickMultiplexTransport Maintainer: community"
  },
  "articles/troubleshooting-guide.html": {
    "href": "articles/troubleshooting-guide.html",
    "title": "| Netick Networking Engine",
    "summary": "Jitter Troubleshooting Guide This article contains tips on common issues people face when using Netick. Jitter Issues"
  },
  "articles/understanding-client-server-model.html": {
    "href": "articles/understanding-client-server-model.html",
    "title": "Understanding Client-Server Model | Netick Networking Engine",
    "summary": "Understanding Client-Server Model When programming a single-player game, you usually don’t care about making sure the behavior and actions of players are legal, because it ultimately doesn’t matter since the game runs completely on their machine, and it’s impossible to prevent cheating when the client (player) has full access to everything related to the game. Because there is no central authority dictating the flow of the game, and enforcing the game rules and mechanics. That’s why it’s extremely easy to cheat in peer-to-peer games (where every player is connected to everyone else and everyone can decide whatever they want). Each client can interpret the outcome of the game however it wants. This is the problem that the client-server model solves. --- title: Client-Server Topology --- erDiagram Client1 ||--o{ Server : Connection Client2 ||--o{ Server : Connection Client3 ||--o{ Server : Connection Client4 ||--o{ Server : Connection In this model, rather than connecting the players to each other, every player is simply connected to a single node/machine called the server. In a perfect client-server implementation, the client simply sends inputs (which describe what they want to happen, e.g. moving, shooting) and the server basically responds by sending back the resultant game state to that input. Therefore the server is the one who executes the inputs and so there is no way for the client to cheat. Netick implements the client-server model + client-side prediction. You will see later how to construct these inputs and states to create your server-authoritative gameplay systems."
  },
  "articles/understanding-client-side-prediction/understanding-client-side-prediction.html": {
    "href": "articles/understanding-client-side-prediction/understanding-client-side-prediction.html",
    "title": "Understanding Client-Side Prediction (CSP) | Netick Networking Engine",
    "summary": "Understanding Client-Side Prediction (CSP) Tick-based Networking Before talking about Client-Side Prediction, it's important to first understand tick-based networking. Simply put, because each client could be running at a very different framerate from each other (and from the server), the only way to keep all of them in sync is by running the networked game logic at a fixed rate called the tickrate. Therefore, all clients and the server run at this fixed tickrate. The tickrate functions similarly to the fixed simulation rate of the physics engine in Unity, for instance. Unity runs the physics at a fixed rate for accurate and stable physics simulation, we use a fixed tickrate for accurate and proper network synchronization. Each fixed-time step executed is called a tick, which represents a point in time in the network loop. By being able to attribute actions to specific ticks, synchronizing a networked game becomes a lot simpler regardless of the various framerates each connected client runs at. Client-Side Prediction (CSP) In the Client-Server model, to be able to change the state (values of properties/arrays) of a network object, that change must be authoritatively done on the server. This is to ensure a secure and cheat-free gameplay experience, because ultimately the client’s executable can be tampered with or modified. Only the server can ever change the true state of network variables. What the client does to affect changes to the networked state is send inputs which are later executed/simulated by the server to produce the desired state which is sent back to the client/s. This is obviously not practical due to internet latency (round-trip time), as the latency increases, input delay increases. This will, without a doubt, lead to a very unpleasant and unresponsive gameplay experience. The solution to this is what’s commonly known as Client-Side Prediction. Client-Side Prediction basically means that the client, instead of waiting for the server to simulate its inputs and send the resultant states to it, the client executes them locally (in other words, predicts their outcome), and when the resultant state comes in, it applies that state (rolls back to the old server state) and resimulate all saved inputs that are targeted to ticks that are newer than that received state tick. All this happens in one tick, instantly. This ensures that the server still has the final say on the authority of the game (because, eventually, the client will overwrite its local state with whatever the server says), but at the same time allows the client to locally predict their input outcome and enjoy a lag-free experience. All simulation code must be done inside NetworkFixedUpdate on NetworkBehavior. This method is called every network tick to step forward the simulation. On the server, this method is only called for new inputs. While on the client, it can and will be called several times in one network tick to resimulate all saved inputs (up to the current predicted tick) when applying the incoming server state. See the previous figure to fully understand this. On what objects do resimulations happen? Objects the client is the Input Source for. Objects which has their Prediction Mode set to Everyone, instead of Input Source. Meaning not only the client who’s the Input Source predict them, but all other clients too. For other objects, it will only be called once for every network step/tick. Don’t forget that the server only ever simulates new ticks, it never resimulates previous ticks/inputs. CSP is exclusive to clients. To the server, it’s just like it’s a single-player game. For movement code, being aware of resimulations is unimportant. However, for things like shooting and other similar events, it’s vital to make sure that they only happen when the input is being simulated for the first time ever, otherwise, you would shoot several times for one bullet on the client, due to resimulations. This hazard is important to understand and deal with. Note that it’s usually impractical to predict everything the client does in the game, and it’s sometimes way easier to not let the client predict some stuff (due to the complexity that is associated with correcting some predictions), and wait for the server state. And for other things, simply making them client-authoritative saves a lot of headaches. You don’t have to make the game completely server-authoritative. Only the bits which are vital to the game experience."
  },
  "articles/understanding-client-side-prediction/writing-client-side-prediction-code.html": {
    "href": "articles/understanding-client-side-prediction/writing-client-side-prediction-code.html",
    "title": "Writing Client-Side Prediction Code | Netick Networking Engine",
    "summary": "Writing Client-Side Prediction Code Network Input Network Input describes what the player wants to do, which will be used to simulate the state of objects they want to control. This ensures that the client can’t directly change the state – the change happens by executing the input, which, even if tampered with, won’t be game-breaking. Defining Inputs To define a new input, create a struct that implements INetworkInput interface: [Networked] public struct MyInput : INetworkInput { [Networked] // adding [Networked] to a struct field and making it a property allows Netick to provide extra compression to it. public Vector2 Movement { get; set;} public NetworkBool Shoot; } Network Input Constraints: Must not have class-based network collections as fields. Only NetworkArrayStruct variants are allowed as network input fields. Must not have reference types as fields. Must not have string as a field. Instead, you can use NetworkString variants. Setting Inputs To set the fields of an input, you first need to acquire the input struct of the current tick, using Sandbox.GetInput. Then, you can set it inside NetworkUpdate on NetworkBehaviour: public override void NetworkUpdate() { var input = Sandbox.GetInput<MyInput>(); input.Movement += new Vector2(Mathf.Clamp(Input.GetAxis(\"Horizontal\"), -1f, 1f), Mathf.Clamp(Input.GetAxis(\"Vertical\"), -1f, 1f)); input.Shoot |= Input.GetMouseButton(0); Sandbox.SetInput(input); } You could also set them on OnInput of NetworkEventsListener, which is preferred. Simulating (Executing) Inputs To drive the gameplay based on the input struct, you must do that in NetworkFixedUpdate: public override void NetworkFixedUpdate() { if (FetchInput(out MyInput input)) { // clamp movement inputs input.Movement = new Vector3(Mathf.Clamp(input.Movement.x, -1f, 1f), Mathf.Clamp(input.Movement.y, -1f, 1f)); // movement var movementInputs = transform.TransformVector(new Vector3(input.Movement.x, 0, input.Movement.y)) * Speed; _CC.Move(movementInputs * Time.fixedDeltaTime); // shooting if (input.ShootInput == true && !IsResimulating) Shot(); } } To solidify your understanding, here's another more abstracted example: public override void NetworkFixedUpdate() { if (FetchInput(out MyInput input)) { // predicted action (movement). Move(input); // non-predicted action (interacting with a world object like a vehicle or a pickup). if (IsServer) if (input.Interact) TryToInteract(); // predicted action, but not resimulated (shooting). if (!IsResimulating) if (input.ShootInput) Shot(); } } Here, we see three types of actions: Predicted: used for actions like movement. It's the default case. Non-Predicted: used for actions that are best left unpredicted. Let's use riding a vehicle as an example. Even though this action can be predicted, it's usually not, to avoid conflicts where multiple players predict that they entered the vehicle as a driver only for it to be mispredicted because another player did the action first, which can be very frustrating and look bad. This is accomplished by making the code only runs in the server using IsServer. Predicted but not resimulated: used for actions that must only happen during the first time ever when a tick is executed, and not during its resimulations. Usually you use this for things like shooting, to avoid the sound effect playing more than once or the visual effects spawning multiple times. Note Everything that is modified around FetchInput, and also affects the networked state, must be networked using [Networked]. For example, if you have a variable that is changing over time which can affect the speed of the player, it must be networked. Note When IsResimulating equals to true, every [Networked] variable has an older value, since we are resimulating past ticks. The first resimulated tick will have the server state applied to every networked variable. Warning Sandbox.GetInput and Sandbox.SetInput are used to read and set the user inputs into the input struct. While FetchInput is used to actually use the input struct in the simulation. Note Make sure to clamp inputs to prevent malicious attempts to alter inputs to have big magnitudes leading to speedhacks. Inputs are the only thing the client has authority over. FetchInput tries to fetch an input for the state/tick being simulated/resimulated. It only returns true if either: We are providing inputs to this object – meaning we are the Input Source of the object. We are the owner (the server) of this object – receiving inputs from the client who’s the Input Source. And only if we have an input for the current tick being simulated. If not, it would return false. Usually, that happens due to packet loss. And to avoid the previous issue we talked about, we make sure that we are only shooting if we are simulating a new input, by checking IsResimulating. Input Source For a client to be able to provide inputs to be used in an Object’s NetworkFixedUpdate, and hence take control of it, that client must be the Input Source of that object. Otherwise, FetchInput will return false. To check if you are the Input Source, use IsInputSource. The server can also be the Input Source of objects, although it won’t do any CSP, since it needs not to, after all, it’s the server. You can set the Input Source of an object when instantiating it: sandbox.NetworkInstantiate(PlayerPrefab, spawnPos, Quaternion.identity, client); Changing the Input Source To set the Input Source of the object (must only be called on the server): Object.InputSource = newInputSource; To remove the Input Source of the object (must only be called on the server): Object.InputSource = null; Callbacks There are two methods you can override to run code when Input Source has changed or left the game: OnInputSourceChanged: called on the Input Source and server when the Input Source changes. OnInputSourceLeft: called on the owner (server) when the Input Source client has left the game. RPCs vs Inputs for Client->Server Actions Other networking solution rely heavily on the usage of RPCs. However, Netick allows for a much more easier, robust, and safer approach that will make most RPCs obsolete. Let's take an example to understand this. Say you want to interact with an object in the game world. A pickup, let's say. Now, instead of sending an RPC to this pickup, which will use additional bandwidth, in addition to being easily cheat-able (by being vulnerable to malicious users who will send RPCs to pickups that are not even nearby), you can simply use an Interact input field to implement the logic for it. public override void NetworkFixedUpdate() { if (FetchInput(out MyInput input)) { // movement ExecuteMovementLogic(input); if (input.Interact && IsServer) // adding IsServer when you don't want the client to predict this action. { if (Raycast(..., out var objectToInteractWith) { // do things } } } } This way, you have full server-authority on what objects the client can interact with, and the code is very simple to read and debug. It's almost the exact same code you would use for a single-player game, excluding the input fetching logic. Framerate Lower than Tickrate When the framerate is lower than the tickrate, there will be more ticks than frames. Therefore, two or more ticks need to use the same input of one frame. Not handling this can cause the player character to move slower during very low FPS. Enabling Input Reuse At Low FPS in Netick Settings Enabling this option would automatically let Netick reuse/duplicate the same input of one frame to one or more ticks. You can also know if the input fetched is a duplicated input or not as follows: public override void NetworkFixedUpdate() { if (FetchInput(out MyInput input, out bool isDuplicated)) { if (!isDuplicated) { // do stuff when this input is not a duplicate. } } } Detailed look at what happens in a single tick Note If you are new to Netick, you can ignore this section. To deeply understand CSP within Netick, let's take a look at what happens during a single tick: A: Start of Tick B: Rollback: apply received server state. Setting Sandbox.Tick to equal Sandbox.AuthoritativeTick. Before this, Sandbox.Tick was equal to Sandbox.PredictedTick. During this step, NetcodeIntoGameEngine will be invoked on all predicted objects - to apply the networked state into Unity components (such as transform). After this step is done, all predicted objects (in our interest list) are now in a past state compared to what they were previously. That's what rollback means. Additionally, even non-predicted objects that were modified in the client will also be rolled back. C: Resim: NetworkFixedUpdate will be called (only on predicted objects) as many times as Sandbox.Resimulations, to complete reconciliation. At the end of this step, Sandbox.Tick will be equal to Sandbox.PredictedTick. After this step is done, it's as if we went back to the state of the game at A, but with the added effect of reconciling with the server and correcting our potential mispredictions. For predicted objects, if no mispredictions occurred, it's as if nothing happened compared to A. But all non-predicted objects could be changed/moved due to receiving new states for them from the server. All of the previous steps are only relevant to the client. While what happens in the next step is the actual execution of a new tick - moving the simulation forward into a new state. D: NetworkFixedUpdate (forward/new tick) will be called for all objects, predicted or not. At the end of this, Sandbox.Tick/Sandbox.PredictedTick will be incremented by one. At the end of this step, GameEngineIntoNetcode will be invoked on all objects in the server, and only predicted objects in the client. This ensures network components responsible for syncing Unity components, such as NetworkTransform, have their networked state updated to be equal to the state of their corresponding Unity components. For instance, the transform component state variables (transform.position and transform.rotation) are applied to the internal network variables of NetworkTransform, inside GameEngineIntoNetcode of NetworkTransform. Note: predicted object means any object we are the input source of, or an object with Everyone prediction mode."
  },
  "download.html": {
    "href": "download.html",
    "title": "Download | Netick Networking Engine",
    "summary": "Download Download for Unity Download for Godot"
  },
  "index.html": {
    "href": "index.html",
    "title": "| Netick Networking Engine",
    "summary": "Documentation Getting Started Guide Manual API reference If you have any questions, requests, or anything, join our discord. Do you want to integrate your engine? If you want a custom integration for your engine, contact at support@netick.net, karsoftgames@gmail.com or have a casual conversation in our discord. Donate If you use and like Netick, consider supporting us to keep working and improving Netick! Donate"
  }
}