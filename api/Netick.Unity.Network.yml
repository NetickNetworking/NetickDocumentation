### YamlMime:ManagedReference
items:
- uid: Netick.Unity.Network
  commentId: T:Netick.Unity.Network
  id: Network
  parent: Netick.Unity
  children:
  - Netick.Unity.Network.CloneDefaultConfig
  - Netick.Unity.Network.Config
  - Netick.Unity.Network.Focus(Netick.Unity.NetworkSandbox)
  - Netick.Unity.Network.Init(Netick.Unity.NetickConfig)
  - Netick.Unity.Network.Instance
  - Netick.Unity.Network.IsHeadless
  - Netick.Unity.Network.IsRunning
  - Netick.Unity.Network.Launch(Netick.Unity.SandboxLaunchData)
  - Netick.Unity.Network.Launch(Netick.Unity.StartMode,Netick.Unity.LaunchData)
  - Netick.Unity.Network.Launch(System.Collections.Generic.List{Netick.Unity.SandboxLaunchData})
  - Netick.Unity.Network.Sandboxes
  - Netick.Unity.Network.Shutdown(System.Boolean)
  - Netick.Unity.Network.ShutdownImmediately(System.Boolean)
  - Netick.Unity.Network.ShutdownSandbox(Netick.Unity.NetworkSandbox,System.Boolean)
  - Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  - Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  - Netick.Unity.Network.StartAsHost(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  - Netick.Unity.Network.StartAsMultiplePeers(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Boolean,System.Boolean,System.Int32,Netick.Unity.NetickConfig)
  - Netick.Unity.Network.StartAsServer(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  - Netick.Unity.Network.StartAsServerAndClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Int32)
  - Netick.Unity.Network.StartAsSinglePlayer(UnityEngine.GameObject,Netick.Unity.NetickConfig)
  - Netick.Unity.Network.StartMode
  - Netick.Unity.Network.Version
  langs:
  - csharp
  - vb
  name: Network
  nameWithType: Network
  fullName: Netick.Unity.Network
  type: Class
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Manages Netick and its sandboxes, and is used to start and shut down Netick.
  example: []
  syntax:
    content: 'public sealed class Network : MonoBehaviour'
    content.vb: Public NotInheritable Class Network Inherits MonoBehaviour
  inheritance:
  - System.Object
- uid: Netick.Unity.Network.Version
  commentId: F:Netick.Unity.Network.Version
  id: Version
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Version
  nameWithType: Network.Version
  fullName: Netick.Unity.Network.Version
  type: Field
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The version of Netick.
  example: []
  syntax:
    content: public const string Version = "0.14.29"
    return:
      type: System.String
    content.vb: Public Const Version As String = "0.14.29"
- uid: Netick.Unity.Network.Init(Netick.Unity.NetickConfig)
  commentId: M:Netick.Unity.Network.Init(Netick.Unity.NetickConfig)
  id: Init(Netick.Unity.NetickConfig)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Init(NetickConfig)
  nameWithType: Network.Init(NetickConfig)
  fullName: Netick.Unity.Network.Init(Netick.Unity.NetickConfig)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Initializes Netick. This is automatically called when you start Netick. 

    <p>If you don't provide a <xref href="Netick.Unity.NetickConfig" data-throw-if-not-resolved="false"></xref>, Netick will use the default config, which can be modified/found in (Netick -&gt; Settings).</p>
  example: []
  syntax:
    content: public static void Init(NetickConfig config = null)
    parameters:
    - id: config
      type: Netick.Unity.NetickConfig
    content.vb: Public Shared Sub Init(config As NetickConfig = Nothing)
  overload: Netick.Unity.Network.Init*
- uid: Netick.Unity.Network.CloneDefaultConfig
  commentId: M:Netick.Unity.Network.CloneDefaultConfig
  id: CloneDefaultConfig
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: CloneDefaultConfig()
  nameWithType: Network.CloneDefaultConfig()
  fullName: Netick.Unity.Network.CloneDefaultConfig()
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public static NetickConfig CloneDefaultConfig()
    return:
      type: Netick.Unity.NetickConfig
    content.vb: Public Shared Function CloneDefaultConfig() As NetickConfig
  overload: Netick.Unity.Network.CloneDefaultConfig*
- uid: Netick.Unity.Network.Shutdown(System.Boolean)
  commentId: M:Netick.Unity.Network.Shutdown(System.Boolean)
  id: Shutdown(System.Boolean)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Shutdown(bool)
  nameWithType: Network.Shutdown(bool)
  fullName: Netick.Unity.Network.Shutdown(bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: 'Shuts down Netick and destroys all sandboxes. The shutdown will occur in the next frame. For immediate shutdown, use: <xref href="Netick.Unity.Network.ShutdownImmediately(System.Boolean)" data-throw-if-not-resolved="false"></xref>'
  example: []
  syntax:
    content: public static void Shutdown(bool destroyAllNetworkObjects = false)
    parameters:
    - id: destroyAllNetworkObjects
      type: System.Boolean
    content.vb: Public Shared Sub Shutdown(destroyAllNetworkObjects As Boolean = False)
  overload: Netick.Unity.Network.Shutdown*
  nameWithType.vb: Network.Shutdown(Boolean)
  fullName.vb: Netick.Unity.Network.Shutdown(Boolean)
  name.vb: Shutdown(Boolean)
- uid: Netick.Unity.Network.ShutdownImmediately(System.Boolean)
  commentId: M:Netick.Unity.Network.ShutdownImmediately(System.Boolean)
  id: ShutdownImmediately(System.Boolean)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: ShutdownImmediately(bool)
  nameWithType: Network.ShutdownImmediately(bool)
  fullName: Netick.Unity.Network.ShutdownImmediately(bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Shuts down Netick and destroys all sandboxes immediately.
  example: []
  syntax:
    content: public static void ShutdownImmediately(bool destroyAllNetworkObjects = false)
    parameters:
    - id: destroyAllNetworkObjects
      type: System.Boolean
    content.vb: Public Shared Sub ShutdownImmediately(destroyAllNetworkObjects As Boolean = False)
  overload: Netick.Unity.Network.ShutdownImmediately*
  nameWithType.vb: Network.ShutdownImmediately(Boolean)
  fullName.vb: Netick.Unity.Network.ShutdownImmediately(Boolean)
  name.vb: ShutdownImmediately(Boolean)
- uid: Netick.Unity.Network.ShutdownSandbox(Netick.Unity.NetworkSandbox,System.Boolean)
  commentId: M:Netick.Unity.Network.ShutdownSandbox(Netick.Unity.NetworkSandbox,System.Boolean)
  id: ShutdownSandbox(Netick.Unity.NetworkSandbox,System.Boolean)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: ShutdownSandbox(NetworkSandbox, bool)
  nameWithType: Network.ShutdownSandbox(NetworkSandbox, bool)
  fullName: Netick.Unity.Network.ShutdownSandbox(Netick.Unity.NetworkSandbox, bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Shuts down a specific sandbox.
  example: []
  syntax:
    content: public static void ShutdownSandbox(NetworkSandbox sandbox, bool destroyAllNetworkObjects = false)
    parameters:
    - id: sandbox
      type: Netick.Unity.NetworkSandbox
      description: The sandbox to shut down.
    - id: destroyAllNetworkObjects
      type: System.Boolean
    content.vb: Public Shared Sub ShutdownSandbox(sandbox As NetworkSandbox, destroyAllNetworkObjects As Boolean = False)
  overload: Netick.Unity.Network.ShutdownSandbox*
  nameWithType.vb: Network.ShutdownSandbox(NetworkSandbox, Boolean)
  fullName.vb: Netick.Unity.Network.ShutdownSandbox(Netick.Unity.NetworkSandbox, Boolean)
  name.vb: ShutdownSandbox(NetworkSandbox, Boolean)
- uid: Netick.Unity.Network.Focus(Netick.Unity.NetworkSandbox)
  commentId: M:Netick.Unity.Network.Focus(Netick.Unity.NetworkSandbox)
  id: Focus(Netick.Unity.NetworkSandbox)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Focus(NetworkSandbox)
  nameWithType: Network.Focus(NetworkSandbox)
  fullName: Netick.Unity.Network.Focus(Netick.Unity.NetworkSandbox)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Focus on a specific sandbox.
  example: []
  syntax:
    content: public static void Focus(NetworkSandbox sandbox)
    parameters:
    - id: sandbox
      type: Netick.Unity.NetworkSandbox
      description: The sandbox to focus on.
    content.vb: Public Shared Sub Focus(sandbox As NetworkSandbox)
  overload: Netick.Unity.Network.Focus*
- uid: Netick.Unity.Network.StartAsServerAndClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Int32)
  commentId: M:Netick.Unity.Network.StartAsServerAndClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Int32)
  id: StartAsServerAndClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Int32)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: StartAsServerAndClient(NetworkTransportProvider, int, GameObject, int)
  nameWithType: Network.StartAsServerAndClient(NetworkTransportProvider, int, GameObject, int)
  fullName: Netick.Unity.Network.StartAsServerAndClient(Netick.Unity.NetworkTransportProvider, int, UnityEngine.GameObject, int)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Starts both a client (or clients) and a server.
  example: []
  syntax:
    content: >-
      [Obsolete("This is obsolete. Use Launch instead.")]

      public static Network.LaunchResults StartAsServerAndClient(NetworkTransportProvider transportProvider, int serverPort, GameObject sandboxPrefab = null, int numOfClients = 1)
    parameters:
    - id: transportProvider
      type: Netick.Unity.NetworkTransportProvider
    - id: serverPort
      type: System.Int32
      description: Network port.
    - id: sandboxPrefab
      type: UnityEngine.GameObject
    - id: numOfClients
      type: System.Int32
      description: Number of client sandboxes to create.
    return:
      type: Netick.Unity.Network.LaunchResults
      description: ''
    content.vb: >-
      <Obsolete("This is obsolete. Use Launch instead.")>

      Public Shared Function StartAsServerAndClient(transportProvider As NetworkTransportProvider, serverPort As Integer, sandboxPrefab As GameObject = Nothing, numOfClients As Integer = 1) As Network.LaunchResults
  overload: Netick.Unity.Network.StartAsServerAndClient*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This is obsolete. Use Launch instead.
  nameWithType.vb: Network.StartAsServerAndClient(NetworkTransportProvider, Integer, GameObject, Integer)
  fullName.vb: Netick.Unity.Network.StartAsServerAndClient(Netick.Unity.NetworkTransportProvider, Integer, UnityEngine.GameObject, Integer)
  name.vb: StartAsServerAndClient(NetworkTransportProvider, Integer, GameObject, Integer)
- uid: Netick.Unity.Network.StartAsMultiplePeers(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Boolean,System.Boolean,System.Int32,Netick.Unity.NetickConfig)
  commentId: M:Netick.Unity.Network.StartAsMultiplePeers(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Boolean,System.Boolean,System.Int32,Netick.Unity.NetickConfig)
  id: StartAsMultiplePeers(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,System.Boolean,System.Boolean,System.Int32,Netick.Unity.NetickConfig)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: StartAsMultiplePeers(NetworkTransportProvider, int, GameObject, bool, bool, int, NetickConfig)
  nameWithType: Network.StartAsMultiplePeers(NetworkTransportProvider, int, GameObject, bool, bool, int, NetickConfig)
  fullName: Netick.Unity.Network.StartAsMultiplePeers(Netick.Unity.NetworkTransportProvider, int, UnityEngine.GameObject, bool, bool, int, Netick.Unity.NetickConfig)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Starts multiple peers together.
  example: []
  syntax:
    content: public static Network.LaunchResults StartAsMultiplePeers(NetworkTransportProvider transportProvider, int port, GameObject sandboxPrefab = null, bool startAServer = true, bool startServerAsHost = true, int numOfClients = 1, NetickConfig config = null)
    parameters:
    - id: transportProvider
      type: Netick.Unity.NetworkTransportProvider
    - id: port
      type: System.Int32
    - id: sandboxPrefab
      type: UnityEngine.GameObject
    - id: startAServer
      type: System.Boolean
      description: Should we start a server too.
    - id: startServerAsHost
      type: System.Boolean
    - id: numOfClients
      type: System.Int32
      description: Number of clients to create.
    - id: config
      type: Netick.Unity.NetickConfig
    return:
      type: Netick.Unity.Network.LaunchResults
      description: ''
    content.vb: Public Shared Function StartAsMultiplePeers(transportProvider As NetworkTransportProvider, port As Integer, sandboxPrefab As GameObject = Nothing, startAServer As Boolean = True, startServerAsHost As Boolean = True, numOfClients As Integer = 1, config As NetickConfig = Nothing) As Network.LaunchResults
  overload: Netick.Unity.Network.StartAsMultiplePeers*
  nameWithType.vb: Network.StartAsMultiplePeers(NetworkTransportProvider, Integer, GameObject, Boolean, Boolean, Integer, NetickConfig)
  fullName.vb: Netick.Unity.Network.StartAsMultiplePeers(Netick.Unity.NetworkTransportProvider, Integer, UnityEngine.GameObject, Boolean, Boolean, Integer, Netick.Unity.NetickConfig)
  name.vb: StartAsMultiplePeers(NetworkTransportProvider, Integer, GameObject, Boolean, Boolean, Integer, NetickConfig)
- uid: Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  commentId: M:Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  id: StartAsClient(Netick.Unity.NetworkTransportProvider,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: StartAsClient(NetworkTransportProvider, GameObject, NetickConfig)
  nameWithType: Network.StartAsClient(NetworkTransportProvider, GameObject, NetickConfig)
  fullName: Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider, UnityEngine.GameObject, Netick.Unity.NetickConfig)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Starts Netick as a client.
  example: []
  syntax:
    content: public static NetworkSandbox StartAsClient(NetworkTransportProvider transportProvider, GameObject sandboxPrefab = null, NetickConfig config = null)
    parameters:
    - id: transportProvider
      type: Netick.Unity.NetworkTransportProvider
    - id: sandboxPrefab
      type: UnityEngine.GameObject
    - id: config
      type: Netick.Unity.NetickConfig
    return:
      type: Netick.Unity.NetworkSandbox
      description: The sandbox representing the client
    content.vb: Public Shared Function StartAsClient(transportProvider As NetworkTransportProvider, sandboxPrefab As GameObject = Nothing, config As NetickConfig = Nothing) As NetworkSandbox
  overload: Netick.Unity.Network.StartAsClient*
- uid: Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  commentId: M:Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  id: StartAsClient(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: StartAsClient(NetworkTransportProvider, int, GameObject, NetickConfig)
  nameWithType: Network.StartAsClient(NetworkTransportProvider, int, GameObject, NetickConfig)
  fullName: Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider, int, UnityEngine.GameObject, Netick.Unity.NetickConfig)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Starts Netick as a client.
  example: []
  syntax:
    content: public static NetworkSandbox StartAsClient(NetworkTransportProvider transportProvider, int port, GameObject sandboxPrefab = null, NetickConfig config = null)
    parameters:
    - id: transportProvider
      type: Netick.Unity.NetworkTransportProvider
    - id: port
      type: System.Int32
    - id: sandboxPrefab
      type: UnityEngine.GameObject
    - id: config
      type: Netick.Unity.NetickConfig
    return:
      type: Netick.Unity.NetworkSandbox
      description: The sandbox representing the client
    content.vb: Public Shared Function StartAsClient(transportProvider As NetworkTransportProvider, port As Integer, sandboxPrefab As GameObject = Nothing, config As NetickConfig = Nothing) As NetworkSandbox
  overload: Netick.Unity.Network.StartAsClient*
  nameWithType.vb: Network.StartAsClient(NetworkTransportProvider, Integer, GameObject, NetickConfig)
  fullName.vb: Netick.Unity.Network.StartAsClient(Netick.Unity.NetworkTransportProvider, Integer, UnityEngine.GameObject, Netick.Unity.NetickConfig)
  name.vb: StartAsClient(NetworkTransportProvider, Integer, GameObject, NetickConfig)
- uid: Netick.Unity.Network.StartAsSinglePlayer(UnityEngine.GameObject,Netick.Unity.NetickConfig)
  commentId: M:Netick.Unity.Network.StartAsSinglePlayer(UnityEngine.GameObject,Netick.Unity.NetickConfig)
  id: StartAsSinglePlayer(UnityEngine.GameObject,Netick.Unity.NetickConfig)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: StartAsSinglePlayer(GameObject, NetickConfig)
  nameWithType: Network.StartAsSinglePlayer(GameObject, NetickConfig)
  fullName: Netick.Unity.Network.StartAsSinglePlayer(UnityEngine.GameObject, Netick.Unity.NetickConfig)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Starts Netick in single player mode.
  example: []
  syntax:
    content: public static NetworkSandbox StartAsSinglePlayer(GameObject sandboxPrefab = null, NetickConfig config = null)
    parameters:
    - id: sandboxPrefab
      type: UnityEngine.GameObject
    - id: config
      type: Netick.Unity.NetickConfig
    return:
      type: Netick.Unity.NetworkSandbox
      description: The sandbox representing the server
    content.vb: Public Shared Function StartAsSinglePlayer(sandboxPrefab As GameObject = Nothing, config As NetickConfig = Nothing) As NetworkSandbox
  overload: Netick.Unity.Network.StartAsSinglePlayer*
- uid: Netick.Unity.Network.StartAsHost(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  commentId: M:Netick.Unity.Network.StartAsHost(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  id: StartAsHost(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: StartAsHost(NetworkTransportProvider, int, GameObject, NetickConfig)
  nameWithType: Network.StartAsHost(NetworkTransportProvider, int, GameObject, NetickConfig)
  fullName: Netick.Unity.Network.StartAsHost(Netick.Unity.NetworkTransportProvider, int, UnityEngine.GameObject, Netick.Unity.NetickConfig)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Starts Netick as a host.
  example: []
  syntax:
    content: public static NetworkSandbox StartAsHost(NetworkTransportProvider transportProvider, int port, GameObject sandboxPrefab = null, NetickConfig config = null)
    parameters:
    - id: transportProvider
      type: Netick.Unity.NetworkTransportProvider
    - id: port
      type: System.Int32
      description: Network port.
    - id: sandboxPrefab
      type: UnityEngine.GameObject
    - id: config
      type: Netick.Unity.NetickConfig
    return:
      type: Netick.Unity.NetworkSandbox
      description: The sandbox representing the server
    content.vb: Public Shared Function StartAsHost(transportProvider As NetworkTransportProvider, port As Integer, sandboxPrefab As GameObject = Nothing, config As NetickConfig = Nothing) As NetworkSandbox
  overload: Netick.Unity.Network.StartAsHost*
  nameWithType.vb: Network.StartAsHost(NetworkTransportProvider, Integer, GameObject, NetickConfig)
  fullName.vb: Netick.Unity.Network.StartAsHost(Netick.Unity.NetworkTransportProvider, Integer, UnityEngine.GameObject, Netick.Unity.NetickConfig)
  name.vb: StartAsHost(NetworkTransportProvider, Integer, GameObject, NetickConfig)
- uid: Netick.Unity.Network.StartAsServer(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  commentId: M:Netick.Unity.Network.StartAsServer(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  id: StartAsServer(Netick.Unity.NetworkTransportProvider,System.Int32,UnityEngine.GameObject,Netick.Unity.NetickConfig)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: StartAsServer(NetworkTransportProvider, int, GameObject, NetickConfig)
  nameWithType: Network.StartAsServer(NetworkTransportProvider, int, GameObject, NetickConfig)
  fullName: Netick.Unity.Network.StartAsServer(Netick.Unity.NetworkTransportProvider, int, UnityEngine.GameObject, Netick.Unity.NetickConfig)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Starts Netick as a server.
  example: []
  syntax:
    content: public static NetworkSandbox StartAsServer(NetworkTransportProvider transportProvider, int port, GameObject sandboxPrefab = null, NetickConfig config = null)
    parameters:
    - id: transportProvider
      type: Netick.Unity.NetworkTransportProvider
    - id: port
      type: System.Int32
      description: Network port.
    - id: sandboxPrefab
      type: UnityEngine.GameObject
    - id: config
      type: Netick.Unity.NetickConfig
    return:
      type: Netick.Unity.NetworkSandbox
      description: The sandbox representing the server
    content.vb: Public Shared Function StartAsServer(transportProvider As NetworkTransportProvider, port As Integer, sandboxPrefab As GameObject = Nothing, config As NetickConfig = Nothing) As NetworkSandbox
  overload: Netick.Unity.Network.StartAsServer*
  nameWithType.vb: Network.StartAsServer(NetworkTransportProvider, Integer, GameObject, NetickConfig)
  fullName.vb: Netick.Unity.Network.StartAsServer(Netick.Unity.NetworkTransportProvider, Integer, UnityEngine.GameObject, Netick.Unity.NetickConfig)
  name.vb: StartAsServer(NetworkTransportProvider, Integer, GameObject, NetickConfig)
- uid: Netick.Unity.Network.Launch(Netick.Unity.StartMode,Netick.Unity.LaunchData)
  commentId: M:Netick.Unity.Network.Launch(Netick.Unity.StartMode,Netick.Unity.LaunchData)
  id: Launch(Netick.Unity.StartMode,Netick.Unity.LaunchData)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Launch(StartMode, LaunchData)
  nameWithType: Network.Launch(StartMode, LaunchData)
  fullName: Netick.Unity.Network.Launch(Netick.Unity.StartMode, Netick.Unity.LaunchData)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public static Network.LaunchResults Launch(StartMode mode, LaunchData launchData)
    parameters:
    - id: mode
      type: Netick.Unity.StartMode
    - id: launchData
      type: Netick.Unity.LaunchData
    return:
      type: Netick.Unity.Network.LaunchResults
    content.vb: Public Shared Function Launch(mode As StartMode, launchData As LaunchData) As Network.LaunchResults
  overload: Netick.Unity.Network.Launch*
- uid: Netick.Unity.Network.Launch(Netick.Unity.SandboxLaunchData)
  commentId: M:Netick.Unity.Network.Launch(Netick.Unity.SandboxLaunchData)
  id: Launch(Netick.Unity.SandboxLaunchData)
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Launch(SandboxLaunchData)
  nameWithType: Network.Launch(SandboxLaunchData)
  fullName: Netick.Unity.Network.Launch(Netick.Unity.SandboxLaunchData)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public static NetworkSandbox Launch(SandboxLaunchData sandbox)
    parameters:
    - id: sandbox
      type: Netick.Unity.SandboxLaunchData
    return:
      type: Netick.Unity.NetworkSandbox
    content.vb: Public Shared Function Launch(sandbox As SandboxLaunchData) As NetworkSandbox
  overload: Netick.Unity.Network.Launch*
- uid: Netick.Unity.Network.Launch(System.Collections.Generic.List{Netick.Unity.SandboxLaunchData})
  commentId: M:Netick.Unity.Network.Launch(System.Collections.Generic.List{Netick.Unity.SandboxLaunchData})
  id: Launch(System.Collections.Generic.List{Netick.Unity.SandboxLaunchData})
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Launch(List<SandboxLaunchData>)
  nameWithType: Network.Launch(List<SandboxLaunchData>)
  fullName: Netick.Unity.Network.Launch(System.Collections.Generic.List<Netick.Unity.SandboxLaunchData>)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public static List<NetworkSandbox> Launch(List<SandboxLaunchData> sandboxes)
    parameters:
    - id: sandboxes
      type: System.Collections.Generic.List{Netick.Unity.SandboxLaunchData}
    return:
      type: System.Collections.Generic.List{Netick.Unity.NetworkSandbox}
    content.vb: Public Shared Function Launch(sandboxes As List(Of SandboxLaunchData)) As List(Of NetworkSandbox)
  overload: Netick.Unity.Network.Launch*
  nameWithType.vb: Network.Launch(List(Of SandboxLaunchData))
  fullName.vb: Netick.Unity.Network.Launch(System.Collections.Generic.List(Of Netick.Unity.SandboxLaunchData))
  name.vb: Launch(List(Of SandboxLaunchData))
- uid: Netick.Unity.Network.StartMode
  commentId: P:Netick.Unity.Network.StartMode
  id: StartMode
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: StartMode
  nameWithType: Network.StartMode
  fullName: Netick.Unity.Network.StartMode
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The start mode of Netick.
  example: []
  syntax:
    content: public static StartMode StartMode { get; }
    parameters: []
    return:
      type: Netick.Unity.StartMode
    content.vb: Public Shared ReadOnly Property StartMode As StartMode
  overload: Netick.Unity.Network.StartMode*
- uid: Netick.Unity.Network.IsRunning
  commentId: P:Netick.Unity.Network.IsRunning
  id: IsRunning
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: IsRunning
  nameWithType: Network.IsRunning
  fullName: Netick.Unity.Network.IsRunning
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if Netick is running, false otherwise.
  example: []
  syntax:
    content: public static bool IsRunning { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsRunning As Boolean
  overload: Netick.Unity.Network.IsRunning*
- uid: Netick.Unity.Network.Sandboxes
  commentId: P:Netick.Unity.Network.Sandboxes
  id: Sandboxes
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Sandboxes
  nameWithType: Network.Sandboxes
  fullName: Netick.Unity.Network.Sandboxes
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns the list of all sandboxes currently running in Netick.
  example: []
  syntax:
    content: public static IReadOnlyList<NetworkSandbox> Sandboxes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Netick.Unity.NetworkSandbox}
    content.vb: Public Shared ReadOnly Property Sandboxes As IReadOnlyList(Of NetworkSandbox)
  overload: Netick.Unity.Network.Sandboxes*
- uid: Netick.Unity.Network.Instance
  commentId: P:Netick.Unity.Network.Instance
  id: Instance
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Instance
  nameWithType: Network.Instance
  fullName: Netick.Unity.Network.Instance
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns the singleton instance of the Network class, which manages Netick.
  example: []
  syntax:
    content: public static Network Instance { get; }
    parameters: []
    return:
      type: Netick.Unity.Network
    content.vb: Public Shared ReadOnly Property Instance As Network
  overload: Netick.Unity.Network.Instance*
- uid: Netick.Unity.Network.Config
  commentId: P:Netick.Unity.Network.Config
  id: Config
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: Config
  nameWithType: Network.Config
  fullName: Netick.Unity.Network.Config
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns the configuration (of the first sandbox) used by Netick.
  example: []
  syntax:
    content: public static NetickConfig Config { get; }
    parameters: []
    return:
      type: Netick.Unity.NetickConfig
    content.vb: Public Shared ReadOnly Property Config As NetickConfig
  overload: Netick.Unity.Network.Config*
- uid: Netick.Unity.Network.IsHeadless
  commentId: P:Netick.Unity.Network.IsHeadless
  id: IsHeadless
  parent: Netick.Unity.Network
  langs:
  - csharp
  - vb
  name: IsHeadless
  nameWithType: Network.IsHeadless
  fullName: Netick.Unity.Network.IsHeadless
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if Netick is running in headless mode (batch mode), false otherwise.
  example: []
  syntax:
    content: public static bool IsHeadless { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Shared ReadOnly Property IsHeadless As Boolean
  overload: Netick.Unity.Network.IsHeadless*
references:
- uid: Netick.Unity
  commentId: N:Netick.Unity
  isExternal: true
  href: Netick.html
  name: Netick.Unity
  nameWithType: Netick.Unity
  fullName: Netick.Unity
  spec.csharp:
  - uid: Netick
    name: Netick
    isExternal: true
    href: Netick.html
  - name: .
  - uid: Netick.Unity
    name: Unity
    isExternal: true
    href: Netick.Unity.html
  spec.vb:
  - uid: Netick
    name: Netick
    isExternal: true
    href: Netick.html
  - name: .
  - uid: Netick.Unity
    name: Unity
    isExternal: true
    href: Netick.Unity.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Netick.Unity.NetickConfig
  commentId: T:Netick.Unity.NetickConfig
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetickConfig.html
  name: NetickConfig
  nameWithType: NetickConfig
  fullName: Netick.Unity.NetickConfig
- uid: Netick.Unity.Network.Init*
  commentId: Overload:Netick.Unity.Network.Init
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_Init_Netick_Unity_NetickConfig_
  name: Init
  nameWithType: Network.Init
  fullName: Netick.Unity.Network.Init
- uid: Netick.Unity.Network.CloneDefaultConfig*
  commentId: Overload:Netick.Unity.Network.CloneDefaultConfig
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_CloneDefaultConfig
  name: CloneDefaultConfig
  nameWithType: Network.CloneDefaultConfig
  fullName: Netick.Unity.Network.CloneDefaultConfig
- uid: Netick.Unity.Network.ShutdownImmediately(System.Boolean)
  commentId: M:Netick.Unity.Network.ShutdownImmediately(System.Boolean)
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_ShutdownImmediately_System_Boolean_
  name: ShutdownImmediately(bool)
  nameWithType: Network.ShutdownImmediately(bool)
  fullName: Netick.Unity.Network.ShutdownImmediately(bool)
  nameWithType.vb: Network.ShutdownImmediately(Boolean)
  fullName.vb: Netick.Unity.Network.ShutdownImmediately(Boolean)
  name.vb: ShutdownImmediately(Boolean)
  spec.csharp:
  - uid: Netick.Unity.Network.ShutdownImmediately(System.Boolean)
    name: ShutdownImmediately
    isExternal: true
    href: Netick.Unity.Network.html#Netick_Unity_Network_ShutdownImmediately_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: bool
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
  spec.vb:
  - uid: Netick.Unity.Network.ShutdownImmediately(System.Boolean)
    name: ShutdownImmediately
    isExternal: true
    href: Netick.Unity.Network.html#Netick_Unity_Network_ShutdownImmediately_System_Boolean_
  - name: (
  - uid: System.Boolean
    name: Boolean
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.boolean
  - name: )
- uid: Netick.Unity.Network.Shutdown*
  commentId: Overload:Netick.Unity.Network.Shutdown
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_Shutdown_System_Boolean_
  name: Shutdown
  nameWithType: Network.Shutdown
  fullName: Netick.Unity.Network.Shutdown
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Netick.Unity.Network.ShutdownImmediately*
  commentId: Overload:Netick.Unity.Network.ShutdownImmediately
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_ShutdownImmediately_System_Boolean_
  name: ShutdownImmediately
  nameWithType: Network.ShutdownImmediately
  fullName: Netick.Unity.Network.ShutdownImmediately
- uid: Netick.Unity.Network.ShutdownSandbox*
  commentId: Overload:Netick.Unity.Network.ShutdownSandbox
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_ShutdownSandbox_Netick_Unity_NetworkSandbox_System_Boolean_
  name: ShutdownSandbox
  nameWithType: Network.ShutdownSandbox
  fullName: Netick.Unity.Network.ShutdownSandbox
- uid: Netick.Unity.NetworkSandbox
  commentId: T:Netick.Unity.NetworkSandbox
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html
  name: NetworkSandbox
  nameWithType: NetworkSandbox
  fullName: Netick.Unity.NetworkSandbox
- uid: Netick.Unity.Network.Focus*
  commentId: Overload:Netick.Unity.Network.Focus
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_Focus_Netick_Unity_NetworkSandbox_
  name: Focus
  nameWithType: Network.Focus
  fullName: Netick.Unity.Network.Focus
- uid: Netick.Unity.Network.StartAsServerAndClient*
  commentId: Overload:Netick.Unity.Network.StartAsServerAndClient
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_StartAsServerAndClient_Netick_Unity_NetworkTransportProvider_System_Int32_UnityEngine_GameObject_System_Int32_
  name: StartAsServerAndClient
  nameWithType: Network.StartAsServerAndClient
  fullName: Netick.Unity.Network.StartAsServerAndClient
- uid: Netick.Unity.NetworkTransportProvider
  commentId: T:Netick.Unity.NetworkTransportProvider
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkTransportProvider.html
  name: NetworkTransportProvider
  nameWithType: NetworkTransportProvider
  fullName: Netick.Unity.NetworkTransportProvider
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: UnityEngine.GameObject
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: Netick.Unity.Network.LaunchResults
  commentId: T:Netick.Unity.Network.LaunchResults
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.Network.html
  name: Network.LaunchResults
  nameWithType: Network.LaunchResults
  fullName: Netick.Unity.Network.LaunchResults
  spec.csharp:
  - uid: Netick.Unity.Network
    name: Network
    isExternal: true
    href: Netick.Unity.Network.html
  - name: .
  - uid: Netick.Unity.Network.LaunchResults
    name: LaunchResults
    isExternal: true
    href: Netick.Unity.Network.LaunchResults.html
  spec.vb:
  - uid: Netick.Unity.Network
    name: Network
    isExternal: true
    href: Netick.Unity.Network.html
  - name: .
  - uid: Netick.Unity.Network.LaunchResults
    name: LaunchResults
    isExternal: true
    href: Netick.Unity.Network.LaunchResults.html
- uid: Netick.Unity.Network.StartAsMultiplePeers*
  commentId: Overload:Netick.Unity.Network.StartAsMultiplePeers
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_StartAsMultiplePeers_Netick_Unity_NetworkTransportProvider_System_Int32_UnityEngine_GameObject_System_Boolean_System_Boolean_System_Int32_Netick_Unity_NetickConfig_
  name: StartAsMultiplePeers
  nameWithType: Network.StartAsMultiplePeers
  fullName: Netick.Unity.Network.StartAsMultiplePeers
- uid: Netick.Unity.Network.StartAsClient*
  commentId: Overload:Netick.Unity.Network.StartAsClient
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_StartAsClient_Netick_Unity_NetworkTransportProvider_UnityEngine_GameObject_Netick_Unity_NetickConfig_
  name: StartAsClient
  nameWithType: Network.StartAsClient
  fullName: Netick.Unity.Network.StartAsClient
- uid: Netick.Unity.Network.StartAsSinglePlayer*
  commentId: Overload:Netick.Unity.Network.StartAsSinglePlayer
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_StartAsSinglePlayer_UnityEngine_GameObject_Netick_Unity_NetickConfig_
  name: StartAsSinglePlayer
  nameWithType: Network.StartAsSinglePlayer
  fullName: Netick.Unity.Network.StartAsSinglePlayer
- uid: Netick.Unity.Network.StartAsHost*
  commentId: Overload:Netick.Unity.Network.StartAsHost
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_StartAsHost_Netick_Unity_NetworkTransportProvider_System_Int32_UnityEngine_GameObject_Netick_Unity_NetickConfig_
  name: StartAsHost
  nameWithType: Network.StartAsHost
  fullName: Netick.Unity.Network.StartAsHost
- uid: Netick.Unity.Network.StartAsServer*
  commentId: Overload:Netick.Unity.Network.StartAsServer
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_StartAsServer_Netick_Unity_NetworkTransportProvider_System_Int32_UnityEngine_GameObject_Netick_Unity_NetickConfig_
  name: StartAsServer
  nameWithType: Network.StartAsServer
  fullName: Netick.Unity.Network.StartAsServer
- uid: Netick.Unity.Network.Launch*
  commentId: Overload:Netick.Unity.Network.Launch
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_Launch_Netick_Unity_StartMode_Netick_Unity_LaunchData_
  name: Launch
  nameWithType: Network.Launch
  fullName: Netick.Unity.Network.Launch
- uid: Netick.Unity.StartMode
  commentId: T:Netick.Unity.StartMode
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.StartMode.html
  name: StartMode
  nameWithType: StartMode
  fullName: Netick.Unity.StartMode
- uid: Netick.Unity.LaunchData
  commentId: T:Netick.Unity.LaunchData
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.LaunchData.html
  name: LaunchData
  nameWithType: LaunchData
  fullName: Netick.Unity.LaunchData
- uid: Netick.Unity.SandboxLaunchData
  commentId: T:Netick.Unity.SandboxLaunchData
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.SandboxLaunchData.html
  name: SandboxLaunchData
  nameWithType: SandboxLaunchData
  fullName: Netick.Unity.SandboxLaunchData
- uid: System.Collections.Generic.List{Netick.Unity.SandboxLaunchData}
  commentId: T:System.Collections.Generic.List{Netick.Unity.SandboxLaunchData}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<SandboxLaunchData>
  nameWithType: List<SandboxLaunchData>
  fullName: System.Collections.Generic.List<Netick.Unity.SandboxLaunchData>
  nameWithType.vb: List(Of SandboxLaunchData)
  fullName.vb: System.Collections.Generic.List(Of Netick.Unity.SandboxLaunchData)
  name.vb: List(Of SandboxLaunchData)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Netick.Unity.SandboxLaunchData
    name: SandboxLaunchData
    isExternal: true
    href: Netick.Unity.SandboxLaunchData.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Netick.Unity.SandboxLaunchData
    name: SandboxLaunchData
    isExternal: true
    href: Netick.Unity.SandboxLaunchData.html
  - name: )
- uid: System.Collections.Generic.List{Netick.Unity.NetworkSandbox}
  commentId: T:System.Collections.Generic.List{Netick.Unity.NetworkSandbox}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<NetworkSandbox>
  nameWithType: List<NetworkSandbox>
  fullName: System.Collections.Generic.List<Netick.Unity.NetworkSandbox>
  nameWithType.vb: List(Of NetworkSandbox)
  fullName.vb: System.Collections.Generic.List(Of Netick.Unity.NetworkSandbox)
  name.vb: List(Of NetworkSandbox)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: Netick.Unity.NetworkSandbox
    name: NetworkSandbox
    isExternal: true
    href: Netick.Unity.NetworkSandbox.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: Netick.Unity.NetworkSandbox
    name: NetworkSandbox
    isExternal: true
    href: Netick.Unity.NetworkSandbox.html
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Netick.Unity.Network.StartMode*
  commentId: Overload:Netick.Unity.Network.StartMode
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_StartMode
  name: StartMode
  nameWithType: Network.StartMode
  fullName: Netick.Unity.Network.StartMode
- uid: Netick.Unity.Network.IsRunning*
  commentId: Overload:Netick.Unity.Network.IsRunning
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_IsRunning
  name: IsRunning
  nameWithType: Network.IsRunning
  fullName: Netick.Unity.Network.IsRunning
- uid: Netick.Unity.Network.Sandboxes*
  commentId: Overload:Netick.Unity.Network.Sandboxes
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_Sandboxes
  name: Sandboxes
  nameWithType: Network.Sandboxes
  fullName: Netick.Unity.Network.Sandboxes
- uid: System.Collections.Generic.IReadOnlyList{Netick.Unity.NetworkSandbox}
  commentId: T:System.Collections.Generic.IReadOnlyList{Netick.Unity.NetworkSandbox}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<NetworkSandbox>
  nameWithType: IReadOnlyList<NetworkSandbox>
  fullName: System.Collections.Generic.IReadOnlyList<Netick.Unity.NetworkSandbox>
  nameWithType.vb: IReadOnlyList(Of NetworkSandbox)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Netick.Unity.NetworkSandbox)
  name.vb: IReadOnlyList(Of NetworkSandbox)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Netick.Unity.NetworkSandbox
    name: NetworkSandbox
    isExternal: true
    href: Netick.Unity.NetworkSandbox.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Netick.Unity.NetworkSandbox
    name: NetworkSandbox
    isExternal: true
    href: Netick.Unity.NetworkSandbox.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Netick.Unity.Network.Instance*
  commentId: Overload:Netick.Unity.Network.Instance
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_Instance
  name: Instance
  nameWithType: Network.Instance
  fullName: Netick.Unity.Network.Instance
- uid: Netick.Unity.Network
  commentId: T:Netick.Unity.Network
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.Network.html
  name: Network
  nameWithType: Network
  fullName: Netick.Unity.Network
- uid: Netick.Unity.Network.Config*
  commentId: Overload:Netick.Unity.Network.Config
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_Config
  name: Config
  nameWithType: Network.Config
  fullName: Netick.Unity.Network.Config
- uid: Netick.Unity.Network.IsHeadless*
  commentId: Overload:Netick.Unity.Network.IsHeadless
  isExternal: true
  href: Netick.Unity.Network.html#Netick_Unity_Network_IsHeadless
  name: IsHeadless
  nameWithType: Network.IsHeadless
  fullName: Netick.Unity.Network.IsHeadless
