### YamlMime:ManagedReference
items:
- uid: Netick.Unity.NetworkSandbox
  commentId: T:Netick.Unity.NetworkSandbox
  id: NetworkSandbox
  parent: Netick.Unity
  children:
  - Netick.Unity.NetworkSandbox.#ctor
  - Netick.Unity.NetworkSandbox.AttachBehaviour(Netick.Unity.NetickBehaviour)
  - Netick.Unity.NetworkSandbox.AttachGameObject(UnityEngine.GameObject)
  - Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody(UnityEngine.GameObject)
  - Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  - Netick.Unity.NetworkSandbox.AuthoritativeTick
  - Netick.Unity.NetworkSandbox.Config
  - Netick.Unity.NetworkSandbox.Connect(System.Int32,System.String,System.Byte[],System.Int32)
  - Netick.Unity.NetworkSandbox.ConnectedClients
  - Netick.Unity.NetworkSandbox.ConnectedPlayers
  - Netick.Unity.NetworkSandbox.ConnectedServer
  - Netick.Unity.NetworkSandbox.ContainsPlayer(Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.CreateMatch(System.String)
  - Netick.Unity.NetworkSandbox.CurrentRpcCaller
  - Netick.Unity.NetworkSandbox.CurrentRpcSource
  - Netick.Unity.NetworkSandbox.DeltaTime
  - Netick.Unity.NetworkSandbox.Destroy(Netick.Unity.NetworkObject)
  - Netick.Unity.NetworkSandbox.DestroyPool(UnityEngine.GameObject)
  - Netick.Unity.NetworkSandbox.DetachBehaviour(Netick.Unity.NetickBehaviour)
  - Netick.Unity.NetworkSandbox.DetachGameObject(UnityEngine.GameObject)
  - Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody(UnityEngine.GameObject)
  - Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  - Netick.Unity.NetworkSandbox.DisableComponent(UnityEngine.Component)
  - Netick.Unity.NetworkSandbox.DisconnectFromServer
  - Netick.Unity.NetworkSandbox.EnableComponent(UnityEngine.Component)
  - Netick.Unity.NetworkSandbox.Engine
  - Netick.Unity.NetworkSandbox.Events
  - Netick.Unity.NetworkSandbox.FindGameObjectWithTag(System.String,System.Boolean)
  - Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(System.String,System.Boolean)
  - Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(System.String,System.Collections.Generic.List{UnityEngine.GameObject},System.Boolean)
  - Netick.Unity.NetworkSandbox.FindObjectOfType``1(System.Boolean)
  - Netick.Unity.NetworkSandbox.FindObjectsOfType``1(System.Boolean)
  - Netick.Unity.NetworkSandbox.FindObjectsOfType``1(System.Collections.Generic.List{``0},System.Boolean)
  - Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.GameObject)
  - Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.MonoBehaviour)
  - Netick.Unity.NetworkSandbox.FixedDeltaTime
  - Netick.Unity.NetworkSandbox.GetBehaviour``1(Netick.Unity.NetworkBehaviourRef{``0})
  - Netick.Unity.NetworkSandbox.GetBehavioursOfType``1
  - Netick.Unity.NetworkSandbox.GetBehavioursOfType``1(System.Collections.Generic.List{``0})
  - Netick.Unity.NetworkSandbox.GetDefaultLoadSceneParameters
  - Netick.Unity.NetworkSandbox.GetDefaultPhysicsMode
  - Netick.Unity.NetworkSandbox.GetInput``1(System.Int32)
  - Netick.Unity.NetworkSandbox.GetLocalPlayerObject
  - Netick.Unity.NetworkSandbox.GetLocalPlayerObject``1
  - Netick.Unity.NetworkSandbox.GetObject(Netick.Unity.NetworkObjectRef)
  - Netick.Unity.NetworkSandbox.GetObject(System.Int32)
  - Netick.Unity.NetworkSandbox.GetPlayerById(Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.GetPlayerObject``1(Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.GetPlayerObject``1(Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.GetPrefab(System.String)
  - Netick.Unity.NetworkSandbox.InKBps
  - Netick.Unity.NetworkSandbox.InPacketLoss
  - Netick.Unity.NetworkSandbox.InitializePool(UnityEngine.GameObject,System.Int32,System.Boolean)
  - Netick.Unity.NetworkSandbox.InputEnabled
  - Netick.Unity.NetworkSandbox.Instantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)
  - Netick.Unity.NetworkSandbox.Instantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)
  - Netick.Unity.NetworkSandbox.InterestManagement
  - Netick.Unity.NetworkSandbox.InterpolationDelay
  - Netick.Unity.NetworkSandbox.IsClient
  - Netick.Unity.NetworkSandbox.IsConnected
  - Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall
  - Netick.Unity.NetworkSandbox.IsHost
  - Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall
  - Netick.Unity.NetworkSandbox.IsPlayer
  - Netick.Unity.NetworkSandbox.IsResimulating
  - Netick.Unity.NetworkSandbox.IsRunning
  - Netick.Unity.NetworkSandbox.IsServer
  - Netick.Unity.NetworkSandbox.IsVisible
  - Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.Kick(Netick.ServerConnection)
  - Netick.Unity.NetworkSandbox.LoadCustomSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)
  - Netick.Unity.NetworkSandbox.LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneMode)
  - Netick.Unity.NetworkSandbox.LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)
  - Netick.Unity.NetworkSandbox.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneMode)
  - Netick.Unity.NetworkSandbox.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneParameters)
  - Netick.Unity.NetworkSandbox.LocalInterpolation
  - Netick.Unity.NetworkSandbox.LocalPlayer
  - Netick.Unity.NetworkSandbox.Log(System.Object)
  - Netick.Unity.NetworkSandbox.Log(System.Object,UnityEngine.Object)
  - Netick.Unity.NetworkSandbox.LogError(System.Object)
  - Netick.Unity.NetworkSandbox.LogError(System.Object,UnityEngine.Object)
  - Netick.Unity.NetworkSandbox.LogWarning(System.Object)
  - Netick.Unity.NetworkSandbox.LogWarning(System.Object,UnityEngine.Object)
  - Netick.Unity.NetworkSandbox.Monitor
  - Netick.Unity.NetworkSandbox.Name
  - Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  - Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)
  - Netick.Unity.NetworkSandbox.NetworkTime
  - Netick.Unity.NetworkSandbox.Objects
  - Netick.Unity.NetworkSandbox.OutKBps
  - Netick.Unity.NetworkSandbox.OutPacketLoss
  - Netick.Unity.NetworkSandbox.Physics
  - Netick.Unity.NetworkSandbox.Physics2D
  - Netick.Unity.NetworkSandbox.PhysicsPrediction
  - Netick.Unity.NetworkSandbox.Players
  - Netick.Unity.NetworkSandbox.PostNetworkFixedUpdate
  - Netick.Unity.NetworkSandbox.PostNetworkRender
  - Netick.Unity.NetworkSandbox.PostNetworkUpdate
  - Netick.Unity.NetworkSandbox.PreNetworkFixedUpdate
  - Netick.Unity.NetworkSandbox.PreNetworkRender
  - Netick.Unity.NetworkSandbox.PreNetworkUpdate
  - Netick.Unity.NetworkSandbox.PredictedTick
  - Netick.Unity.NetworkSandbox.RTT
  - Netick.Unity.NetworkSandbox.RefreshMatchList
  - Netick.Unity.NetworkSandbox.RemoteInterpolation
  - Netick.Unity.NetworkSandbox.RemoveFromLoop(Netick.Unity.NetworkObject)
  - Netick.Unity.NetworkSandbox.ResimulationCount
  - Netick.Unity.NetworkSandbox.ResimulationStep
  - Netick.Unity.NetworkSandbox.Resimulations
  - Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime
  - Netick.Unity.NetworkSandbox.Scene
  - Netick.Unity.NetworkSandbox.ServerEndPoint
  - Netick.Unity.NetworkSandbox.SetComponentEnabled(UnityEngine.Component,System.Boolean)
  - Netick.Unity.NetworkSandbox.SetInput``1(``0,System.Int32)
  - Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject)
  - Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject)
  - Netick.Unity.NetworkSandbox.StartMode
  - Netick.Unity.NetworkSandbox.StartTimer(System.Single,System.Boolean)
  - Netick.Unity.NetworkSandbox.SwitchScene(System.Int32)
  - Netick.Unity.NetworkSandbox.SwitchScene(System.String)
  - Netick.Unity.NetworkSandbox.Tick
  - Netick.Unity.NetworkSandbox.TickToTime(Netick.Tick)
  - Netick.Unity.NetworkSandbox.TickToTime(System.Single)
  - Netick.Unity.NetworkSandbox.TimeToTick(System.Single)
  - Netick.Unity.NetworkSandbox.Timer
  - Netick.Unity.NetworkSandbox.Transport
  - Netick.Unity.NetworkSandbox.TryGetBehaviour``1(Netick.Unity.NetworkBehaviourRef{``0},``0@)
  - Netick.Unity.NetworkSandbox.TryGetBehaviour``1(System.Int32,``0@)
  - Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject(Netick.Unity.NetworkObject@)
  - Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject``1(``0@)
  - Netick.Unity.NetworkSandbox.TryGetObject(Netick.Unity.NetworkObjectRef,Netick.Unity.NetworkObject@)
  - Netick.Unity.NetworkSandbox.TryGetObject(System.Int32,Netick.Unity.NetworkObject@)
  - Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject@)
  - Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject@)
  - Netick.Unity.NetworkSandbox.TryGetPlayerObject``1(Netick.NetworkPlayer,``0@)
  - Netick.Unity.NetworkSandbox.TryGetPlayerObject``1(Netick.NetworkPlayerId,``0@)
  - Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync(System.Int32)
  - Netick.Unity.NetworkSandbox.UnloadSceneAsync(System.Int32)
  - Netick.Unity.NetworkSandbox.UnloadSceneAsync(System.String)
  - Netick.Unity.NetworkSandbox.UnloadSceneAsync(UnityEngine.SceneManagement.Scene)
  - Netick.Unity.NetworkSandbox.UserObject
  langs:
  - csharp
  - vb
  name: NetworkSandbox
  nameWithType: NetworkSandbox
  fullName: Netick.Unity.NetworkSandbox
  type: Class
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: NetworkSandbox represents a networked game instance in Netick. It encapsulates the entire simulation state for that instance.
  example: []
  syntax:
    content: 'public class NetworkSandbox : MonoBehaviour, IGameEngine'
    content.vb: Public Class NetworkSandbox Inherits MonoBehaviour Implements IGameEngine
  inheritance:
  - System.Object
  implements:
  - Netick.IGameEngine
- uid: Netick.Unity.NetworkSandbox.GetDefaultLoadSceneParameters
  commentId: M:Netick.Unity.NetworkSandbox.GetDefaultLoadSceneParameters
  id: GetDefaultLoadSceneParameters
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetDefaultLoadSceneParameters()
  nameWithType: NetworkSandbox.GetDefaultLoadSceneParameters()
  fullName: Netick.Unity.NetworkSandbox.GetDefaultLoadSceneParameters()
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public LoadSceneParameters GetDefaultLoadSceneParameters()
    return:
      type: UnityEngine.SceneManagement.LoadSceneParameters
    content.vb: Public Function GetDefaultLoadSceneParameters() As LoadSceneParameters
  overload: Netick.Unity.NetworkSandbox.GetDefaultLoadSceneParameters*
- uid: Netick.Unity.NetworkSandbox.GetDefaultPhysicsMode
  commentId: M:Netick.Unity.NetworkSandbox.GetDefaultPhysicsMode
  id: GetDefaultPhysicsMode
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetDefaultPhysicsMode()
  nameWithType: NetworkSandbox.GetDefaultPhysicsMode()
  fullName: Netick.Unity.NetworkSandbox.GetDefaultPhysicsMode()
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public LocalPhysicsMode GetDefaultPhysicsMode()
    return:
      type: UnityEngine.SceneManagement.LocalPhysicsMode
    content.vb: Public Function GetDefaultPhysicsMode() As LocalPhysicsMode
  overload: Netick.Unity.NetworkSandbox.GetDefaultPhysicsMode*
- uid: Netick.Unity.NetworkSandbox.EnableComponent(UnityEngine.Component)
  commentId: M:Netick.Unity.NetworkSandbox.EnableComponent(UnityEngine.Component)
  id: EnableComponent(UnityEngine.Component)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: EnableComponent(Component)
  nameWithType: NetworkSandbox.EnableComponent(Component)
  fullName: Netick.Unity.NetworkSandbox.EnableComponent(UnityEngine.Component)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void EnableComponent(Component component)
    parameters:
    - id: component
      type: UnityEngine.Component
    content.vb: Public Sub EnableComponent(component As Component)
  overload: Netick.Unity.NetworkSandbox.EnableComponent*
- uid: Netick.Unity.NetworkSandbox.DisableComponent(UnityEngine.Component)
  commentId: M:Netick.Unity.NetworkSandbox.DisableComponent(UnityEngine.Component)
  id: DisableComponent(UnityEngine.Component)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: DisableComponent(Component)
  nameWithType: NetworkSandbox.DisableComponent(Component)
  fullName: Netick.Unity.NetworkSandbox.DisableComponent(UnityEngine.Component)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void DisableComponent(Component component)
    parameters:
    - id: component
      type: UnityEngine.Component
    content.vb: Public Sub DisableComponent(component As Component)
  overload: Netick.Unity.NetworkSandbox.DisableComponent*
- uid: Netick.Unity.NetworkSandbox.SetComponentEnabled(UnityEngine.Component,System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.SetComponentEnabled(UnityEngine.Component,System.Boolean)
  id: SetComponentEnabled(UnityEngine.Component,System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: SetComponentEnabled(Component, bool)
  nameWithType: NetworkSandbox.SetComponentEnabled(Component, bool)
  fullName: Netick.Unity.NetworkSandbox.SetComponentEnabled(UnityEngine.Component, bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void SetComponentEnabled(Component component, bool enabled)
    parameters:
    - id: component
      type: UnityEngine.Component
    - id: enabled
      type: System.Boolean
    content.vb: Public Sub SetComponentEnabled(component As Component, enabled As Boolean)
  overload: Netick.Unity.NetworkSandbox.SetComponentEnabled*
  nameWithType.vb: NetworkSandbox.SetComponentEnabled(Component, Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.SetComponentEnabled(UnityEngine.Component, Boolean)
  name.vb: SetComponentEnabled(Component, Boolean)
- uid: Netick.Unity.NetworkSandbox.AttachGameObject(UnityEngine.GameObject)
  commentId: M:Netick.Unity.NetworkSandbox.AttachGameObject(UnityEngine.GameObject)
  id: AttachGameObject(UnityEngine.GameObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: AttachGameObject(GameObject)
  nameWithType: NetworkSandbox.AttachGameObject(GameObject)
  fullName: Netick.Unity.NetworkSandbox.AttachGameObject(UnityEngine.GameObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void AttachGameObject(GameObject gameObject)
    parameters:
    - id: gameObject
      type: UnityEngine.GameObject
    content.vb: Public Sub AttachGameObject(gameObject As GameObject)
  overload: Netick.Unity.NetworkSandbox.AttachGameObject*
- uid: Netick.Unity.NetworkSandbox.DetachGameObject(UnityEngine.GameObject)
  commentId: M:Netick.Unity.NetworkSandbox.DetachGameObject(UnityEngine.GameObject)
  id: DetachGameObject(UnityEngine.GameObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: DetachGameObject(GameObject)
  nameWithType: NetworkSandbox.DetachGameObject(GameObject)
  fullName: Netick.Unity.NetworkSandbox.DetachGameObject(UnityEngine.GameObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void DetachGameObject(GameObject gameObject)
    parameters:
    - id: gameObject
      type: UnityEngine.GameObject
    content.vb: Public Sub DetachGameObject(gameObject As GameObject)
  overload: Netick.Unity.NetworkSandbox.DetachGameObject*
- uid: Netick.Unity.NetworkSandbox.AttachBehaviour(Netick.Unity.NetickBehaviour)
  commentId: M:Netick.Unity.NetworkSandbox.AttachBehaviour(Netick.Unity.NetickBehaviour)
  id: AttachBehaviour(Netick.Unity.NetickBehaviour)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: AttachBehaviour(NetickBehaviour)
  nameWithType: NetworkSandbox.AttachBehaviour(NetickBehaviour)
  fullName: Netick.Unity.NetworkSandbox.AttachBehaviour(Netick.Unity.NetickBehaviour)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Attaches a <xref href="Netick.Unity.NetickBehaviour" data-throw-if-not-resolved="false"></xref> to the simulation.
  example: []
  syntax:
    content: public void AttachBehaviour(NetickBehaviour behaviour)
    parameters:
    - id: behaviour
      type: Netick.Unity.NetickBehaviour
      description: ''
    content.vb: Public Sub AttachBehaviour(behaviour As NetickBehaviour)
  overload: Netick.Unity.NetworkSandbox.AttachBehaviour*
- uid: Netick.Unity.NetworkSandbox.DetachBehaviour(Netick.Unity.NetickBehaviour)
  commentId: M:Netick.Unity.NetworkSandbox.DetachBehaviour(Netick.Unity.NetickBehaviour)
  id: DetachBehaviour(Netick.Unity.NetickBehaviour)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: DetachBehaviour(NetickBehaviour)
  nameWithType: NetworkSandbox.DetachBehaviour(NetickBehaviour)
  fullName: Netick.Unity.NetworkSandbox.DetachBehaviour(Netick.Unity.NetickBehaviour)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Detaches a <xref href="Netick.Unity.NetickBehaviour" data-throw-if-not-resolved="false"></xref> from the simulation.
  example: []
  syntax:
    content: public void DetachBehaviour(NetickBehaviour behaviour)
    parameters:
    - id: behaviour
      type: Netick.Unity.NetickBehaviour
      description: ''
    content.vb: Public Sub DetachBehaviour(behaviour As NetickBehaviour)
  overload: Netick.Unity.NetworkSandbox.DetachBehaviour*
- uid: Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  commentId: M:Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  id: AttachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: AttachNonNetworkedRigidbody(Rigidbody)
  nameWithType: NetworkSandbox.AttachNonNetworkedRigidbody(Rigidbody)
  fullName: Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void AttachNonNetworkedRigidbody(Rigidbody rigidbody)
    parameters:
    - id: rigidbody
      type: UnityEngine.Rigidbody
    content.vb: Public Sub AttachNonNetworkedRigidbody(rigidbody As Rigidbody)
  overload: Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody*
- uid: Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  commentId: M:Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  id: DetachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: DetachNonNetworkedRigidbody(Rigidbody)
  nameWithType: NetworkSandbox.DetachNonNetworkedRigidbody(Rigidbody)
  fullName: Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody(UnityEngine.Rigidbody)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void DetachNonNetworkedRigidbody(Rigidbody rigidbody)
    parameters:
    - id: rigidbody
      type: UnityEngine.Rigidbody
    content.vb: Public Sub DetachNonNetworkedRigidbody(rigidbody As Rigidbody)
  overload: Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody*
- uid: Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody(UnityEngine.GameObject)
  commentId: M:Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody(UnityEngine.GameObject)
  id: AttachNonNetworkedRigidbody(UnityEngine.GameObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: AttachNonNetworkedRigidbody(GameObject)
  nameWithType: NetworkSandbox.AttachNonNetworkedRigidbody(GameObject)
  fullName: Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody(UnityEngine.GameObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void AttachNonNetworkedRigidbody(GameObject rigidbodyGameObject)
    parameters:
    - id: rigidbodyGameObject
      type: UnityEngine.GameObject
    content.vb: Public Sub AttachNonNetworkedRigidbody(rigidbodyGameObject As GameObject)
  overload: Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody*
- uid: Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody(UnityEngine.GameObject)
  commentId: M:Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody(UnityEngine.GameObject)
  id: DetachNonNetworkedRigidbody(UnityEngine.GameObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: DetachNonNetworkedRigidbody(GameObject)
  nameWithType: NetworkSandbox.DetachNonNetworkedRigidbody(GameObject)
  fullName: Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody(UnityEngine.GameObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void DetachNonNetworkedRigidbody(GameObject rigidbodyGameObject)
    parameters:
    - id: rigidbodyGameObject
      type: UnityEngine.GameObject
    content.vb: Public Sub DetachNonNetworkedRigidbody(rigidbodyGameObject As GameObject)
  overload: Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody*
- uid: Netick.Unity.NetworkSandbox.RemoveFromLoop(Netick.Unity.NetworkObject)
  commentId: M:Netick.Unity.NetworkSandbox.RemoveFromLoop(Netick.Unity.NetworkObject)
  id: RemoveFromLoop(Netick.Unity.NetworkObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: RemoveFromLoop(NetworkObject)
  nameWithType: NetworkSandbox.RemoveFromLoop(NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.RemoveFromLoop(Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void RemoveFromLoop(NetworkObject obj)
    parameters:
    - id: obj
      type: Netick.Unity.NetworkObject
    content.vb: Public Sub RemoveFromLoop(obj As NetworkObject)
  overload: Netick.Unity.NetworkSandbox.RemoveFromLoop*
- uid: Netick.Unity.NetworkSandbox.Instantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)
  commentId: M:Netick.Unity.NetworkSandbox.Instantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)
  id: Instantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Instantiate(GameObject, Vector3, Quaternion)
  nameWithType: NetworkSandbox.Instantiate(GameObject, Vector3, Quaternion)
  fullName: Netick.Unity.NetworkSandbox.Instantiate(UnityEngine.GameObject, UnityEngine.Vector3, UnityEngine.Quaternion)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Instantiates a prefab. This must be called instead of <xref href="UnityEngine.Object.Instantiate(UnityEngine.Object)" data-throw-if-not-resolved="false"></xref> or its variations. 

    <p>Note: this must be called only for non-networked prefabs. If you want to instantiate a network prefab, use <xref href="Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject%2cUnityEngine.Vector3%2cUnityEngine.Quaternion%2cNetick.NetworkPlayer)" data-throw-if-not-resolved="false"></xref> instead.</p>
  example: []
  syntax:
    content: public GameObject Instantiate(GameObject prefab, Vector3 position, Quaternion rotation)
    parameters:
    - id: prefab
      type: UnityEngine.GameObject
    - id: position
      type: UnityEngine.Vector3
    - id: rotation
      type: UnityEngine.Quaternion
    return:
      type: UnityEngine.GameObject
    content.vb: Public Function Instantiate(prefab As GameObject, position As Vector3, rotation As Quaternion) As GameObject
  overload: Netick.Unity.NetworkSandbox.Instantiate*
- uid: Netick.Unity.NetworkSandbox.Instantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)
  commentId: M:Netick.Unity.NetworkSandbox.Instantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)
  id: Instantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Instantiate<T>(T, Vector3, Quaternion)
  nameWithType: NetworkSandbox.Instantiate<T>(T, Vector3, Quaternion)
  fullName: Netick.Unity.NetworkSandbox.Instantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public T Instantiate<T>(T prefab, Vector3 position, Quaternion rotation) where T : MonoBehaviour'
    parameters:
    - id: prefab
      type: '{T}'
    - id: position
      type: UnityEngine.Vector3
    - id: rotation
      type: UnityEngine.Quaternion
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function Instantiate(Of T As MonoBehaviour)(prefab As T, position As Vector3, rotation As Quaternion) As T
  overload: Netick.Unity.NetworkSandbox.Instantiate*
  nameWithType.vb: NetworkSandbox.Instantiate(Of T)(T, Vector3, Quaternion)
  fullName.vb: Netick.Unity.NetworkSandbox.Instantiate(Of T)(T, UnityEngine.Vector3, UnityEngine.Quaternion)
  name.vb: Instantiate(Of T)(T, Vector3, Quaternion)
- uid: Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayer)
  id: GetPlayerObject(Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetPlayerObject(NetworkPlayer)
  nameWithType: NetworkSandbox.GetPlayerObject(NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets the the associated NetworkObject (player object) with this player.
  example: []
  syntax:
    content: public NetworkObject GetPlayerObject(NetworkPlayer player)
    parameters:
    - id: player
      type: Netick.NetworkPlayer
    return:
      type: Netick.Unity.NetworkObject
      description: ''
    content.vb: Public Function GetPlayerObject(player As NetworkPlayer) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.GetPlayerObject*
- uid: Netick.Unity.NetworkSandbox.GetPlayerObject``1(Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.GetPlayerObject``1(Netick.NetworkPlayer)
  id: GetPlayerObject``1(Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetPlayerObject<T>(NetworkPlayer)
  nameWithType: NetworkSandbox.GetPlayerObject<T>(NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.GetPlayerObject<T>(Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets the the associated script (player object) of type T with this player.
  example: []
  syntax:
    content: 'public T GetPlayerObject<T>(NetworkPlayer player) where T : NetickBehaviour'
    parameters:
    - id: player
      type: Netick.NetworkPlayer
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function GetPlayerObject(Of T As NetickBehaviour)(player As NetworkPlayer) As T
  overload: Netick.Unity.NetworkSandbox.GetPlayerObject*
  nameWithType.vb: NetworkSandbox.GetPlayerObject(Of T)(NetworkPlayer)
  fullName.vb: Netick.Unity.NetworkSandbox.GetPlayerObject(Of T)(Netick.NetworkPlayer)
  name.vb: GetPlayerObject(Of T)(NetworkPlayer)
- uid: Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject@)
  id: TryGetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetPlayerObject(NetworkPlayer, out NetworkObject)
  nameWithType: NetworkSandbox.TryGetPlayerObject(NetworkPlayer, out NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayer, out Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Tries to get the the associated NetworkObject (player object) with this player.
  example: []
  syntax:
    content: public bool TryGetPlayerObject(NetworkPlayer player, out NetworkObject playerObject)
    parameters:
    - id: player
      type: Netick.NetworkPlayer
    - id: playerObject
      type: Netick.Unity.NetworkObject
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetPlayerObject(player As NetworkPlayer, playerObject As NetworkObject) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetPlayerObject*
  nameWithType.vb: NetworkSandbox.TryGetPlayerObject(NetworkPlayer, NetworkObject)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayer, Netick.Unity.NetworkObject)
  name.vb: TryGetPlayerObject(NetworkPlayer, NetworkObject)
- uid: Netick.Unity.NetworkSandbox.TryGetPlayerObject``1(Netick.NetworkPlayer,``0@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetPlayerObject``1(Netick.NetworkPlayer,``0@)
  id: TryGetPlayerObject``1(Netick.NetworkPlayer,``0@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetPlayerObject<T>(NetworkPlayer, out T)
  nameWithType: NetworkSandbox.TryGetPlayerObject<T>(NetworkPlayer, out T)
  fullName: Netick.Unity.NetworkSandbox.TryGetPlayerObject<T>(Netick.NetworkPlayer, out T)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Tries to get the the associated script (player object) of type T with this player.
  example: []
  syntax:
    content: 'public bool TryGetPlayerObject<T>(NetworkPlayer player, out T playerObject) where T : NetickBehaviour'
    parameters:
    - id: player
      type: Netick.NetworkPlayer
    - id: playerObject
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetPlayerObject(Of T As NetickBehaviour)(player As NetworkPlayer, playerObject As T) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetPlayerObject*
  nameWithType.vb: NetworkSandbox.TryGetPlayerObject(Of T)(NetworkPlayer, T)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetPlayerObject(Of T)(Netick.NetworkPlayer, T)
  name.vb: TryGetPlayerObject(Of T)(NetworkPlayer, T)
- uid: Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayerId)
  id: GetPlayerObject(Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetPlayerObject(NetworkPlayerId)
  nameWithType: NetworkSandbox.GetPlayerObject(NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.GetPlayerObject(Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets the the associated NetworkObject (player object) with this player.
  example: []
  syntax:
    content: public NetworkObject GetPlayerObject(NetworkPlayerId id)
    parameters:
    - id: id
      type: Netick.NetworkPlayerId
    return:
      type: Netick.Unity.NetworkObject
      description: ''
    content.vb: Public Function GetPlayerObject(id As NetworkPlayerId) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.GetPlayerObject*
- uid: Netick.Unity.NetworkSandbox.GetPlayerObject``1(Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.GetPlayerObject``1(Netick.NetworkPlayerId)
  id: GetPlayerObject``1(Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetPlayerObject<T>(NetworkPlayerId)
  nameWithType: NetworkSandbox.GetPlayerObject<T>(NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.GetPlayerObject<T>(Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets the the associated script (player object) of type T with this player.
  example: []
  syntax:
    content: 'public T GetPlayerObject<T>(NetworkPlayerId id) where T : NetickBehaviour'
    parameters:
    - id: id
      type: Netick.NetworkPlayerId
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function GetPlayerObject(Of T As NetickBehaviour)(id As NetworkPlayerId) As T
  overload: Netick.Unity.NetworkSandbox.GetPlayerObject*
  nameWithType.vb: NetworkSandbox.GetPlayerObject(Of T)(NetworkPlayerId)
  fullName.vb: Netick.Unity.NetworkSandbox.GetPlayerObject(Of T)(Netick.NetworkPlayerId)
  name.vb: GetPlayerObject(Of T)(NetworkPlayerId)
- uid: Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject@)
  id: TryGetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetPlayerObject(NetworkPlayerId, out NetworkObject)
  nameWithType: NetworkSandbox.TryGetPlayerObject(NetworkPlayerId, out NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayerId, out Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Tries to get the the associated NetworkObject (player object) with this player.
  example: []
  syntax:
    content: public bool TryGetPlayerObject(NetworkPlayerId id, out NetworkObject playerObject)
    parameters:
    - id: id
      type: Netick.NetworkPlayerId
    - id: playerObject
      type: Netick.Unity.NetworkObject
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetPlayerObject(id As NetworkPlayerId, playerObject As NetworkObject) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetPlayerObject*
  nameWithType.vb: NetworkSandbox.TryGetPlayerObject(NetworkPlayerId, NetworkObject)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetPlayerObject(Netick.NetworkPlayerId, Netick.Unity.NetworkObject)
  name.vb: TryGetPlayerObject(NetworkPlayerId, NetworkObject)
- uid: Netick.Unity.NetworkSandbox.TryGetPlayerObject``1(Netick.NetworkPlayerId,``0@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetPlayerObject``1(Netick.NetworkPlayerId,``0@)
  id: TryGetPlayerObject``1(Netick.NetworkPlayerId,``0@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetPlayerObject<T>(NetworkPlayerId, out T)
  nameWithType: NetworkSandbox.TryGetPlayerObject<T>(NetworkPlayerId, out T)
  fullName: Netick.Unity.NetworkSandbox.TryGetPlayerObject<T>(Netick.NetworkPlayerId, out T)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Tries to get the the associated script (player object) of type T with this player.
  example: []
  syntax:
    content: 'public bool TryGetPlayerObject<T>(NetworkPlayerId id, out T playerObject) where T : NetickBehaviour'
    parameters:
    - id: id
      type: Netick.NetworkPlayerId
    - id: playerObject
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetPlayerObject(Of T As NetickBehaviour)(id As NetworkPlayerId, playerObject As T) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetPlayerObject*
  nameWithType.vb: NetworkSandbox.TryGetPlayerObject(Of T)(NetworkPlayerId, T)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetPlayerObject(Of T)(Netick.NetworkPlayerId, T)
  name.vb: TryGetPlayerObject(Of T)(NetworkPlayerId, T)
- uid: Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject)
  commentId: M:Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject)
  id: SetPlayerObject(Netick.NetworkPlayerId,Netick.Unity.NetworkObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: SetPlayerObject(NetworkPlayerId, NetworkObject)
  nameWithType: NetworkSandbox.SetPlayerObject(NetworkPlayerId, NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayerId, Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Server Only]</b></i> Sets the the associated NetworkObject (player object) with this player.
  example: []
  syntax:
    content: public void SetPlayerObject(NetworkPlayerId id, NetworkObject obj)
    parameters:
    - id: id
      type: Netick.NetworkPlayerId
    - id: obj
      type: Netick.Unity.NetworkObject
    content.vb: Public Sub SetPlayerObject(id As NetworkPlayerId, obj As NetworkObject)
  overload: Netick.Unity.NetworkSandbox.SetPlayerObject*
- uid: Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject)
  commentId: M:Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject)
  id: SetPlayerObject(Netick.NetworkPlayer,Netick.Unity.NetworkObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: SetPlayerObject(NetworkPlayer, NetworkObject)
  nameWithType: NetworkSandbox.SetPlayerObject(NetworkPlayer, NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.SetPlayerObject(Netick.NetworkPlayer, Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void SetPlayerObject(NetworkPlayer player, NetworkObject obj)
    parameters:
    - id: player
      type: Netick.NetworkPlayer
    - id: obj
      type: Netick.Unity.NetworkObject
    content.vb: Public Sub SetPlayerObject(player As NetworkPlayer, obj As NetworkObject)
  overload: Netick.Unity.NetworkSandbox.SetPlayerObject*
- uid: Netick.Unity.NetworkSandbox.GetLocalPlayerObject
  commentId: M:Netick.Unity.NetworkSandbox.GetLocalPlayerObject
  id: GetLocalPlayerObject
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetLocalPlayerObject()
  nameWithType: NetworkSandbox.GetLocalPlayerObject()
  fullName: Netick.Unity.NetworkSandbox.GetLocalPlayerObject()
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets the the associated <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> (player object) with the local player.
  example: []
  syntax:
    content: public NetworkObject GetLocalPlayerObject()
    return:
      type: Netick.Unity.NetworkObject
      description: ''
    content.vb: Public Function GetLocalPlayerObject() As NetworkObject
  overload: Netick.Unity.NetworkSandbox.GetLocalPlayerObject*
- uid: Netick.Unity.NetworkSandbox.GetLocalPlayerObject``1
  commentId: M:Netick.Unity.NetworkSandbox.GetLocalPlayerObject``1
  id: GetLocalPlayerObject``1
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetLocalPlayerObject<T>()
  nameWithType: NetworkSandbox.GetLocalPlayerObject<T>()
  fullName: Netick.Unity.NetworkSandbox.GetLocalPlayerObject<T>()
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets the the associated script (player object) of type T with the local player.
  example: []
  syntax:
    content: 'public T GetLocalPlayerObject<T>() where T : NetickBehaviour'
    typeParameters:
    - id: T
    return:
      type: '{T}'
      description: ''
    content.vb: Public Function GetLocalPlayerObject(Of T As NetickBehaviour)() As T
  overload: Netick.Unity.NetworkSandbox.GetLocalPlayerObject*
  nameWithType.vb: NetworkSandbox.GetLocalPlayerObject(Of T)()
  fullName.vb: Netick.Unity.NetworkSandbox.GetLocalPlayerObject(Of T)()
  name.vb: GetLocalPlayerObject(Of T)()
- uid: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject(Netick.Unity.NetworkObject@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject(Netick.Unity.NetworkObject@)
  id: TryGetLocalPlayerObject(Netick.Unity.NetworkObject@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetLocalPlayerObject(out NetworkObject)
  nameWithType: NetworkSandbox.TryGetLocalPlayerObject(out NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject(out Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Tries to get the the associated <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> (player object) with the local player.
  example: []
  syntax:
    content: public bool TryGetLocalPlayerObject(out NetworkObject playerObject)
    parameters:
    - id: playerObject
      type: Netick.Unity.NetworkObject
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetLocalPlayerObject(playerObject As NetworkObject) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject*
  nameWithType.vb: NetworkSandbox.TryGetLocalPlayerObject(NetworkObject)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject(Netick.Unity.NetworkObject)
  name.vb: TryGetLocalPlayerObject(NetworkObject)
- uid: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject``1(``0@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject``1(``0@)
  id: TryGetLocalPlayerObject``1(``0@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetLocalPlayerObject<T>(out T)
  nameWithType: NetworkSandbox.TryGetLocalPlayerObject<T>(out T)
  fullName: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject<T>(out T)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Tries to get the the associated script (player object) of type T with the local player.
  example: []
  syntax:
    content: 'public bool TryGetLocalPlayerObject<T>(out T playerObject) where T : NetickBehaviour'
    parameters:
    - id: playerObject
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetLocalPlayerObject(Of T As NetickBehaviour)(playerObject As T) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject*
  nameWithType.vb: NetworkSandbox.TryGetLocalPlayerObject(Of T)(T)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject(Of T)(T)
  name.vb: TryGetLocalPlayerObject(Of T)(T)
- uid: Netick.Unity.NetworkSandbox.GetPlayerById(Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.GetPlayerById(Netick.NetworkPlayerId)
  id: GetPlayerById(Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetPlayerById(NetworkPlayerId)
  nameWithType: NetworkSandbox.GetPlayerById(NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.GetPlayerById(Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Retrieves the <xref href="Netick.NetworkPlayer" data-throw-if-not-resolved="false"></xref> associated with the given <xref href="Netick.NetworkPlayerId" data-throw-if-not-resolved="false"></xref>.

    <p>

    On the server, this method can return any player by their ID. On the client, it only returns the local player or the server player.

    </p>
  example: []
  syntax:
    content: public NetworkPlayer GetPlayerById(NetworkPlayerId playerId)
    parameters:
    - id: playerId
      type: Netick.NetworkPlayerId
    return:
      type: Netick.NetworkPlayer
    content.vb: Public Function GetPlayerById(playerId As NetworkPlayerId) As NetworkPlayer
  overload: Netick.Unity.NetworkSandbox.GetPlayerById*
- uid: Netick.Unity.NetworkSandbox.ContainsPlayer(Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.ContainsPlayer(Netick.NetworkPlayerId)
  id: ContainsPlayer(Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: ContainsPlayer(NetworkPlayerId)
  nameWithType: NetworkSandbox.ContainsPlayer(NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.ContainsPlayer(Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Checks if a player with the specified <xref href="Netick.NetworkPlayerId" data-throw-if-not-resolved="false"></xref> exists in the simulation.
  example: []
  syntax:
    content: public bool ContainsPlayer(NetworkPlayerId playerId)
    parameters:
    - id: playerId
      type: Netick.NetworkPlayerId
    return:
      type: System.Boolean
    content.vb: Public Function ContainsPlayer(playerId As NetworkPlayerId) As Boolean
  overload: Netick.Unity.NetworkSandbox.ContainsPlayer*
- uid: Netick.Unity.NetworkSandbox.GetObject(System.Int32)
  commentId: M:Netick.Unity.NetworkSandbox.GetObject(System.Int32)
  id: GetObject(System.Int32)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetObject(int)
  nameWithType: NetworkSandbox.GetObject(int)
  fullName: Netick.Unity.NetworkSandbox.GetObject(int)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets the <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> with the specified id. Returns null in case no object with that id exists.
  example: []
  syntax:
    content: public NetworkObject GetObject(int id)
    parameters:
    - id: id
      type: System.Int32
      description: The id of the <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref>
    return:
      type: Netick.Unity.NetworkObject
      description: ''
    content.vb: Public Function GetObject(id As Integer) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.GetObject*
  nameWithType.vb: NetworkSandbox.GetObject(Integer)
  fullName.vb: Netick.Unity.NetworkSandbox.GetObject(Integer)
  name.vb: GetObject(Integer)
- uid: Netick.Unity.NetworkSandbox.GetObject(Netick.Unity.NetworkObjectRef)
  commentId: M:Netick.Unity.NetworkSandbox.GetObject(Netick.Unity.NetworkObjectRef)
  id: GetObject(Netick.Unity.NetworkObjectRef)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetObject(NetworkObjectRef)
  nameWithType: NetworkSandbox.GetObject(NetworkObjectRef)
  fullName: Netick.Unity.NetworkSandbox.GetObject(Netick.Unity.NetworkObjectRef)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public NetworkObject GetObject(NetworkObjectRef networkObjectRef)
    parameters:
    - id: networkObjectRef
      type: Netick.Unity.NetworkObjectRef
    return:
      type: Netick.Unity.NetworkObject
    content.vb: Public Function GetObject(networkObjectRef As NetworkObjectRef) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.GetObject*
- uid: Netick.Unity.NetworkSandbox.TryGetObject(System.Int32,Netick.Unity.NetworkObject@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetObject(System.Int32,Netick.Unity.NetworkObject@)
  id: TryGetObject(System.Int32,Netick.Unity.NetworkObject@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetObject(int, out NetworkObject)
  nameWithType: NetworkSandbox.TryGetObject(int, out NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.TryGetObject(int, out Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Tries to get the <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> with the specified id.
  example: []
  syntax:
    content: public bool TryGetObject(int id, out NetworkObject obj)
    parameters:
    - id: id
      type: System.Int32
      description: The id of the <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref>
    - id: obj
      type: Netick.Unity.NetworkObject
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetObject(id As Integer, obj As NetworkObject) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetObject*
  nameWithType.vb: NetworkSandbox.TryGetObject(Integer, NetworkObject)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetObject(Integer, Netick.Unity.NetworkObject)
  name.vb: TryGetObject(Integer, NetworkObject)
- uid: Netick.Unity.NetworkSandbox.TryGetObject(Netick.Unity.NetworkObjectRef,Netick.Unity.NetworkObject@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetObject(Netick.Unity.NetworkObjectRef,Netick.Unity.NetworkObject@)
  id: TryGetObject(Netick.Unity.NetworkObjectRef,Netick.Unity.NetworkObject@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetObject(NetworkObjectRef, out NetworkObject)
  nameWithType: NetworkSandbox.TryGetObject(NetworkObjectRef, out NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.TryGetObject(Netick.Unity.NetworkObjectRef, out Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public bool TryGetObject(NetworkObjectRef networkObjectRef, out NetworkObject obj)
    parameters:
    - id: networkObjectRef
      type: Netick.Unity.NetworkObjectRef
    - id: obj
      type: Netick.Unity.NetworkObject
    return:
      type: System.Boolean
    content.vb: Public Function TryGetObject(networkObjectRef As NetworkObjectRef, obj As NetworkObject) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetObject*
  nameWithType.vb: NetworkSandbox.TryGetObject(NetworkObjectRef, NetworkObject)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetObject(Netick.Unity.NetworkObjectRef, Netick.Unity.NetworkObject)
  name.vb: TryGetObject(NetworkObjectRef, NetworkObject)
- uid: Netick.Unity.NetworkSandbox.GetBehaviour``1(Netick.Unity.NetworkBehaviourRef{``0})
  commentId: M:Netick.Unity.NetworkSandbox.GetBehaviour``1(Netick.Unity.NetworkBehaviourRef{``0})
  id: GetBehaviour``1(Netick.Unity.NetworkBehaviourRef{``0})
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetBehaviour<T>(NetworkBehaviourRef<T>)
  nameWithType: NetworkSandbox.GetBehaviour<T>(NetworkBehaviourRef<T>)
  fullName: Netick.Unity.NetworkSandbox.GetBehaviour<T>(Netick.Unity.NetworkBehaviourRef<T>)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public T GetBehaviour<T>(NetworkBehaviourRef<T> networkBehaviourRef) where T : NetworkBehaviour'
    parameters:
    - id: networkBehaviourRef
      type: Netick.Unity.NetworkBehaviourRef{{T}}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function GetBehaviour(Of T As NetworkBehaviour)(networkBehaviourRef As NetworkBehaviourRef(Of T)) As T
  overload: Netick.Unity.NetworkSandbox.GetBehaviour*
  nameWithType.vb: NetworkSandbox.GetBehaviour(Of T)(NetworkBehaviourRef(Of T))
  fullName.vb: Netick.Unity.NetworkSandbox.GetBehaviour(Of T)(Netick.Unity.NetworkBehaviourRef(Of T))
  name.vb: GetBehaviour(Of T)(NetworkBehaviourRef(Of T))
- uid: Netick.Unity.NetworkSandbox.TryGetBehaviour``1(System.Int32,``0@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetBehaviour``1(System.Int32,``0@)
  id: TryGetBehaviour``1(System.Int32,``0@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetBehaviour<T>(int, out T)
  nameWithType: NetworkSandbox.TryGetBehaviour<T>(int, out T)
  fullName: Netick.Unity.NetworkSandbox.TryGetBehaviour<T>(int, out T)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Tries to get the <xref href="Netick.Unity.NetworkBehaviour" data-throw-if-not-resolved="false"></xref> of a <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> with the specified id.
  example: []
  syntax:
    content: 'public bool TryGetBehaviour<T>(int id, out T behaviour) where T : NetworkBehaviour'
    parameters:
    - id: id
      type: System.Int32
      description: The id of the network object
    - id: behaviour
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function TryGetBehaviour(Of T As NetworkBehaviour)(id As Integer, behaviour As T) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetBehaviour*
  nameWithType.vb: NetworkSandbox.TryGetBehaviour(Of T)(Integer, T)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetBehaviour(Of T)(Integer, T)
  name.vb: TryGetBehaviour(Of T)(Integer, T)
- uid: Netick.Unity.NetworkSandbox.TryGetBehaviour``1(Netick.Unity.NetworkBehaviourRef{``0},``0@)
  commentId: M:Netick.Unity.NetworkSandbox.TryGetBehaviour``1(Netick.Unity.NetworkBehaviourRef{``0},``0@)
  id: TryGetBehaviour``1(Netick.Unity.NetworkBehaviourRef{``0},``0@)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TryGetBehaviour<T>(NetworkBehaviourRef<T>, out T)
  nameWithType: NetworkSandbox.TryGetBehaviour<T>(NetworkBehaviourRef<T>, out T)
  fullName: Netick.Unity.NetworkSandbox.TryGetBehaviour<T>(Netick.Unity.NetworkBehaviourRef<T>, out T)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public bool TryGetBehaviour<T>(NetworkBehaviourRef<T> networkBehaviourRef, out T behaviour) where T : NetworkBehaviour'
    parameters:
    - id: networkBehaviourRef
      type: Netick.Unity.NetworkBehaviourRef{{T}}
    - id: behaviour
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Function TryGetBehaviour(Of T As NetworkBehaviour)(networkBehaviourRef As NetworkBehaviourRef(Of T), behaviour As T) As Boolean
  overload: Netick.Unity.NetworkSandbox.TryGetBehaviour*
  nameWithType.vb: NetworkSandbox.TryGetBehaviour(Of T)(NetworkBehaviourRef(Of T), T)
  fullName.vb: Netick.Unity.NetworkSandbox.TryGetBehaviour(Of T)(Netick.Unity.NetworkBehaviourRef(Of T), T)
  name.vb: TryGetBehaviour(Of T)(NetworkBehaviourRef(Of T), T)
- uid: Netick.Unity.NetworkSandbox.GetBehavioursOfType``1(System.Collections.Generic.List{``0})
  commentId: M:Netick.Unity.NetworkSandbox.GetBehavioursOfType``1(System.Collections.Generic.List{``0})
  id: GetBehavioursOfType``1(System.Collections.Generic.List{``0})
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetBehavioursOfType<T>(List<T>)
  nameWithType: NetworkSandbox.GetBehavioursOfType<T>(List<T>)
  fullName: Netick.Unity.NetworkSandbox.GetBehavioursOfType<T>(System.Collections.Generic.List<T>)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets all network behaviours (or Netick behaviours) in the simulation that have the type of T.
  example: []
  syntax:
    content: 'public void GetBehavioursOfType<T>(List<T> result) where T : NetickBehaviour'
    parameters:
    - id: result
      type: System.Collections.Generic.List{{T}}
    typeParameters:
    - id: T
    content.vb: Public Sub GetBehavioursOfType(Of T As NetickBehaviour)(result As List(Of T))
  overload: Netick.Unity.NetworkSandbox.GetBehavioursOfType*
  nameWithType.vb: NetworkSandbox.GetBehavioursOfType(Of T)(List(Of T))
  fullName.vb: Netick.Unity.NetworkSandbox.GetBehavioursOfType(Of T)(System.Collections.Generic.List(Of T))
  name.vb: GetBehavioursOfType(Of T)(List(Of T))
- uid: Netick.Unity.NetworkSandbox.GetBehavioursOfType``1
  commentId: M:Netick.Unity.NetworkSandbox.GetBehavioursOfType``1
  id: GetBehavioursOfType``1
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetBehavioursOfType<T>()
  nameWithType: NetworkSandbox.GetBehavioursOfType<T>()
  fullName: Netick.Unity.NetworkSandbox.GetBehavioursOfType<T>()
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets all network behaviours (or Netick behaviours) in the simulation that have the type of T.
  example: []
  syntax:
    content: 'public List<T> GetBehavioursOfType<T>() where T : NetickBehaviour'
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function GetBehavioursOfType(Of T As NetickBehaviour)() As List(Of T)
  overload: Netick.Unity.NetworkSandbox.GetBehavioursOfType*
  nameWithType.vb: NetworkSandbox.GetBehavioursOfType(Of T)()
  fullName.vb: Netick.Unity.NetworkSandbox.GetBehavioursOfType(Of T)()
  name.vb: GetBehavioursOfType(Of T)()
- uid: Netick.Unity.NetworkSandbox.GetInput``1(System.Int32)
  commentId: M:Netick.Unity.NetworkSandbox.GetInput``1(System.Int32)
  id: GetInput``1(System.Int32)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetInput<T>(int)
  nameWithType: NetworkSandbox.GetInput<T>(int)
  fullName: Netick.Unity.NetworkSandbox.GetInput<T>(int)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Gets a specific input for the next tick.
  example: []
  syntax:
    content: 'public T GetInput<T>(int index = 0) where T : unmanaged'
    parameters:
    - id: index
      type: System.Int32
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function GetInput(Of T As Structure)(index As Integer = 0) As T
  overload: Netick.Unity.NetworkSandbox.GetInput*
  nameWithType.vb: NetworkSandbox.GetInput(Of T)(Integer)
  fullName.vb: Netick.Unity.NetworkSandbox.GetInput(Of T)(Integer)
  name.vb: GetInput(Of T)(Integer)
- uid: Netick.Unity.NetworkSandbox.SetInput``1(``0,System.Int32)
  commentId: M:Netick.Unity.NetworkSandbox.SetInput``1(``0,System.Int32)
  id: SetInput``1(``0,System.Int32)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: SetInput<T>(T, int)
  nameWithType: NetworkSandbox.SetInput<T>(T, int)
  fullName: Netick.Unity.NetworkSandbox.SetInput<T>(T, int)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Sets a specific input for the next tick.
  example: []
  syntax:
    content: 'public void SetInput<T>(T input, int index = 0) where T : unmanaged'
    parameters:
    - id: input
      type: '{T}'
    - id: index
      type: System.Int32
    typeParameters:
    - id: T
      description: ''
    content.vb: Public Sub SetInput(Of T As Structure)(input As T, index As Integer = 0)
  overload: Netick.Unity.NetworkSandbox.SetInput*
  nameWithType.vb: NetworkSandbox.SetInput(Of T)(T, Integer)
  fullName.vb: Netick.Unity.NetworkSandbox.SetInput(Of T)(T, Integer)
  name.vb: SetInput(Of T)(T, Integer)
- uid: Netick.Unity.NetworkSandbox.TickToTime(Netick.Tick)
  commentId: M:Netick.Unity.NetworkSandbox.TickToTime(Netick.Tick)
  id: TickToTime(Netick.Tick)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TickToTime(Tick)
  nameWithType: NetworkSandbox.TickToTime(Tick)
  fullName: Netick.Unity.NetworkSandbox.TickToTime(Netick.Tick)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Converts ticks to time in seconds.
  example: []
  syntax:
    content: public float TickToTime(Tick tick)
    parameters:
    - id: tick
      type: Netick.Tick
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Function TickToTime(tick As Tick) As Single
  overload: Netick.Unity.NetworkSandbox.TickToTime*
- uid: Netick.Unity.NetworkSandbox.TickToTime(System.Single)
  commentId: M:Netick.Unity.NetworkSandbox.TickToTime(System.Single)
  id: TickToTime(System.Single)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TickToTime(float)
  nameWithType: NetworkSandbox.TickToTime(float)
  fullName: Netick.Unity.NetworkSandbox.TickToTime(float)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Converts ticks to time in seconds.
  example: []
  syntax:
    content: public float TickToTime(float tick)
    parameters:
    - id: tick
      type: System.Single
      description: ''
    return:
      type: System.Single
      description: ''
    content.vb: Public Function TickToTime(tick As Single) As Single
  overload: Netick.Unity.NetworkSandbox.TickToTime*
  nameWithType.vb: NetworkSandbox.TickToTime(Single)
  fullName.vb: Netick.Unity.NetworkSandbox.TickToTime(Single)
  name.vb: TickToTime(Single)
- uid: Netick.Unity.NetworkSandbox.TimeToTick(System.Single)
  commentId: M:Netick.Unity.NetworkSandbox.TimeToTick(System.Single)
  id: TimeToTick(System.Single)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: TimeToTick(float)
  nameWithType: NetworkSandbox.TimeToTick(float)
  fullName: Netick.Unity.NetworkSandbox.TimeToTick(float)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Converts time (in seconds) to ticks.
  example: []
  syntax:
    content: public Tick TimeToTick(float time)
    parameters:
    - id: time
      type: System.Single
    return:
      type: Netick.Tick
      description: ''
    content.vb: Public Function TimeToTick(time As Single) As Tick
  overload: Netick.Unity.NetworkSandbox.TimeToTick*
  nameWithType.vb: NetworkSandbox.TimeToTick(Single)
  fullName.vb: Netick.Unity.NetworkSandbox.TimeToTick(Single)
  name.vb: TimeToTick(Single)
- uid: Netick.Unity.NetworkSandbox.StartTimer(System.Single,System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.StartTimer(System.Single,System.Boolean)
  id: StartTimer(System.Single,System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: StartTimer(float, bool)
  nameWithType: NetworkSandbox.StartTimer(float, bool)
  fullName: Netick.Unity.NetworkSandbox.StartTimer(float, bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public NetworkTimer StartTimer(float time, bool usePredictedTiming = true)
    parameters:
    - id: time
      type: System.Single
    - id: usePredictedTiming
      type: System.Boolean
    return:
      type: Netick.NetworkTimer
    content.vb: Public Function StartTimer(time As Single, usePredictedTiming As Boolean = True) As NetworkTimer
  overload: Netick.Unity.NetworkSandbox.StartTimer*
  nameWithType.vb: NetworkSandbox.StartTimer(Single, Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.StartTimer(Single, Boolean)
  name.vb: StartTimer(Single, Boolean)
- uid: Netick.Unity.NetworkSandbox.Log(System.Object)
  commentId: M:Netick.Unity.NetworkSandbox.Log(System.Object)
  id: Log(System.Object)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Log(object)
  nameWithType: NetworkSandbox.Log(object)
  fullName: Netick.Unity.NetworkSandbox.Log(object)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void Log(object message)
    parameters:
    - id: message
      type: System.Object
    content.vb: Public Sub Log(message As Object)
  overload: Netick.Unity.NetworkSandbox.Log*
  nameWithType.vb: NetworkSandbox.Log(Object)
  fullName.vb: Netick.Unity.NetworkSandbox.Log(Object)
  name.vb: Log(Object)
- uid: Netick.Unity.NetworkSandbox.LogWarning(System.Object)
  commentId: M:Netick.Unity.NetworkSandbox.LogWarning(System.Object)
  id: LogWarning(System.Object)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LogWarning(object)
  nameWithType: NetworkSandbox.LogWarning(object)
  fullName: Netick.Unity.NetworkSandbox.LogWarning(object)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void LogWarning(object message)
    parameters:
    - id: message
      type: System.Object
    content.vb: Public Sub LogWarning(message As Object)
  overload: Netick.Unity.NetworkSandbox.LogWarning*
  nameWithType.vb: NetworkSandbox.LogWarning(Object)
  fullName.vb: Netick.Unity.NetworkSandbox.LogWarning(Object)
  name.vb: LogWarning(Object)
- uid: Netick.Unity.NetworkSandbox.LogError(System.Object)
  commentId: M:Netick.Unity.NetworkSandbox.LogError(System.Object)
  id: LogError(System.Object)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LogError(object)
  nameWithType: NetworkSandbox.LogError(object)
  fullName: Netick.Unity.NetworkSandbox.LogError(object)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void LogError(object message)
    parameters:
    - id: message
      type: System.Object
    content.vb: Public Sub LogError(message As Object)
  overload: Netick.Unity.NetworkSandbox.LogError*
  nameWithType.vb: NetworkSandbox.LogError(Object)
  fullName.vb: Netick.Unity.NetworkSandbox.LogError(Object)
  name.vb: LogError(Object)
- uid: Netick.Unity.NetworkSandbox.Log(System.Object,UnityEngine.Object)
  commentId: M:Netick.Unity.NetworkSandbox.Log(System.Object,UnityEngine.Object)
  id: Log(System.Object,UnityEngine.Object)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Log(object, Object)
  nameWithType: NetworkSandbox.Log(object, Object)
  fullName: Netick.Unity.NetworkSandbox.Log(object, UnityEngine.Object)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void Log(object message, Object context)
    parameters:
    - id: message
      type: System.Object
    - id: context
      type: UnityEngine.Object
    content.vb: Public Sub Log(message As Object, context As [Object])
  overload: Netick.Unity.NetworkSandbox.Log*
  nameWithType.vb: NetworkSandbox.Log(Object, Object)
  fullName.vb: Netick.Unity.NetworkSandbox.Log(Object, UnityEngine.Object)
  name.vb: Log(Object, Object)
- uid: Netick.Unity.NetworkSandbox.LogWarning(System.Object,UnityEngine.Object)
  commentId: M:Netick.Unity.NetworkSandbox.LogWarning(System.Object,UnityEngine.Object)
  id: LogWarning(System.Object,UnityEngine.Object)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LogWarning(object, Object)
  nameWithType: NetworkSandbox.LogWarning(object, Object)
  fullName: Netick.Unity.NetworkSandbox.LogWarning(object, UnityEngine.Object)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void LogWarning(object message, Object context)
    parameters:
    - id: message
      type: System.Object
    - id: context
      type: UnityEngine.Object
    content.vb: Public Sub LogWarning(message As Object, context As [Object])
  overload: Netick.Unity.NetworkSandbox.LogWarning*
  nameWithType.vb: NetworkSandbox.LogWarning(Object, Object)
  fullName.vb: Netick.Unity.NetworkSandbox.LogWarning(Object, UnityEngine.Object)
  name.vb: LogWarning(Object, Object)
- uid: Netick.Unity.NetworkSandbox.LogError(System.Object,UnityEngine.Object)
  commentId: M:Netick.Unity.NetworkSandbox.LogError(System.Object,UnityEngine.Object)
  id: LogError(System.Object,UnityEngine.Object)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LogError(object, Object)
  nameWithType: NetworkSandbox.LogError(object, Object)
  fullName: Netick.Unity.NetworkSandbox.LogError(object, UnityEngine.Object)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void LogError(object message, Object context)
    parameters:
    - id: message
      type: System.Object
    - id: context
      type: UnityEngine.Object
    content.vb: Public Sub LogError(message As Object, context As [Object])
  overload: Netick.Unity.NetworkSandbox.LogError*
  nameWithType.vb: NetworkSandbox.LogError(Object, Object)
  fullName.vb: Netick.Unity.NetworkSandbox.LogError(Object, UnityEngine.Object)
  name.vb: LogError(Object, Object)
- uid: Netick.Unity.NetworkSandbox.InitializePool(UnityEngine.GameObject,System.Int32,System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.InitializePool(UnityEngine.GameObject,System.Int32,System.Boolean)
  id: InitializePool(UnityEngine.GameObject,System.Int32,System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: InitializePool(GameObject, int, bool)
  nameWithType: NetworkSandbox.InitializePool(GameObject, int, bool)
  fullName: Netick.Unity.NetworkSandbox.InitializePool(UnityEngine.GameObject, int, bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Initializes the pool for the specified prefab. After this method has been called for a certain prefab, all instances of that prefab will be recycled and reset when created/destroyed.

    <p>Note: this method should only be called on <xref href="Netick.Unity.NetworkEventsListener.OnStartup(Netick.Unity.NetworkSandbox)" data-throw-if-not-resolved="false"></xref>, in other words, just after Netick has been started. </p>
  example: []
  syntax:
    content: public void InitializePool(GameObject networkedPrefab, int preloadedAmount, bool hideInactiveMembers = false)
    parameters:
    - id: networkedPrefab
      type: UnityEngine.GameObject
      description: Prefab to enable pooling for.
    - id: preloadedAmount
      type: System.Int32
      description: How many instances to be preloaded.
    - id: hideInactiveMembers
      type: System.Boolean
      description: Pass true to hide inactive pool members.
    content.vb: Public Sub InitializePool(networkedPrefab As GameObject, preloadedAmount As Integer, hideInactiveMembers As Boolean = False)
  overload: Netick.Unity.NetworkSandbox.InitializePool*
  nameWithType.vb: NetworkSandbox.InitializePool(GameObject, Integer, Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.InitializePool(UnityEngine.GameObject, Integer, Boolean)
  name.vb: InitializePool(GameObject, Integer, Boolean)
- uid: Netick.Unity.NetworkSandbox.DestroyPool(UnityEngine.GameObject)
  commentId: M:Netick.Unity.NetworkSandbox.DestroyPool(UnityEngine.GameObject)
  id: DestroyPool(UnityEngine.GameObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: DestroyPool(GameObject)
  nameWithType: NetworkSandbox.DestroyPool(GameObject)
  fullName: Netick.Unity.NetworkSandbox.DestroyPool(UnityEngine.GameObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void DestroyPool(GameObject networkedPrefab)
    parameters:
    - id: networkedPrefab
      type: UnityEngine.GameObject
    content.vb: Public Sub DestroyPool(networkedPrefab As GameObject)
  overload: Netick.Unity.NetworkSandbox.DestroyPool*
- uid: Netick.Unity.NetworkSandbox.GetPrefab(System.String)
  commentId: M:Netick.Unity.NetworkSandbox.GetPrefab(System.String)
  id: GetPrefab(System.String)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: GetPrefab(string)
  nameWithType: NetworkSandbox.GetPrefab(string)
  fullName: Netick.Unity.NetworkSandbox.GetPrefab(string)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Gets a Network Prefab by name.

    <p>Note: this causes GC.</p>
  example: []
  syntax:
    content: public GameObject GetPrefab(string name)
    parameters:
    - id: name
      type: System.String
      description: ''
    return:
      type: UnityEngine.GameObject
      description: The Network Prefab
    content.vb: Public Function GetPrefab(name As String) As GameObject
  overload: Netick.Unity.NetworkSandbox.GetPrefab*
  nameWithType.vb: NetworkSandbox.GetPrefab(String)
  fullName.vb: Netick.Unity.NetworkSandbox.GetPrefab(String)
  name.vb: GetPrefab(String)
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  id: NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate(GameObject, Vector3, Quaternion, NetworkPlayer)
  nameWithType: NetworkSandbox.NetworkInstantiate(GameObject, Vector3, Quaternion, NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject, UnityEngine.Vector3, UnityEngine.Quaternion, Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    <i><b>[Server Only]</b></i> Instantiates a network prefab. 

    <p>This must only be called on the server, since only the server can instantiate network prefabs.</p>

    <p>Note: make sure the prefab has been registered. </p> 

    <p>Note: the specified input source will be given to every <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> child of this prefab.</p>
  example: []
  syntax:
    content: public NetworkObject NetworkInstantiate(GameObject prefab, Vector3 position, Quaternion rotation, NetworkPlayer inputSource = null)
    parameters:
    - id: prefab
      type: UnityEngine.GameObject
    - id: position
      type: UnityEngine.Vector3
    - id: rotation
      type: UnityEngine.Quaternion
    - id: inputSource
      type: Netick.NetworkPlayer
    return:
      type: Netick.Unity.NetworkObject
    content.vb: Public Function NetworkInstantiate(prefab As GameObject, position As Vector3, rotation As Quaternion, inputSource As NetworkPlayer = Nothing) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)
  id: NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate(GameObject, Vector3, Quaternion, NetworkPlayerId)
  nameWithType: NetworkSandbox.NetworkInstantiate(GameObject, Vector3, Quaternion, NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject, UnityEngine.Vector3, UnityEngine.Quaternion, Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    <i><b>[Server Only]</b></i> Instantiates a network prefab. 

    <p>This must only be called on the server, since only the server can instantiate network prefabs.</p>

    <p>Note: make sure the prefab has been registered. </p> 

    <p>Note: the specified input source will be given to every <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> child of this prefab.</p>
  example: []
  syntax:
    content: public NetworkObject NetworkInstantiate(GameObject prefab, Vector3 position, Quaternion rotation, NetworkPlayerId inputSource)
    parameters:
    - id: prefab
      type: UnityEngine.GameObject
    - id: position
      type: UnityEngine.Vector3
    - id: rotation
      type: UnityEngine.Quaternion
    - id: inputSource
      type: Netick.NetworkPlayerId
    return:
      type: Netick.Unity.NetworkObject
    content.vb: Public Function NetworkInstantiate(prefab As GameObject, position As Vector3, rotation As Quaternion, inputSource As NetworkPlayerId) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  id: NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate<T>(T, Vector3, Quaternion, NetworkPlayer)
  nameWithType: NetworkSandbox.NetworkInstantiate<T>(T, Vector3, Quaternion, NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    <i><b>[Server Only]</b></i> Instantiates a network prefab. 

    <p>This must only be called on the server, since only the server can instantiate network prefabs.</p>

    <p>Note: make sure the prefab has been registered. </p> 

    <p>Note: the specified input source will be given to every <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> child of this prefab.</p>
  example: []
  syntax:
    content: 'public T NetworkInstantiate<T>(T prefab, Vector3 position, Quaternion rotation, NetworkPlayer inputSource = null) where T : MonoBehaviour'
    parameters:
    - id: prefab
      type: '{T}'
    - id: position
      type: UnityEngine.Vector3
    - id: rotation
      type: UnityEngine.Quaternion
    - id: inputSource
      type: Netick.NetworkPlayer
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function NetworkInstantiate(Of T As MonoBehaviour)(prefab As T, position As Vector3, rotation As Quaternion, inputSource As NetworkPlayer = Nothing) As T
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
  nameWithType.vb: NetworkSandbox.NetworkInstantiate(Of T)(T, Vector3, Quaternion, NetworkPlayer)
  fullName.vb: Netick.Unity.NetworkSandbox.NetworkInstantiate(Of T)(T, UnityEngine.Vector3, UnityEngine.Quaternion, Netick.NetworkPlayer)
  name.vb: NetworkInstantiate(Of T)(T, Vector3, Quaternion, NetworkPlayer)
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)
  id: NetworkInstantiate``1(``0,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate<T>(T, Vector3, Quaternion, NetworkPlayerId)
  nameWithType: NetworkSandbox.NetworkInstantiate<T>(T, Vector3, Quaternion, NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate<T>(T, UnityEngine.Vector3, UnityEngine.Quaternion, Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    <i><b>[Server Only]</b></i> Instantiates a network prefab. 

    <p>This must only be called on the server, since only the server can instantiate network prefabs.</p>

    <p>Note: make sure the prefab has been registered. </p> 

    <p>Note: the specified input source will be given to every <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> child of this prefab.</p>
  example: []
  syntax:
    content: 'public T NetworkInstantiate<T>(T prefab, Vector3 position, Quaternion rotation, NetworkPlayerId inputSource) where T : MonoBehaviour'
    parameters:
    - id: prefab
      type: '{T}'
    - id: position
      type: UnityEngine.Vector3
    - id: rotation
      type: UnityEngine.Quaternion
    - id: inputSource
      type: Netick.NetworkPlayerId
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function NetworkInstantiate(Of T As MonoBehaviour)(prefab As T, position As Vector3, rotation As Quaternion, inputSource As NetworkPlayerId) As T
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
  nameWithType.vb: NetworkSandbox.NetworkInstantiate(Of T)(T, Vector3, Quaternion, NetworkPlayerId)
  fullName.vb: Netick.Unity.NetworkSandbox.NetworkInstantiate(Of T)(T, UnityEngine.Vector3, UnityEngine.Quaternion, Netick.NetworkPlayerId)
  name.vb: NetworkInstantiate(Of T)(T, Vector3, Quaternion, NetworkPlayerId)
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,Netick.NetworkPlayer)
  id: NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate(GameObject, Vector3, NetworkPlayer)
  nameWithType: NetworkSandbox.NetworkInstantiate(GameObject, Vector3, NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject, UnityEngine.Vector3, Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public NetworkObject NetworkInstantiate(GameObject prefab, Vector3 position, NetworkPlayer inputSource = null)
    parameters:
    - id: prefab
      type: UnityEngine.GameObject
    - id: position
      type: UnityEngine.Vector3
    - id: inputSource
      type: Netick.NetworkPlayer
    return:
      type: Netick.Unity.NetworkObject
    content.vb: Public Function NetworkInstantiate(prefab As GameObject, position As Vector3, inputSource As NetworkPlayer = Nothing) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,Netick.NetworkPlayerId)
  id: NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate(GameObject, Vector3, NetworkPlayerId)
  nameWithType: NetworkSandbox.NetworkInstantiate(GameObject, Vector3, NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject, UnityEngine.Vector3, Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public NetworkObject NetworkInstantiate(GameObject prefab, Vector3 position, NetworkPlayerId inputSource)
    parameters:
    - id: prefab
      type: UnityEngine.GameObject
    - id: position
      type: UnityEngine.Vector3
    - id: inputSource
      type: Netick.NetworkPlayerId
    return:
      type: Netick.Unity.NetworkObject
    content.vb: Public Function NetworkInstantiate(prefab As GameObject, position As Vector3, inputSource As NetworkPlayerId) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,Netick.NetworkPlayer)
  id: NetworkInstantiate``1(``0,UnityEngine.Vector3,Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate<T>(T, Vector3, NetworkPlayer)
  nameWithType: NetworkSandbox.NetworkInstantiate<T>(T, Vector3, NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate<T>(T, UnityEngine.Vector3, Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public T NetworkInstantiate<T>(T prefab, Vector3 position, NetworkPlayer inputSource = null) where T : MonoBehaviour'
    parameters:
    - id: prefab
      type: '{T}'
    - id: position
      type: UnityEngine.Vector3
    - id: inputSource
      type: Netick.NetworkPlayer
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function NetworkInstantiate(Of T As MonoBehaviour)(prefab As T, position As Vector3, inputSource As NetworkPlayer = Nothing) As T
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
  nameWithType.vb: NetworkSandbox.NetworkInstantiate(Of T)(T, Vector3, NetworkPlayer)
  fullName.vb: Netick.Unity.NetworkSandbox.NetworkInstantiate(Of T)(T, UnityEngine.Vector3, Netick.NetworkPlayer)
  name.vb: NetworkInstantiate(Of T)(T, Vector3, NetworkPlayer)
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,UnityEngine.Vector3,Netick.NetworkPlayerId)
  id: NetworkInstantiate``1(``0,UnityEngine.Vector3,Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate<T>(T, Vector3, NetworkPlayerId)
  nameWithType: NetworkSandbox.NetworkInstantiate<T>(T, Vector3, NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate<T>(T, UnityEngine.Vector3, Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public T NetworkInstantiate<T>(T prefab, Vector3 position, NetworkPlayerId inputSource) where T : MonoBehaviour'
    parameters:
    - id: prefab
      type: '{T}'
    - id: position
      type: UnityEngine.Vector3
    - id: inputSource
      type: Netick.NetworkPlayerId
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function NetworkInstantiate(Of T As MonoBehaviour)(prefab As T, position As Vector3, inputSource As NetworkPlayerId) As T
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
  nameWithType.vb: NetworkSandbox.NetworkInstantiate(Of T)(T, Vector3, NetworkPlayerId)
  fullName.vb: Netick.Unity.NetworkSandbox.NetworkInstantiate(Of T)(T, UnityEngine.Vector3, Netick.NetworkPlayerId)
  name.vb: NetworkInstantiate(Of T)(T, Vector3, NetworkPlayerId)
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,Netick.NetworkPlayer)
  id: NetworkInstantiate(UnityEngine.GameObject,Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate(GameObject, NetworkPlayer)
  nameWithType: NetworkSandbox.NetworkInstantiate(GameObject, NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject, Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public NetworkObject NetworkInstantiate(GameObject prefab, NetworkPlayer inputSource = null)
    parameters:
    - id: prefab
      type: UnityEngine.GameObject
    - id: inputSource
      type: Netick.NetworkPlayer
    return:
      type: Netick.Unity.NetworkObject
    content.vb: Public Function NetworkInstantiate(prefab As GameObject, inputSource As NetworkPlayer = Nothing) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,Netick.NetworkPlayerId)
  id: NetworkInstantiate(UnityEngine.GameObject,Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate(GameObject, NetworkPlayerId)
  nameWithType: NetworkSandbox.NetworkInstantiate(GameObject, NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject, Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public NetworkObject NetworkInstantiate(GameObject prefab, NetworkPlayerId inputSource)
    parameters:
    - id: prefab
      type: UnityEngine.GameObject
    - id: inputSource
      type: Netick.NetworkPlayerId
    return:
      type: Netick.Unity.NetworkObject
    content.vb: Public Function NetworkInstantiate(prefab As GameObject, inputSource As NetworkPlayerId) As NetworkObject
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,Netick.NetworkPlayer)
  id: NetworkInstantiate``1(``0,Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate<T>(T, NetworkPlayer)
  nameWithType: NetworkSandbox.NetworkInstantiate<T>(T, NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate<T>(T, Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public T NetworkInstantiate<T>(T prefab, NetworkPlayer inputSource = null) where T : MonoBehaviour'
    parameters:
    - id: prefab
      type: '{T}'
    - id: inputSource
      type: Netick.NetworkPlayer
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function NetworkInstantiate(Of T As MonoBehaviour)(prefab As T, inputSource As NetworkPlayer = Nothing) As T
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
  nameWithType.vb: NetworkSandbox.NetworkInstantiate(Of T)(T, NetworkPlayer)
  fullName.vb: Netick.Unity.NetworkSandbox.NetworkInstantiate(Of T)(T, Netick.NetworkPlayer)
  name.vb: NetworkInstantiate(Of T)(T, NetworkPlayer)
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate``1(``0,Netick.NetworkPlayerId)
  id: NetworkInstantiate``1(``0,Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkInstantiate<T>(T, NetworkPlayerId)
  nameWithType: NetworkSandbox.NetworkInstantiate<T>(T, NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate<T>(T, Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public T NetworkInstantiate<T>(T prefab, NetworkPlayerId inputSource) where T : MonoBehaviour'
    parameters:
    - id: prefab
      type: '{T}'
    - id: inputSource
      type: Netick.NetworkPlayerId
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function NetworkInstantiate(Of T As MonoBehaviour)(prefab As T, inputSource As NetworkPlayerId) As T
  overload: Netick.Unity.NetworkSandbox.NetworkInstantiate*
  nameWithType.vb: NetworkSandbox.NetworkInstantiate(Of T)(T, NetworkPlayerId)
  fullName.vb: Netick.Unity.NetworkSandbox.NetworkInstantiate(Of T)(T, Netick.NetworkPlayerId)
  name.vb: NetworkInstantiate(Of T)(T, NetworkPlayerId)
- uid: Netick.Unity.NetworkSandbox.Destroy(Netick.Unity.NetworkObject)
  commentId: M:Netick.Unity.NetworkSandbox.Destroy(Netick.Unity.NetworkObject)
  id: Destroy(Netick.Unity.NetworkObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Destroy(NetworkObject)
  nameWithType: NetworkSandbox.Destroy(NetworkObject)
  fullName: Netick.Unity.NetworkSandbox.Destroy(Netick.Unity.NetworkObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    <i><b>[Server Only]</b></i> Destroys a network object.

    <p>Note: never call this on a child <xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref> of the original prefab, only the root of the prefab.</p>
  example: []
  syntax:
    content: public void Destroy(NetworkObject obj)
    parameters:
    - id: obj
      type: Netick.Unity.NetworkObject
      description: The object to destroy.
    content.vb: Public Sub Destroy(obj As NetworkObject)
  overload: Netick.Unity.NetworkSandbox.Destroy*
- uid: Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.MonoBehaviour)
  commentId: M:Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.MonoBehaviour)
  id: FindSandboxOf(UnityEngine.MonoBehaviour)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FindSandboxOf(MonoBehaviour)
  nameWithType: NetworkSandbox.FindSandboxOf(MonoBehaviour)
  fullName: Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.MonoBehaviour)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Finds the <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> instance associated with the specified <xref href="UnityEngine.GameObject" data-throw-if-not-resolved="false"></xref>.

    Returns null if networking is not running or if no matching sandbox is found for the object's scene.
  example: []
  syntax:
    content: public static NetworkSandbox FindSandboxOf(MonoBehaviour monoBehaviour)
    parameters:
    - id: monoBehaviour
      type: UnityEngine.MonoBehaviour
    return:
      type: Netick.Unity.NetworkSandbox
      description: The <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> associated with the object's scene, or null if not found.
    content.vb: Public Shared Function FindSandboxOf(monoBehaviour As MonoBehaviour) As NetworkSandbox
  overload: Netick.Unity.NetworkSandbox.FindSandboxOf*
- uid: Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.GameObject)
  commentId: M:Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.GameObject)
  id: FindSandboxOf(UnityEngine.GameObject)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FindSandboxOf(GameObject)
  nameWithType: NetworkSandbox.FindSandboxOf(GameObject)
  fullName: Netick.Unity.NetworkSandbox.FindSandboxOf(UnityEngine.GameObject)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Finds the <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> instance associated with the specified <xref href="UnityEngine.GameObject" data-throw-if-not-resolved="false"></xref>.

    Returns null if networking is not running or if no matching sandbox is found for the object's scene.
  example: []
  syntax:
    content: public static NetworkSandbox FindSandboxOf(GameObject go)
    parameters:
    - id: go
      type: UnityEngine.GameObject
      description: The <xref href="UnityEngine.GameObject" data-throw-if-not-resolved="false"></xref> to find the sandbox for.
    return:
      type: Netick.Unity.NetworkSandbox
      description: The <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> associated with the object's scene, or null if not found.
    content.vb: Public Shared Function FindSandboxOf(go As GameObject) As NetworkSandbox
  overload: Netick.Unity.NetworkSandbox.FindSandboxOf*
- uid: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(System.String,System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(System.String,System.Boolean)
  id: FindGameObjectsWithTag(System.String,System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FindGameObjectsWithTag(string, bool)
  nameWithType: NetworkSandbox.FindGameObjectsWithTag(string, bool)
  fullName: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(string, bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public List<GameObject> FindGameObjectsWithTag(string tag, bool activeOnly = true)
    parameters:
    - id: tag
      type: System.String
    - id: activeOnly
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{UnityEngine.GameObject}
    content.vb: Public Function FindGameObjectsWithTag(tag As String, activeOnly As Boolean = True) As List(Of GameObject)
  overload: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag*
  nameWithType.vb: NetworkSandbox.FindGameObjectsWithTag(String, Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(String, Boolean)
  name.vb: FindGameObjectsWithTag(String, Boolean)
- uid: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(System.String,System.Collections.Generic.List{UnityEngine.GameObject},System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(System.String,System.Collections.Generic.List{UnityEngine.GameObject},System.Boolean)
  id: FindGameObjectsWithTag(System.String,System.Collections.Generic.List{UnityEngine.GameObject},System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FindGameObjectsWithTag(string, List<GameObject>, bool)
  nameWithType: NetworkSandbox.FindGameObjectsWithTag(string, List<GameObject>, bool)
  fullName: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(string, System.Collections.Generic.List<UnityEngine.GameObject>, bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public List<GameObject> FindGameObjectsWithTag(string tag, List<GameObject> results, bool activeOnly = true)
    parameters:
    - id: tag
      type: System.String
    - id: results
      type: System.Collections.Generic.List{UnityEngine.GameObject}
    - id: activeOnly
      type: System.Boolean
    return:
      type: System.Collections.Generic.List{UnityEngine.GameObject}
    content.vb: Public Function FindGameObjectsWithTag(tag As String, results As List(Of GameObject), activeOnly As Boolean = True) As List(Of GameObject)
  overload: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag*
  nameWithType.vb: NetworkSandbox.FindGameObjectsWithTag(String, List(Of GameObject), Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag(String, System.Collections.Generic.List(Of UnityEngine.GameObject), Boolean)
  name.vb: FindGameObjectsWithTag(String, List(Of GameObject), Boolean)
- uid: Netick.Unity.NetworkSandbox.FindGameObjectWithTag(System.String,System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.FindGameObjectWithTag(System.String,System.Boolean)
  id: FindGameObjectWithTag(System.String,System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FindGameObjectWithTag(string, bool)
  nameWithType: NetworkSandbox.FindGameObjectWithTag(string, bool)
  fullName: Netick.Unity.NetworkSandbox.FindGameObjectWithTag(string, bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public GameObject FindGameObjectWithTag(string tag, bool activeOnly = true)
    parameters:
    - id: tag
      type: System.String
    - id: activeOnly
      type: System.Boolean
    return:
      type: UnityEngine.GameObject
    content.vb: Public Function FindGameObjectWithTag(tag As String, activeOnly As Boolean = True) As GameObject
  overload: Netick.Unity.NetworkSandbox.FindGameObjectWithTag*
  nameWithType.vb: NetworkSandbox.FindGameObjectWithTag(String, Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.FindGameObjectWithTag(String, Boolean)
  name.vb: FindGameObjectWithTag(String, Boolean)
- uid: Netick.Unity.NetworkSandbox.FindObjectOfType``1(System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.FindObjectOfType``1(System.Boolean)
  id: FindObjectOfType``1(System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FindObjectOfType<T>(bool)
  nameWithType: NetworkSandbox.FindObjectOfType<T>(bool)
  fullName: Netick.Unity.NetworkSandbox.FindObjectOfType<T>(bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public T FindObjectOfType<T>(bool activeOnly = true) where T : class'
    parameters:
    - id: activeOnly
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Function FindObjectOfType(Of T As Class)(activeOnly As Boolean = True) As T
  overload: Netick.Unity.NetworkSandbox.FindObjectOfType*
  nameWithType.vb: NetworkSandbox.FindObjectOfType(Of T)(Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.FindObjectOfType(Of T)(Boolean)
  name.vb: FindObjectOfType(Of T)(Boolean)
- uid: Netick.Unity.NetworkSandbox.FindObjectsOfType``1(System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.FindObjectsOfType``1(System.Boolean)
  id: FindObjectsOfType``1(System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FindObjectsOfType<T>(bool)
  nameWithType: NetworkSandbox.FindObjectsOfType<T>(bool)
  fullName: Netick.Unity.NetworkSandbox.FindObjectsOfType<T>(bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public List<T> FindObjectsOfType<T>(bool activeOnly = true) where T : class'
    parameters:
    - id: activeOnly
      type: System.Boolean
    typeParameters:
    - id: T
    return:
      type: System.Collections.Generic.List{{T}}
    content.vb: Public Function FindObjectsOfType(Of T As Class)(activeOnly As Boolean = True) As List(Of T)
  overload: Netick.Unity.NetworkSandbox.FindObjectsOfType*
  nameWithType.vb: NetworkSandbox.FindObjectsOfType(Of T)(Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.FindObjectsOfType(Of T)(Boolean)
  name.vb: FindObjectsOfType(Of T)(Boolean)
- uid: Netick.Unity.NetworkSandbox.FindObjectsOfType``1(System.Collections.Generic.List{``0},System.Boolean)
  commentId: M:Netick.Unity.NetworkSandbox.FindObjectsOfType``1(System.Collections.Generic.List{``0},System.Boolean)
  id: FindObjectsOfType``1(System.Collections.Generic.List{``0},System.Boolean)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FindObjectsOfType<T>(List<T>, bool)
  nameWithType: NetworkSandbox.FindObjectsOfType<T>(List<T>, bool)
  fullName: Netick.Unity.NetworkSandbox.FindObjectsOfType<T>(System.Collections.Generic.List<T>, bool)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: 'public void FindObjectsOfType<T>(List<T> results, bool activeOnly = true) where T : class'
    parameters:
    - id: results
      type: System.Collections.Generic.List{{T}}
    - id: activeOnly
      type: System.Boolean
    typeParameters:
    - id: T
    content.vb: Public Sub FindObjectsOfType(Of T As Class)(results As List(Of T), activeOnly As Boolean = True)
  overload: Netick.Unity.NetworkSandbox.FindObjectsOfType*
  nameWithType.vb: NetworkSandbox.FindObjectsOfType(Of T)(List(Of T), Boolean)
  fullName.vb: Netick.Unity.NetworkSandbox.FindObjectsOfType(Of T)(System.Collections.Generic.List(Of T), Boolean)
  name.vb: FindObjectsOfType(Of T)(List(Of T), Boolean)
- uid: Netick.Unity.NetworkSandbox.Connect(System.Int32,System.String,System.Byte[],System.Int32)
  commentId: M:Netick.Unity.NetworkSandbox.Connect(System.Int32,System.String,System.Byte[],System.Int32)
  id: Connect(System.Int32,System.String,System.Byte[],System.Int32)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Connect(int, string, byte[], int)
  nameWithType: NetworkSandbox.Connect(int, string, byte[], int)
  fullName: Netick.Unity.NetworkSandbox.Connect(int, string, byte[], int)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    <i><b>[Client Only]</b></i> Connects to a remote server. 

    <p>Note: if you are already connected to a server, and you want to connect to a different one, you have to disconnect before calling this. Otherwise this method does nothing.</p>

    <p>Note: connectionData array length should not be more than 300 if you are using Netick Transport.</p>
  example: []
  syntax:
    content: public void Connect(int port, string ip, byte[] connectionData = null, int connectionDataLength = 0)
    parameters:
    - id: port
      type: System.Int32
      description: Port of the server.
    - id: ip
      type: System.String
      description: IP address of the server.
    - id: connectionData
      type: System.Byte[]
      description: RawValue sent with the connection request. Could be used to decide whether or not to allow the connection.
    - id: connectionDataLength
      type: System.Int32
    content.vb: Public Sub Connect(port As Integer, ip As String, connectionData As Byte() = Nothing, connectionDataLength As Integer = 0)
  overload: Netick.Unity.NetworkSandbox.Connect*
  nameWithType.vb: NetworkSandbox.Connect(Integer, String, Byte(), Integer)
  fullName.vb: Netick.Unity.NetworkSandbox.Connect(Integer, String, Byte(), Integer)
  name.vb: Connect(Integer, String, Byte(), Integer)
- uid: Netick.Unity.NetworkSandbox.DisconnectFromServer
  commentId: M:Netick.Unity.NetworkSandbox.DisconnectFromServer
  id: DisconnectFromServer
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: DisconnectFromServer()
  nameWithType: NetworkSandbox.DisconnectFromServer()
  fullName: Netick.Unity.NetworkSandbox.DisconnectFromServer()
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> Disconnects this client from the server.
  example: []
  syntax:
    content: public void DisconnectFromServer()
    content.vb: Public Sub DisconnectFromServer()
  overload: Netick.Unity.NetworkSandbox.DisconnectFromServer*
- uid: Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayerId)
  commentId: M:Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayerId)
  id: Kick(Netick.NetworkPlayerId)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Kick(NetworkPlayerId)
  nameWithType: NetworkSandbox.Kick(NetworkPlayerId)
  fullName: Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayerId)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Server Only]</b></i> Disconnects a client from the server.
  example: []
  syntax:
    content: public void Kick(NetworkPlayerId client)
    parameters:
    - id: client
      type: Netick.NetworkPlayerId
      description: The client to be disconnected.
    content.vb: Public Sub Kick(client As NetworkPlayerId)
  overload: Netick.Unity.NetworkSandbox.Kick*
- uid: Netick.Unity.NetworkSandbox.Kick(Netick.ServerConnection)
  commentId: M:Netick.Unity.NetworkSandbox.Kick(Netick.ServerConnection)
  id: Kick(Netick.ServerConnection)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Kick(ServerConnection)
  nameWithType: NetworkSandbox.Kick(ServerConnection)
  fullName: Netick.Unity.NetworkSandbox.Kick(Netick.ServerConnection)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void Kick(ServerConnection client)
    parameters:
    - id: client
      type: Netick.ServerConnection
    content.vb: Public Sub Kick(client As ServerConnection)
  overload: Netick.Unity.NetworkSandbox.Kick*
- uid: Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayer)
  id: Kick(Netick.NetworkPlayer)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Kick(NetworkPlayer)
  nameWithType: NetworkSandbox.Kick(NetworkPlayer)
  fullName: Netick.Unity.NetworkSandbox.Kick(Netick.NetworkPlayer)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void Kick(NetworkPlayer client)
    parameters:
    - id: client
      type: Netick.NetworkPlayer
    content.vb: Public Sub Kick(client As NetworkPlayer)
  overload: Netick.Unity.NetworkSandbox.Kick*
- uid: Netick.Unity.NetworkSandbox.CreateMatch(System.String)
  commentId: M:Netick.Unity.NetworkSandbox.CreateMatch(System.String)
  id: CreateMatch(System.String)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: CreateMatch(string)
  nameWithType: NetworkSandbox.CreateMatch(string)
  fullName: Netick.Unity.NetworkSandbox.CreateMatch(string)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Server Only]</b></i> Creates a match. Only functional if the low-level transport has support for matchmaking.
  example: []
  syntax:
    content: public void CreateMatch(string name)
    parameters:
    - id: name
      type: System.String
      description: Name of the match.
    content.vb: Public Sub CreateMatch(name As String)
  overload: Netick.Unity.NetworkSandbox.CreateMatch*
  nameWithType.vb: NetworkSandbox.CreateMatch(String)
  fullName.vb: Netick.Unity.NetworkSandbox.CreateMatch(String)
  name.vb: CreateMatch(String)
- uid: Netick.Unity.NetworkSandbox.RefreshMatchList
  commentId: M:Netick.Unity.NetworkSandbox.RefreshMatchList
  id: RefreshMatchList
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: RefreshMatchList()
  nameWithType: NetworkSandbox.RefreshMatchList()
  fullName: Netick.Unity.NetworkSandbox.RefreshMatchList()
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Requests an update to the match list. Only functional if the low-level transport has support for matchmaking.
  example: []
  syntax:
    content: public void RefreshMatchList()
    content.vb: Public Sub RefreshMatchList()
  overload: Netick.Unity.NetworkSandbox.RefreshMatchList*
- uid: Netick.Unity.NetworkSandbox.SwitchScene(System.String)
  commentId: M:Netick.Unity.NetworkSandbox.SwitchScene(System.String)
  id: SwitchScene(System.String)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: SwitchScene(string)
  nameWithType: NetworkSandbox.SwitchScene(string)
  fullName: Netick.Unity.NetworkSandbox.SwitchScene(string)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Server Only]</b></i> Switches to a different scene. This must be called instead of <xref href="UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32)" data-throw-if-not-resolved="false"></xref> or its variations. This should only be called for scenes included in the build of the game.
  example: []
  syntax:
    content: public void SwitchScene(string sceneName)
    parameters:
    - id: sceneName
      type: System.String
    content.vb: Public Sub SwitchScene(sceneName As String)
  overload: Netick.Unity.NetworkSandbox.SwitchScene*
  nameWithType.vb: NetworkSandbox.SwitchScene(String)
  fullName.vb: Netick.Unity.NetworkSandbox.SwitchScene(String)
  name.vb: SwitchScene(String)
- uid: Netick.Unity.NetworkSandbox.SwitchScene(System.Int32)
  commentId: M:Netick.Unity.NetworkSandbox.SwitchScene(System.Int32)
  id: SwitchScene(System.Int32)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: SwitchScene(int)
  nameWithType: NetworkSandbox.SwitchScene(int)
  fullName: Netick.Unity.NetworkSandbox.SwitchScene(int)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Server Only]</b></i> Switches to a different scene. This must be called instead of <xref href="UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32)" data-throw-if-not-resolved="false"></xref> or its variations. This should only be called for scenes included in the build of the game.
  example: []
  syntax:
    content: public void SwitchScene(int sceneBuildIndex)
    parameters:
    - id: sceneBuildIndex
      type: System.Int32
      description: SceneBuildIndex of the desired scene.
    content.vb: Public Sub SwitchScene(sceneBuildIndex As Integer)
  overload: Netick.Unity.NetworkSandbox.SwitchScene*
  nameWithType.vb: NetworkSandbox.SwitchScene(Integer)
  fullName.vb: Netick.Unity.NetworkSandbox.SwitchScene(Integer)
  name.vb: SwitchScene(Integer)
- uid: Netick.Unity.NetworkSandbox.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneMode)
  commentId: M:Netick.Unity.NetworkSandbox.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneMode)
  id: LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneMode)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LoadSceneAsync(string, LoadSceneMode)
  nameWithType: NetworkSandbox.LoadSceneAsync(string, LoadSceneMode)
  fullName: Netick.Unity.NetworkSandbox.LoadSceneAsync(string, UnityEngine.SceneManagement.LoadSceneMode)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Server Only]</b></i>  Loads a scene asynchronously. This should only be called for scenes included in the build of the game.
  example: []
  syntax:
    content: public void LoadSceneAsync(string sceneName, LoadSceneMode loadSceneMode)
    parameters:
    - id: sceneName
      type: System.String
    - id: loadSceneMode
      type: UnityEngine.SceneManagement.LoadSceneMode
    content.vb: Public Sub LoadSceneAsync(sceneName As String, loadSceneMode As LoadSceneMode)
  overload: Netick.Unity.NetworkSandbox.LoadSceneAsync*
  nameWithType.vb: NetworkSandbox.LoadSceneAsync(String, LoadSceneMode)
  fullName.vb: Netick.Unity.NetworkSandbox.LoadSceneAsync(String, UnityEngine.SceneManagement.LoadSceneMode)
  name.vb: LoadSceneAsync(String, LoadSceneMode)
- uid: Netick.Unity.NetworkSandbox.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneParameters)
  commentId: M:Netick.Unity.NetworkSandbox.LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneParameters)
  id: LoadSceneAsync(System.String,UnityEngine.SceneManagement.LoadSceneParameters)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LoadSceneAsync(string, LoadSceneParameters)
  nameWithType: NetworkSandbox.LoadSceneAsync(string, LoadSceneParameters)
  fullName: Netick.Unity.NetworkSandbox.LoadSceneAsync(string, UnityEngine.SceneManagement.LoadSceneParameters)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void LoadSceneAsync(string sceneName, LoadSceneParameters loadSceneParameters)
    parameters:
    - id: sceneName
      type: System.String
    - id: loadSceneParameters
      type: UnityEngine.SceneManagement.LoadSceneParameters
    content.vb: Public Sub LoadSceneAsync(sceneName As String, loadSceneParameters As LoadSceneParameters)
  overload: Netick.Unity.NetworkSandbox.LoadSceneAsync*
  nameWithType.vb: NetworkSandbox.LoadSceneAsync(String, LoadSceneParameters)
  fullName.vb: Netick.Unity.NetworkSandbox.LoadSceneAsync(String, UnityEngine.SceneManagement.LoadSceneParameters)
  name.vb: LoadSceneAsync(String, LoadSceneParameters)
- uid: Netick.Unity.NetworkSandbox.LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneMode)
  commentId: M:Netick.Unity.NetworkSandbox.LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneMode)
  id: LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneMode)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LoadSceneAsync(int, LoadSceneMode)
  nameWithType: NetworkSandbox.LoadSceneAsync(int, LoadSceneMode)
  fullName: Netick.Unity.NetworkSandbox.LoadSceneAsync(int, UnityEngine.SceneManagement.LoadSceneMode)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void LoadSceneAsync(int buildIndex, LoadSceneMode loadSceneMode)
    parameters:
    - id: buildIndex
      type: System.Int32
    - id: loadSceneMode
      type: UnityEngine.SceneManagement.LoadSceneMode
    content.vb: Public Sub LoadSceneAsync(buildIndex As Integer, loadSceneMode As LoadSceneMode)
  overload: Netick.Unity.NetworkSandbox.LoadSceneAsync*
  nameWithType.vb: NetworkSandbox.LoadSceneAsync(Integer, LoadSceneMode)
  fullName.vb: Netick.Unity.NetworkSandbox.LoadSceneAsync(Integer, UnityEngine.SceneManagement.LoadSceneMode)
  name.vb: LoadSceneAsync(Integer, LoadSceneMode)
- uid: Netick.Unity.NetworkSandbox.LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)
  commentId: M:Netick.Unity.NetworkSandbox.LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)
  id: LoadSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LoadSceneAsync(int, LoadSceneParameters)
  nameWithType: NetworkSandbox.LoadSceneAsync(int, LoadSceneParameters)
  fullName: Netick.Unity.NetworkSandbox.LoadSceneAsync(int, UnityEngine.SceneManagement.LoadSceneParameters)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void LoadSceneAsync(int buildIndex, LoadSceneParameters loadSceneParameters)
    parameters:
    - id: buildIndex
      type: System.Int32
    - id: loadSceneParameters
      type: UnityEngine.SceneManagement.LoadSceneParameters
    content.vb: Public Sub LoadSceneAsync(buildIndex As Integer, loadSceneParameters As LoadSceneParameters)
  overload: Netick.Unity.NetworkSandbox.LoadSceneAsync*
  nameWithType.vb: NetworkSandbox.LoadSceneAsync(Integer, LoadSceneParameters)
  fullName.vb: Netick.Unity.NetworkSandbox.LoadSceneAsync(Integer, UnityEngine.SceneManagement.LoadSceneParameters)
  name.vb: LoadSceneAsync(Integer, LoadSceneParameters)
- uid: Netick.Unity.NetworkSandbox.UnloadSceneAsync(System.String)
  commentId: M:Netick.Unity.NetworkSandbox.UnloadSceneAsync(System.String)
  id: UnloadSceneAsync(System.String)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: UnloadSceneAsync(string)
  nameWithType: NetworkSandbox.UnloadSceneAsync(string)
  fullName: Netick.Unity.NetworkSandbox.UnloadSceneAsync(string)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Server Only]</b></i>  Unloads a scene asynchronously.
  example: []
  syntax:
    content: public void UnloadSceneAsync(string sceneName)
    parameters:
    - id: sceneName
      type: System.String
    content.vb: Public Sub UnloadSceneAsync(sceneName As String)
  overload: Netick.Unity.NetworkSandbox.UnloadSceneAsync*
  nameWithType.vb: NetworkSandbox.UnloadSceneAsync(String)
  fullName.vb: Netick.Unity.NetworkSandbox.UnloadSceneAsync(String)
  name.vb: UnloadSceneAsync(String)
- uid: Netick.Unity.NetworkSandbox.UnloadSceneAsync(System.Int32)
  commentId: M:Netick.Unity.NetworkSandbox.UnloadSceneAsync(System.Int32)
  id: UnloadSceneAsync(System.Int32)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: UnloadSceneAsync(int)
  nameWithType: NetworkSandbox.UnloadSceneAsync(int)
  fullName: Netick.Unity.NetworkSandbox.UnloadSceneAsync(int)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void UnloadSceneAsync(int buildIndex)
    parameters:
    - id: buildIndex
      type: System.Int32
    content.vb: Public Sub UnloadSceneAsync(buildIndex As Integer)
  overload: Netick.Unity.NetworkSandbox.UnloadSceneAsync*
  nameWithType.vb: NetworkSandbox.UnloadSceneAsync(Integer)
  fullName.vb: Netick.Unity.NetworkSandbox.UnloadSceneAsync(Integer)
  name.vb: UnloadSceneAsync(Integer)
- uid: Netick.Unity.NetworkSandbox.UnloadSceneAsync(UnityEngine.SceneManagement.Scene)
  commentId: M:Netick.Unity.NetworkSandbox.UnloadSceneAsync(UnityEngine.SceneManagement.Scene)
  id: UnloadSceneAsync(UnityEngine.SceneManagement.Scene)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: UnloadSceneAsync(Scene)
  nameWithType: NetworkSandbox.UnloadSceneAsync(Scene)
  fullName: Netick.Unity.NetworkSandbox.UnloadSceneAsync(UnityEngine.SceneManagement.Scene)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void UnloadSceneAsync(Scene scene)
    parameters:
    - id: scene
      type: UnityEngine.SceneManagement.Scene
    content.vb: Public Sub UnloadSceneAsync(scene As Scene)
  overload: Netick.Unity.NetworkSandbox.UnloadSceneAsync*
- uid: Netick.Unity.NetworkSandbox.LoadCustomSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)
  commentId: M:Netick.Unity.NetworkSandbox.LoadCustomSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)
  id: LoadCustomSceneAsync(System.Int32,UnityEngine.SceneManagement.LoadSceneParameters)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LoadCustomSceneAsync(int, LoadSceneParameters)
  nameWithType: NetworkSandbox.LoadCustomSceneAsync(int, LoadSceneParameters)
  fullName: Netick.Unity.NetworkSandbox.LoadCustomSceneAsync(int, UnityEngine.SceneManagement.LoadSceneParameters)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void LoadCustomSceneAsync(int customIndex, LoadSceneParameters loadSceneParameters)
    parameters:
    - id: customIndex
      type: System.Int32
    - id: loadSceneParameters
      type: UnityEngine.SceneManagement.LoadSceneParameters
    content.vb: Public Sub LoadCustomSceneAsync(customIndex As Integer, loadSceneParameters As LoadSceneParameters)
  overload: Netick.Unity.NetworkSandbox.LoadCustomSceneAsync*
  nameWithType.vb: NetworkSandbox.LoadCustomSceneAsync(Integer, LoadSceneParameters)
  fullName.vb: Netick.Unity.NetworkSandbox.LoadCustomSceneAsync(Integer, UnityEngine.SceneManagement.LoadSceneParameters)
  name.vb: LoadCustomSceneAsync(Integer, LoadSceneParameters)
- uid: Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync(System.Int32)
  commentId: M:Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync(System.Int32)
  id: UnloadCustomSceneAsync(System.Int32)
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: UnloadCustomSceneAsync(int)
  nameWithType: NetworkSandbox.UnloadCustomSceneAsync(int)
  fullName: Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync(int)
  type: Method
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public void UnloadCustomSceneAsync(int customIndex)
    parameters:
    - id: customIndex
      type: System.Int32
    content.vb: Public Sub UnloadCustomSceneAsync(customIndex As Integer)
  overload: Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync*
  nameWithType.vb: NetworkSandbox.UnloadCustomSceneAsync(Integer)
  fullName.vb: Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync(Integer)
  name.vb: UnloadCustomSceneAsync(Integer)
- uid: Netick.Unity.NetworkSandbox.#ctor
  commentId: M:Netick.Unity.NetworkSandbox.#ctor
  id: '#ctor'
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkSandbox()
  nameWithType: NetworkSandbox.NetworkSandbox()
  fullName: Netick.Unity.NetworkSandbox.NetworkSandbox()
  type: Constructor
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: public NetworkSandbox()
    content.vb: Public Sub New()
  overload: Netick.Unity.NetworkSandbox.#ctor*
  nameWithType.vb: NetworkSandbox.New()
  fullName.vb: Netick.Unity.NetworkSandbox.New()
  name.vb: New()
- uid: Netick.Unity.NetworkSandbox.InputEnabled
  commentId: P:Netick.Unity.NetworkSandbox.InputEnabled
  id: InputEnabled
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: InputEnabled
  nameWithType: NetworkSandbox.InputEnabled
  fullName: Netick.Unity.NetworkSandbox.InputEnabled
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if input is enabled on this sandbox. Use this to enable/disable input at runtime.
  example: []
  syntax:
    content: public bool InputEnabled { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property InputEnabled As Boolean
  overload: Netick.Unity.NetworkSandbox.InputEnabled*
- uid: Netick.Unity.NetworkSandbox.IsVisible
  commentId: P:Netick.Unity.NetworkSandbox.IsVisible
  id: IsVisible
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsVisible
  nameWithType: NetworkSandbox.IsVisible
  fullName: Netick.Unity.NetworkSandbox.IsVisible
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if this sandbox is visible. Use this to enable/disable visibility at runtime.
  example: []
  syntax:
    content: public bool IsVisible { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property IsVisible As Boolean
  overload: Netick.Unity.NetworkSandbox.IsVisible*
- uid: Netick.Unity.NetworkSandbox.ConnectedClients
  commentId: P:Netick.Unity.NetworkSandbox.ConnectedClients
  id: ConnectedClients
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: ConnectedClients
  nameWithType: NetworkSandbox.ConnectedClients
  fullName: Netick.Unity.NetworkSandbox.ConnectedClients
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    A list containing all connected clients currently.

    <p>Note: if you want the clients + the server, use <xref href="Netick.Unity.NetworkSandbox.ConnectedPlayers" data-throw-if-not-resolved="false"></xref>.</p>
  example: []
  syntax:
    content: >-
      [Obsolete("This will be removed in the future, please use Players instead.")]

      public IReadOnlyList<ServerConnection> ConnectedClients { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Netick.ServerConnection}
    content.vb: >-
      <Obsolete("This will be removed in the future, please use Players instead.")>

      Public ReadOnly Property ConnectedClients As IReadOnlyList(Of ServerConnection)
  overload: Netick.Unity.NetworkSandbox.ConnectedClients*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This will be removed in the future, please use Players instead.
- uid: Netick.Unity.NetworkSandbox.ConnectedPlayers
  commentId: P:Netick.Unity.NetworkSandbox.ConnectedPlayers
  id: ConnectedPlayers
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: ConnectedPlayers
  nameWithType: NetworkSandbox.ConnectedPlayers
  fullName: Netick.Unity.NetworkSandbox.ConnectedPlayers
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    <p>A list containing all connected clients currently, in addition to the server (when started as a host).</p>

    <p>Note: if you only want the clients, use <xref href="Netick.Unity.NetworkSandbox.ConnectedClients" data-throw-if-not-resolved="false"></xref>.</p>
  example: []
  syntax:
    content: >-
      [Obsolete("This will be removed in the future, please use Players instead.")]

      public IReadOnlyList<NetworkPlayer> ConnectedPlayers { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Netick.NetworkPlayer}
    content.vb: >-
      <Obsolete("This will be removed in the future, please use Players instead.")>

      Public ReadOnly Property ConnectedPlayers As IReadOnlyList(Of NetworkPlayer)
  overload: Netick.Unity.NetworkSandbox.ConnectedPlayers*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This will be removed in the future, please use Players instead.
- uid: Netick.Unity.NetworkSandbox.CurrentRpcSource
  commentId: P:Netick.Unity.NetworkSandbox.CurrentRpcSource
  id: CurrentRpcSource
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: CurrentRpcSource
  nameWithType: NetworkSandbox.CurrentRpcSource
  fullName: Netick.Unity.NetworkSandbox.CurrentRpcSource
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Always always returns null except when called inside the body of an RPC method, it returns the <xref href="Netick.NetworkConnection" data-throw-if-not-resolved="false"></xref> we are executing RPCs from.
  example: []
  syntax:
    content: >-
      [Obsolete("This will be removed in the future, please read the doc article on Rpcs to learn the new replacement.")]

      public NetworkConnection CurrentRpcSource { get; }
    parameters: []
    return:
      type: Netick.NetworkConnection
    content.vb: >-
      <Obsolete("This will be removed in the future, please read the doc article on Rpcs to learn the new replacement.")>

      Public ReadOnly Property CurrentRpcSource As NetworkConnection
  overload: Netick.Unity.NetworkSandbox.CurrentRpcSource*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This will be removed in the future, please read the doc article on Rpcs to learn the new replacement.
- uid: Netick.Unity.NetworkSandbox.CurrentRpcCaller
  commentId: P:Netick.Unity.NetworkSandbox.CurrentRpcCaller
  id: CurrentRpcCaller
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: CurrentRpcCaller
  nameWithType: NetworkSandbox.CurrentRpcCaller
  fullName: Netick.Unity.NetworkSandbox.CurrentRpcCaller
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Always always returns null except when called inside the body of an RPC method, it returns the <xref href="Netick.NetworkPlayer" data-throw-if-not-resolved="false"></xref> we are executing RPCs from. Works the same as <xref href="Netick.Unity.NetworkSandbox.CurrentRpcSource" data-throw-if-not-resolved="false"></xref>, except when the RPC is called by the local player, it returns Sandbox.LocalPlayer.
  example: []
  syntax:
    content: >-
      [Obsolete("This will be removed in the future, please read the doc article on Rpcs to learn the new replacement.")]

      public NetworkPlayer CurrentRpcCaller { get; }
    parameters: []
    return:
      type: Netick.NetworkPlayer
    content.vb: >-
      <Obsolete("This will be removed in the future, please read the doc article on Rpcs to learn the new replacement.")>

      Public ReadOnly Property CurrentRpcCaller As NetworkPlayer
  overload: Netick.Unity.NetworkSandbox.CurrentRpcCaller*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This will be removed in the future, please read the doc article on Rpcs to learn the new replacement.
- uid: Netick.Unity.NetworkSandbox.Resimulations
  commentId: P:Netick.Unity.NetworkSandbox.Resimulations
  id: Resimulations
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Resimulations
  nameWithType: NetworkSandbox.Resimulations
  fullName: Netick.Unity.NetworkSandbox.Resimulations
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  syntax:
    content: >-
      [Obsolete("This will be removed in the future, please use ResimulationCount instead.")]

      public int Resimulations { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Obsolete("This will be removed in the future, please use ResimulationCount instead.")>

      Public ReadOnly Property Resimulations As Integer
  overload: Netick.Unity.NetworkSandbox.Resimulations*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: This will be removed in the future, please use ResimulationCount instead.
- uid: Netick.Unity.NetworkSandbox.UserObject
  commentId: P:Netick.Unity.NetworkSandbox.UserObject
  id: UserObject
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: UserObject
  nameWithType: NetworkSandbox.UserObject
  fullName: Netick.Unity.NetworkSandbox.UserObject
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Use this to associate an object with this sandbox.
  example: []
  syntax:
    content: public object UserObject { get; set; }
    parameters: []
    return:
      type: System.Object
    content.vb: Public Property UserObject As Object
  overload: Netick.Unity.NetworkSandbox.UserObject*
- uid: Netick.Unity.NetworkSandbox.Name
  commentId: P:Netick.Unity.NetworkSandbox.Name
  id: Name
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: NetworkSandbox.Name
  fullName: Netick.Unity.NetworkSandbox.Name
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Name of this sandbox.
  example: []
  syntax:
    content: public string Name { get; }
    parameters: []
    return:
      type: System.String
    content.vb: Public ReadOnly Property Name As String
  overload: Netick.Unity.NetworkSandbox.Name*
- uid: Netick.Unity.NetworkSandbox.Engine
  commentId: P:Netick.Unity.NetworkSandbox.Engine
  id: Engine
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Engine
  nameWithType: NetworkSandbox.Engine
  fullName: Netick.Unity.NetworkSandbox.Engine
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The NetickEngine instance attached to this sandbox.
  example: []
  syntax:
    content: public NetickEngine Engine { get; }
    parameters: []
    return:
      type: Netick.NetickEngine
    content.vb: Public ReadOnly Property Engine As NetickEngine
  overload: Netick.Unity.NetworkSandbox.Engine*
- uid: Netick.Unity.NetworkSandbox.StartMode
  commentId: P:Netick.Unity.NetworkSandbox.StartMode
  id: StartMode
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: StartMode
  nameWithType: NetworkSandbox.StartMode
  fullName: Netick.Unity.NetworkSandbox.StartMode
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The mode this sandbox was started in.
  example: []
  syntax:
    content: public NetickStartMode StartMode { get; }
    parameters: []
    return:
      type: Netick.NetickStartMode
    content.vb: Public ReadOnly Property StartMode As NetickStartMode
  overload: Netick.Unity.NetworkSandbox.StartMode*
- uid: Netick.Unity.NetworkSandbox.IsRunning
  commentId: P:Netick.Unity.NetworkSandbox.IsRunning
  id: IsRunning
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsRunning
  nameWithType: NetworkSandbox.IsRunning
  fullName: Netick.Unity.NetworkSandbox.IsRunning
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if this <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> has been started.
  example: []
  syntax:
    content: public bool IsRunning { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsRunning As Boolean
  overload: Netick.Unity.NetworkSandbox.IsRunning*
- uid: Netick.Unity.NetworkSandbox.IsServer
  commentId: P:Netick.Unity.NetworkSandbox.IsServer
  id: IsServer
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsServer
  nameWithType: NetworkSandbox.IsServer
  fullName: Netick.Unity.NetworkSandbox.IsServer
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if this <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> is the server.
  example: []
  syntax:
    content: public bool IsServer { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsServer As Boolean
  overload: Netick.Unity.NetworkSandbox.IsServer*
- uid: Netick.Unity.NetworkSandbox.IsClient
  commentId: P:Netick.Unity.NetworkSandbox.IsClient
  id: IsClient
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsClient
  nameWithType: NetworkSandbox.IsClient
  fullName: Netick.Unity.NetworkSandbox.IsClient
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if this <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> is a client.
  example: []
  syntax:
    content: public bool IsClient { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsClient As Boolean
  overload: Netick.Unity.NetworkSandbox.IsClient*
- uid: Netick.Unity.NetworkSandbox.IsHost
  commentId: P:Netick.Unity.NetworkSandbox.IsHost
  id: IsHost
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsHost
  nameWithType: NetworkSandbox.IsHost
  fullName: Netick.Unity.NetworkSandbox.IsHost
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if this <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> is a host.
  example: []
  syntax:
    content: public bool IsHost { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsHost As Boolean
  overload: Netick.Unity.NetworkSandbox.IsHost*
- uid: Netick.Unity.NetworkSandbox.IsPlayer
  commentId: P:Netick.Unity.NetworkSandbox.IsPlayer
  id: IsPlayer
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsPlayer
  nameWithType: NetworkSandbox.IsPlayer
  fullName: Netick.Unity.NetworkSandbox.IsPlayer
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if this <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref> is a player, which is the case when running as a Client, Host, or in Single-Player mode.
  example: []
  syntax:
    content: public bool IsPlayer { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsPlayer As Boolean
  overload: Netick.Unity.NetworkSandbox.IsPlayer*
- uid: Netick.Unity.NetworkSandbox.Config
  commentId: P:Netick.Unity.NetworkSandbox.Config
  id: Config
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Config
  nameWithType: NetworkSandbox.Config
  fullName: Netick.Unity.NetworkSandbox.Config
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Configuration data for Netick.
  example: []
  syntax:
    content: public NetickConfig Config { get; }
    parameters: []
    return:
      type: Netick.Unity.NetickConfig
    content.vb: Public ReadOnly Property Config As NetickConfig
  overload: Netick.Unity.NetworkSandbox.Config*
- uid: Netick.Unity.NetworkSandbox.Physics2D
  commentId: P:Netick.Unity.NetworkSandbox.Physics2D
  id: Physics2D
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Physics2D
  nameWithType: NetworkSandbox.Physics2D
  fullName: Netick.Unity.NetworkSandbox.Physics2D
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The <xref href="UnityEngine.PhysicsScene2D" data-throw-if-not-resolved="false"></xref> associated with this <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref>. Always use this to perform physics queries inside the sandbox instead of <xref href="UnityEngine.Physics2D" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public PhysicsScene2D Physics2D { get; }
    parameters: []
    return:
      type: UnityEngine.PhysicsScene2D
    content.vb: Public ReadOnly Property Physics2D As PhysicsScene2D
  overload: Netick.Unity.NetworkSandbox.Physics2D*
- uid: Netick.Unity.NetworkSandbox.Physics
  commentId: P:Netick.Unity.NetworkSandbox.Physics
  id: Physics
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Physics
  nameWithType: NetworkSandbox.Physics
  fullName: Netick.Unity.NetworkSandbox.Physics
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The <xref href="UnityEngine.PhysicsScene" data-throw-if-not-resolved="false"></xref> associated with this <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref>. Always use this to perform physics queries inside the sandbox instead of <xref href="UnityEngine.Physics" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public PhysicsScene Physics { get; }
    parameters: []
    return:
      type: UnityEngine.PhysicsScene
    content.vb: Public ReadOnly Property Physics As PhysicsScene
  overload: Netick.Unity.NetworkSandbox.Physics*
- uid: Netick.Unity.NetworkSandbox.Scene
  commentId: P:Netick.Unity.NetworkSandbox.Scene
  id: Scene
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Scene
  nameWithType: NetworkSandbox.Scene
  fullName: Netick.Unity.NetworkSandbox.Scene
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The <xref href="UnityEngine.SceneManagement.Scene" data-throw-if-not-resolved="false"></xref> associated with this <xref href="Netick.Unity.NetworkSandbox" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public Scene Scene { get; }
    parameters: []
    return:
      type: UnityEngine.SceneManagement.Scene
    content.vb: Public ReadOnly Property Scene As Scene
  overload: Netick.Unity.NetworkSandbox.Scene*
- uid: Netick.Unity.NetworkSandbox.PhysicsPrediction
  commentId: P:Netick.Unity.NetworkSandbox.PhysicsPrediction
  id: PhysicsPrediction
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: PhysicsPrediction
  nameWithType: NetworkSandbox.PhysicsPrediction
  fullName: Netick.Unity.NetworkSandbox.PhysicsPrediction
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Use this to enable/disable Physics Prediction in the client at runtime.
  example: []
  syntax:
    content: public bool PhysicsPrediction { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property PhysicsPrediction As Boolean
  overload: Netick.Unity.NetworkSandbox.PhysicsPrediction*
- uid: Netick.Unity.NetworkSandbox.ServerEndPoint
  commentId: P:Netick.Unity.NetworkSandbox.ServerEndPoint
  id: ServerEndPoint
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: ServerEndPoint
  nameWithType: NetworkSandbox.ServerEndPoint
  fullName: Netick.Unity.NetworkSandbox.ServerEndPoint
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> The IPEndPoint of the server you are connected to. Returns null if you are not connected to any server, or if you are the server.
  example: []
  syntax:
    content: public IEndPoint ServerEndPoint { get; }
    parameters: []
    return:
      type: Netick.IEndPoint
    content.vb: Public ReadOnly Property ServerEndPoint As IEndPoint
  overload: Netick.Unity.NetworkSandbox.ServerEndPoint*
- uid: Netick.Unity.NetworkSandbox.IsConnected
  commentId: P:Netick.Unity.NetworkSandbox.IsConnected
  id: IsConnected
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsConnected
  nameWithType: NetworkSandbox.IsConnected
  fullName: Netick.Unity.NetworkSandbox.IsConnected
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> Returns true if this client is currently connected to a server.
  example: []
  syntax:
    content: public bool IsConnected { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsConnected As Boolean
  overload: Netick.Unity.NetworkSandbox.IsConnected*
- uid: Netick.Unity.NetworkSandbox.Transport
  commentId: P:Netick.Unity.NetworkSandbox.Transport
  id: Transport
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Transport
  nameWithType: NetworkSandbox.Transport
  fullName: Netick.Unity.NetworkSandbox.Transport
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The underlying transport used for low-level networking.
  example: []
  syntax:
    content: public NetworkTransport Transport { get; }
    parameters: []
    return:
      type: Netick.NetworkTransport
    content.vb: Public ReadOnly Property Transport As NetworkTransport
  overload: Netick.Unity.NetworkSandbox.Transport*
- uid: Netick.Unity.NetworkSandbox.Players
  commentId: P:Netick.Unity.NetworkSandbox.Players
  id: Players
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Players
  nameWithType: NetworkSandbox.Players
  fullName: Netick.Unity.NetworkSandbox.Players
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: A list containing the ids of all connected players currently. This list is networked and synced to all clients.
  example: []
  syntax:
    content: public IReadOnlyList<NetworkPlayerId> Players { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{Netick.NetworkPlayerId}
    content.vb: Public ReadOnly Property Players As IReadOnlyList(Of NetworkPlayerId)
  overload: Netick.Unity.NetworkSandbox.Players*
- uid: Netick.Unity.NetworkSandbox.ConnectedServer
  commentId: P:Netick.Unity.NetworkSandbox.ConnectedServer
  id: ConnectedServer
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: ConnectedServer
  nameWithType: NetworkSandbox.ConnectedServer
  fullName: Netick.Unity.NetworkSandbox.ConnectedServer
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The server the client is connected to.
  example: []
  syntax:
    content: public NetworkConnection ConnectedServer { get; }
    parameters: []
    return:
      type: Netick.NetworkConnection
    content.vb: Public ReadOnly Property ConnectedServer As NetworkConnection
  overload: Netick.Unity.NetworkSandbox.ConnectedServer*
- uid: Netick.Unity.NetworkSandbox.Objects
  commentId: P:Netick.Unity.NetworkSandbox.Objects
  id: Objects
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Objects
  nameWithType: NetworkSandbox.Objects
  fullName: Netick.Unity.NetworkSandbox.Objects
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: A dictionary containing all simulated/registered network objects [<xref href="Netick.Unity.NetworkObject" data-throw-if-not-resolved="false"></xref>] currently.
  example: []
  syntax:
    content: public IReadOnlyDictionary<int, NetworkObject> Objects { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyDictionary{System.Int32,Netick.Unity.NetworkObject}
    content.vb: Public ReadOnly Property Objects As IReadOnlyDictionary(Of Integer, NetworkObject)
  overload: Netick.Unity.NetworkSandbox.Objects*
- uid: Netick.Unity.NetworkSandbox.InterestManagement
  commentId: P:Netick.Unity.NetworkSandbox.InterestManagement
  id: InterestManagement
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: InterestManagement
  nameWithType: NetworkSandbox.InterestManagement
  fullName: Netick.Unity.NetworkSandbox.InterestManagement
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Use this to manages interest groups and area of interest (AoI) layers.
  example: []
  syntax:
    content: public InterestManagement InterestManagement { get; }
    parameters: []
    return:
      type: Netick.InterestManagement
    content.vb: Public ReadOnly Property InterestManagement As InterestManagement
  overload: Netick.Unity.NetworkSandbox.InterestManagement*
- uid: Netick.Unity.NetworkSandbox.LocalPlayer
  commentId: P:Netick.Unity.NetworkSandbox.LocalPlayer
  id: LocalPlayer
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LocalPlayer
  nameWithType: NetworkSandbox.LocalPlayer
  fullName: Netick.Unity.NetworkSandbox.LocalPlayer
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The local player of this sandbox instance.
  example: []
  syntax:
    content: public NetworkPlayer LocalPlayer { get; }
    parameters: []
    return:
      type: Netick.NetworkPlayer
    content.vb: Public ReadOnly Property LocalPlayer As NetworkPlayer
  overload: Netick.Unity.NetworkSandbox.LocalPlayer*
- uid: Netick.Unity.NetworkSandbox.LocalInterpolation
  commentId: P:Netick.Unity.NetworkSandbox.LocalInterpolation
  id: LocalInterpolation
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: LocalInterpolation
  nameWithType: NetworkSandbox.LocalInterpolation
  fullName: Netick.Unity.NetworkSandbox.LocalInterpolation
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The Local (predicted) Interpolation instance used for interpolating local/predicted objects. Includes useful interpolation data, such as the current interpolation alpha, the ticks being interpolated, and the local interpolation time (in seconds).
  example: []
  syntax:
    content: public LocalInterpolation LocalInterpolation { get; }
    parameters: []
    return:
      type: Netick.LocalInterpolation
    content.vb: Public ReadOnly Property LocalInterpolation As LocalInterpolation
  overload: Netick.Unity.NetworkSandbox.LocalInterpolation*
- uid: Netick.Unity.NetworkSandbox.RemoteInterpolation
  commentId: P:Netick.Unity.NetworkSandbox.RemoteInterpolation
  id: RemoteInterpolation
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: RemoteInterpolation
  nameWithType: NetworkSandbox.RemoteInterpolation
  fullName: Netick.Unity.NetworkSandbox.RemoteInterpolation
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    The Remote Interpolation instance used for interpolating remote objects on the client. Includes useful interpolation data, such as the current interpolation alpha, the ticks being interpolated, the remote interpolation time (in seconds), and the remote interpolation delay (in seconds).

    <p>Note: this is only valid in the client.</p>
  example: []
  syntax:
    content: public RemoteInterpolation RemoteInterpolation { get; }
    parameters: []
    return:
      type: Netick.RemoteInterpolation
    content.vb: Public ReadOnly Property RemoteInterpolation As RemoteInterpolation
  overload: Netick.Unity.NetworkSandbox.RemoteInterpolation*
- uid: Netick.Unity.NetworkSandbox.Timer
  commentId: P:Netick.Unity.NetworkSandbox.Timer
  id: Timer
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Timer
  nameWithType: NetworkSandbox.Timer
  fullName: Netick.Unity.NetworkSandbox.Timer
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: The simulation clock used for managing time in the network simulation.
  example: []
  syntax:
    content: public SimulationClock Timer { get; }
    parameters: []
    return:
      type: Netick.SimulationClock
    content.vb: Public ReadOnly Property Timer As SimulationClock
  overload: Netick.Unity.NetworkSandbox.Timer*
- uid: Netick.Unity.NetworkSandbox.FixedDeltaTime
  commentId: P:Netick.Unity.NetworkSandbox.FixedDeltaTime
  id: FixedDeltaTime
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: FixedDeltaTime
  nameWithType: NetworkSandbox.FixedDeltaTime
  fullName: Netick.Unity.NetworkSandbox.FixedDeltaTime
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Time period between network simulation steps. Same as <xref href="UnityEngine.Time.fixedDeltaTime" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public float FixedDeltaTime { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property FixedDeltaTime As Single
  overload: Netick.Unity.NetworkSandbox.FixedDeltaTime*
- uid: Netick.Unity.NetworkSandbox.DeltaTime
  commentId: P:Netick.Unity.NetworkSandbox.DeltaTime
  id: DeltaTime
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: DeltaTime
  nameWithType: NetworkSandbox.DeltaTime
  fullName: Netick.Unity.NetworkSandbox.DeltaTime
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Time period between frames. Same as <xref href="UnityEngine.Time.deltaTime" data-throw-if-not-resolved="false"></xref>
  example: []
  syntax:
    content: public float DeltaTime { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property DeltaTime As Single
  overload: Netick.Unity.NetworkSandbox.DeltaTime*
- uid: Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime
  commentId: P:Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime
  id: ScaledFixedDeltaTime
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: ScaledFixedDeltaTime
  nameWithType: NetworkSandbox.ScaledFixedDeltaTime
  fullName: Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Scaled time period between network simulation steps. This is the same as <xref href="UnityEngine.Time.fixedDeltaTime" data-throw-if-not-resolved="false"></xref>, but multiplied by <xref href="UnityEngine.Time.timeScale" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float ScaledFixedDeltaTime { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property ScaledFixedDeltaTime As Single
  overload: Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime*
- uid: Netick.Unity.NetworkSandbox.NetworkTime
  commentId: P:Netick.Unity.NetworkSandbox.NetworkTime
  id: NetworkTime
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: NetworkTime
  nameWithType: NetworkSandbox.NetworkTime
  fullName: Netick.Unity.NetworkSandbox.NetworkTime
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Current (local/predicted) network time in seconds. Same as <xref href="Netick.LocalInterpolation.Time" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public float NetworkTime { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property NetworkTime As Single
  overload: Netick.Unity.NetworkSandbox.NetworkTime*
- uid: Netick.Unity.NetworkSandbox.Tick
  commentId: P:Netick.Unity.NetworkSandbox.Tick
  id: Tick
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Tick
  nameWithType: NetworkSandbox.Tick
  fullName: Netick.Unity.NetworkSandbox.Tick
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Current simulation tick. 

    <p>On the server, <b>it's always going forward/increasing.</b></p>

    <p>On the client, <b>during resimulations it returns the current re-simulated tick. </b> To check for resimulations, use <xref href="Netick.Unity.NetworkSandbox.IsResimulating" data-throw-if-not-resolved="false"></xref>.</p>
  example: []
  syntax:
    content: public Tick Tick { get; }
    parameters: []
    return:
      type: Netick.Tick
    content.vb: Public ReadOnly Property Tick As Tick
  overload: Netick.Unity.NetworkSandbox.Tick*
- uid: Netick.Unity.NetworkSandbox.AuthoritativeTick
  commentId: P:Netick.Unity.NetworkSandbox.AuthoritativeTick
  id: AuthoritativeTick
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: AuthoritativeTick
  nameWithType: NetworkSandbox.AuthoritativeTick
  fullName: Netick.Unity.NetworkSandbox.AuthoritativeTick
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Last received tick on the client. On the server, it returns the same value as Sandbox.Tick.
  example: []
  syntax:
    content: public Tick AuthoritativeTick { get; }
    parameters: []
    return:
      type: Netick.Tick
    content.vb: Public ReadOnly Property AuthoritativeTick As Tick
  overload: Netick.Unity.NetworkSandbox.AuthoritativeTick*
- uid: Netick.Unity.NetworkSandbox.PredictedTick
  commentId: P:Netick.Unity.NetworkSandbox.PredictedTick
  id: PredictedTick
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: PredictedTick
  nameWithType: NetworkSandbox.PredictedTick
  fullName: Netick.Unity.NetworkSandbox.PredictedTick
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Last predicted tick. 

    <p>On the client, <b>it always returns the predicted tick of the client, regardless of whether it's a resimulation or not.</b></p>

    <p>On the server, <b>it returns the same value as Sandbox.Tick</b></p>
  example: []
  syntax:
    content: public Tick PredictedTick { get; }
    parameters: []
    return:
      type: Netick.Tick
    content.vb: Public ReadOnly Property PredictedTick As Tick
  overload: Netick.Unity.NetworkSandbox.PredictedTick*
- uid: Netick.Unity.NetworkSandbox.IsResimulating
  commentId: P:Netick.Unity.NetworkSandbox.IsResimulating
  id: IsResimulating
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsResimulating
  nameWithType: NetworkSandbox.IsResimulating
  fullName: Netick.Unity.NetworkSandbox.IsResimulating
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if we are currently re-simulating a previous input/tick of the past. On the server, it always returns false since <b>only the clients resimulate</b>.
  example: []
  syntax:
    content: public bool IsResimulating { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsResimulating As Boolean
  overload: Netick.Unity.NetworkSandbox.IsResimulating*
- uid: Netick.Unity.NetworkSandbox.ResimulationCount
  commentId: P:Netick.Unity.NetworkSandbox.ResimulationCount
  id: ResimulationCount
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: ResimulationCount
  nameWithType: NetworkSandbox.ResimulationCount
  fullName: Netick.Unity.NetworkSandbox.ResimulationCount
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> The number of re-simulations that have been performed in this tick. This is only valid on the client (and during the re-simulation stage), and it returns 0 on the server.
  example: []
  syntax:
    content: public int ResimulationCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ResimulationCount As Integer
  overload: Netick.Unity.NetworkSandbox.ResimulationCount*
- uid: Netick.Unity.NetworkSandbox.ResimulationStep
  commentId: P:Netick.Unity.NetworkSandbox.ResimulationStep
  id: ResimulationStep
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: ResimulationStep
  nameWithType: NetworkSandbox.ResimulationStep
  fullName: Netick.Unity.NetworkSandbox.ResimulationStep
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> Returns the current re-simulation step we are currently performing, if we are in the re-simulation stage. This is only valid on the client, and it returns 0 on the server.
  example: []
  syntax:
    content: public int ResimulationStep { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property ResimulationStep As Integer
  overload: Netick.Unity.NetworkSandbox.ResimulationStep*
- uid: Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall
  commentId: P:Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall
  id: IsFirstNetworkFixedUpdateCall
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsFirstNetworkFixedUpdateCall
  nameWithType: NetworkSandbox.IsFirstNetworkFixedUpdateCall
  fullName: Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if this NetworkFixedUpdate call is the first one executed in this frame. This excludes re-simulations, and it only refers to new/forward ticks.
  example: []
  syntax:
    content: public bool IsFirstNetworkFixedUpdateCall { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFirstNetworkFixedUpdateCall As Boolean
  overload: Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall*
- uid: Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall
  commentId: P:Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall
  id: IsLastNetworkFixedUpdateCall
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: IsLastNetworkFixedUpdateCall
  nameWithType: NetworkSandbox.IsLastNetworkFixedUpdateCall
  fullName: Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Returns true if this NetworkFixedUpdate call is the last one executed in this frame. This excludes re-simulations, and it only refers to new/forward ticks.
  example: []
  syntax:
    content: public bool IsLastNetworkFixedUpdateCall { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsLastNetworkFixedUpdateCall As Boolean
  overload: Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall*
- uid: Netick.Unity.NetworkSandbox.InKBps
  commentId: P:Netick.Unity.NetworkSandbox.InKBps
  id: InKBps
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: InKBps
  nameWithType: NetworkSandbox.InKBps
  fullName: Netick.Unity.NetworkSandbox.InKBps
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Incoming data in kilobytes per second (KBps).
  example: []
  syntax:
    content: public float InKBps { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property InKBps As Single
  overload: Netick.Unity.NetworkSandbox.InKBps*
- uid: Netick.Unity.NetworkSandbox.OutKBps
  commentId: P:Netick.Unity.NetworkSandbox.OutKBps
  id: OutKBps
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: OutKBps
  nameWithType: NetworkSandbox.OutKBps
  fullName: Netick.Unity.NetworkSandbox.OutKBps
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Outgoing data in kilobytes per second (KBps).
  example: []
  syntax:
    content: public float OutKBps { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property OutKBps As Single
  overload: Netick.Unity.NetworkSandbox.OutKBps*
- uid: Netick.Unity.NetworkSandbox.InPacketLoss
  commentId: P:Netick.Unity.NetworkSandbox.InPacketLoss
  id: InPacketLoss
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: InPacketLoss
  nameWithType: NetworkSandbox.InPacketLoss
  fullName: Netick.Unity.NetworkSandbox.InPacketLoss
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> Estimation of incoming packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost.
  example: []
  syntax:
    content: public float InPacketLoss { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property InPacketLoss As Single
  overload: Netick.Unity.NetworkSandbox.InPacketLoss*
- uid: Netick.Unity.NetworkSandbox.OutPacketLoss
  commentId: P:Netick.Unity.NetworkSandbox.OutPacketLoss
  id: OutPacketLoss
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: OutPacketLoss
  nameWithType: NetworkSandbox.OutPacketLoss
  fullName: Netick.Unity.NetworkSandbox.OutPacketLoss
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> Estimation of outgoing packets that are being lost. Value ranges between 0.0 and 1.0, with 1.0 meaning all packets are being lost.
  example: []
  syntax:
    content: public float OutPacketLoss { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property OutPacketLoss As Single
  overload: Netick.Unity.NetworkSandbox.OutPacketLoss*
- uid: Netick.Unity.NetworkSandbox.InterpolationDelay
  commentId: P:Netick.Unity.NetworkSandbox.InterpolationDelay
  id: InterpolationDelay
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: InterpolationDelay
  nameWithType: NetworkSandbox.InterpolationDelay
  fullName: Netick.Unity.NetworkSandbox.InterpolationDelay
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> Remote Interpolation delay in seconds.
  example: []
  syntax:
    content: public float InterpolationDelay { get; }
    parameters: []
    return:
      type: System.Single
    content.vb: Public ReadOnly Property InterpolationDelay As Single
  overload: Netick.Unity.NetworkSandbox.InterpolationDelay*
- uid: Netick.Unity.NetworkSandbox.RTT
  commentId: P:Netick.Unity.NetworkSandbox.RTT
  id: RTT
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: RTT
  nameWithType: NetworkSandbox.RTT
  fullName: Netick.Unity.NetworkSandbox.RTT
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: <i><b>[Client Only]</b></i> The round-trip time (RTT) of the client in seconds.
  example: []
  syntax:
    content: public double RTT { get; }
    parameters: []
    return:
      type: System.Double
    content.vb: Public ReadOnly Property RTT As Double
  overload: Netick.Unity.NetworkSandbox.RTT*
- uid: Netick.Unity.NetworkSandbox.Monitor
  commentId: P:Netick.Unity.NetworkSandbox.Monitor
  id: Monitor
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Monitor
  nameWithType: NetworkSandbox.Monitor
  fullName: Netick.Unity.NetworkSandbox.Monitor
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Used to track network metrics and statistics.
  example: []
  syntax:
    content: public Monitor Monitor { get; }
    parameters: []
    return:
      type: Netick.Monitor
    content.vb: Public ReadOnly Property Monitor As Monitor
  overload: Netick.Unity.NetworkSandbox.Monitor*
- uid: Netick.Unity.NetworkSandbox.Events
  commentId: P:Netick.Unity.NetworkSandbox.Events
  id: Events
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: Events
  nameWithType: NetworkSandbox.Events
  fullName: Netick.Unity.NetworkSandbox.Events
  type: Property
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Use this to subscribe/unsubscribe to/from Netick events.
  example: []
  syntax:
    content: public NetworkCallbacks Events { get; }
    parameters: []
    return:
      type: Netick.Unity.NetworkCallbacks
    content.vb: Public ReadOnly Property Events As NetworkCallbacks
  overload: Netick.Unity.NetworkSandbox.Events*
- uid: Netick.Unity.NetworkSandbox.PostNetworkFixedUpdate
  commentId: E:Netick.Unity.NetworkSandbox.PostNetworkFixedUpdate
  id: PostNetworkFixedUpdate
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: PostNetworkFixedUpdate
  nameWithType: NetworkSandbox.PostNetworkFixedUpdate
  fullName: Netick.Unity.NetworkSandbox.PostNetworkFixedUpdate
  type: Event
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Called after all NetworkFixedUpdate methods have been executed.

    <p>Note: it's called with every resimulation on the client.</p>
  example: []
  syntax:
    content: public event Action PostNetworkFixedUpdate
    return:
      type: System.Action
    content.vb: Public Event PostNetworkFixedUpdate As Action
- uid: Netick.Unity.NetworkSandbox.PreNetworkFixedUpdate
  commentId: E:Netick.Unity.NetworkSandbox.PreNetworkFixedUpdate
  id: PreNetworkFixedUpdate
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: PreNetworkFixedUpdate
  nameWithType: NetworkSandbox.PreNetworkFixedUpdate
  fullName: Netick.Unity.NetworkSandbox.PreNetworkFixedUpdate
  type: Event
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: >-
    Called before any NetworkFixedUpdate method have been executed.

    <p>Note: it's called with every resimulation on the client.</p>
  example: []
  syntax:
    content: public event Action PreNetworkFixedUpdate
    return:
      type: System.Action
    content.vb: Public Event PreNetworkFixedUpdate As Action
- uid: Netick.Unity.NetworkSandbox.PostNetworkUpdate
  commentId: E:Netick.Unity.NetworkSandbox.PostNetworkUpdate
  id: PostNetworkUpdate
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: PostNetworkUpdate
  nameWithType: NetworkSandbox.PostNetworkUpdate
  fullName: Netick.Unity.NetworkSandbox.PostNetworkUpdate
  type: Event
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Called after all NetworkUpdate methods have been executed.
  example: []
  syntax:
    content: public event Action PostNetworkUpdate
    return:
      type: System.Action
    content.vb: Public Event PostNetworkUpdate As Action
- uid: Netick.Unity.NetworkSandbox.PreNetworkUpdate
  commentId: E:Netick.Unity.NetworkSandbox.PreNetworkUpdate
  id: PreNetworkUpdate
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: PreNetworkUpdate
  nameWithType: NetworkSandbox.PreNetworkUpdate
  fullName: Netick.Unity.NetworkSandbox.PreNetworkUpdate
  type: Event
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Called before any NetworkUpdate method have been executed.
  example: []
  syntax:
    content: public event Action PreNetworkUpdate
    return:
      type: System.Action
    content.vb: Public Event PreNetworkUpdate As Action
- uid: Netick.Unity.NetworkSandbox.PostNetworkRender
  commentId: E:Netick.Unity.NetworkSandbox.PostNetworkRender
  id: PostNetworkRender
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: PostNetworkRender
  nameWithType: NetworkSandbox.PostNetworkRender
  fullName: Netick.Unity.NetworkSandbox.PostNetworkRender
  type: Event
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Called after all NetworkRender methods have been executed.
  example: []
  syntax:
    content: public event Action PostNetworkRender
    return:
      type: System.Action
    content.vb: Public Event PostNetworkRender As Action
- uid: Netick.Unity.NetworkSandbox.PreNetworkRender
  commentId: E:Netick.Unity.NetworkSandbox.PreNetworkRender
  id: PreNetworkRender
  parent: Netick.Unity.NetworkSandbox
  langs:
  - csharp
  - vb
  name: PreNetworkRender
  nameWithType: NetworkSandbox.PreNetworkRender
  fullName: Netick.Unity.NetworkSandbox.PreNetworkRender
  type: Event
  assemblies:
  - Netick.Unity
  namespace: Netick.Unity
  summary: Called before any NetworkRender method have been executed.
  example: []
  syntax:
    content: public event Action PreNetworkRender
    return:
      type: System.Action
    content.vb: Public Event PreNetworkRender As Action
references:
- uid: Netick.Unity
  commentId: N:Netick.Unity
  isExternal: true
  href: Netick.html
  name: Netick.Unity
  nameWithType: Netick.Unity
  fullName: Netick.Unity
  spec.csharp:
  - uid: Netick
    name: Netick
    isExternal: true
    href: Netick.html
  - name: .
  - uid: Netick.Unity
    name: Unity
    isExternal: true
    href: Netick.Unity.html
  spec.vb:
  - uid: Netick
    name: Netick
    isExternal: true
    href: Netick.html
  - name: .
  - uid: Netick.Unity
    name: Unity
    isExternal: true
    href: Netick.Unity.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: Netick.IGameEngine
  commentId: T:Netick.IGameEngine
  parent: Netick
  isExternal: true
  href: Netick.IGameEngine.html
  name: IGameEngine
  nameWithType: IGameEngine
  fullName: Netick.IGameEngine
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: Netick
  commentId: N:Netick
  isExternal: true
  href: Netick.html
  name: Netick
  nameWithType: Netick
  fullName: Netick
- uid: Netick.Unity.NetworkSandbox.GetDefaultLoadSceneParameters*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetDefaultLoadSceneParameters
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetDefaultLoadSceneParameters
  name: GetDefaultLoadSceneParameters
  nameWithType: NetworkSandbox.GetDefaultLoadSceneParameters
  fullName: Netick.Unity.NetworkSandbox.GetDefaultLoadSceneParameters
- uid: UnityEngine.SceneManagement.LoadSceneParameters
  isExternal: true
  name: LoadSceneParameters
  nameWithType: LoadSceneParameters
  fullName: UnityEngine.SceneManagement.LoadSceneParameters
- uid: Netick.Unity.NetworkSandbox.GetDefaultPhysicsMode*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetDefaultPhysicsMode
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetDefaultPhysicsMode
  name: GetDefaultPhysicsMode
  nameWithType: NetworkSandbox.GetDefaultPhysicsMode
  fullName: Netick.Unity.NetworkSandbox.GetDefaultPhysicsMode
- uid: UnityEngine.SceneManagement.LocalPhysicsMode
  commentId: '!:UnityEngine.SceneManagement.LocalPhysicsMode'
  isExternal: true
  name: LocalPhysicsMode
  nameWithType: LocalPhysicsMode
  fullName: UnityEngine.SceneManagement.LocalPhysicsMode
- uid: Netick.Unity.NetworkSandbox.EnableComponent*
  commentId: Overload:Netick.Unity.NetworkSandbox.EnableComponent
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_EnableComponent_UnityEngine_Component_
  name: EnableComponent
  nameWithType: NetworkSandbox.EnableComponent
  fullName: Netick.Unity.NetworkSandbox.EnableComponent
- uid: UnityEngine.Component
  isExternal: true
  name: Component
  nameWithType: Component
  fullName: UnityEngine.Component
- uid: Netick.Unity.NetworkSandbox.DisableComponent*
  commentId: Overload:Netick.Unity.NetworkSandbox.DisableComponent
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_DisableComponent_UnityEngine_Component_
  name: DisableComponent
  nameWithType: NetworkSandbox.DisableComponent
  fullName: Netick.Unity.NetworkSandbox.DisableComponent
- uid: Netick.Unity.NetworkSandbox.SetComponentEnabled*
  commentId: Overload:Netick.Unity.NetworkSandbox.SetComponentEnabled
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_SetComponentEnabled_UnityEngine_Component_System_Boolean_
  name: SetComponentEnabled
  nameWithType: NetworkSandbox.SetComponentEnabled
  fullName: Netick.Unity.NetworkSandbox.SetComponentEnabled
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: Netick.Unity.NetworkSandbox.AttachGameObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.AttachGameObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_AttachGameObject_UnityEngine_GameObject_
  name: AttachGameObject
  nameWithType: NetworkSandbox.AttachGameObject
  fullName: Netick.Unity.NetworkSandbox.AttachGameObject
- uid: UnityEngine.GameObject
  isExternal: true
  name: GameObject
  nameWithType: GameObject
  fullName: UnityEngine.GameObject
- uid: Netick.Unity.NetworkSandbox.DetachGameObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.DetachGameObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_DetachGameObject_UnityEngine_GameObject_
  name: DetachGameObject
  nameWithType: NetworkSandbox.DetachGameObject
  fullName: Netick.Unity.NetworkSandbox.DetachGameObject
- uid: Netick.Unity.NetickBehaviour
  commentId: T:Netick.Unity.NetickBehaviour
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetickBehaviour.html
  name: NetickBehaviour
  nameWithType: NetickBehaviour
  fullName: Netick.Unity.NetickBehaviour
- uid: Netick.Unity.NetworkSandbox.AttachBehaviour*
  commentId: Overload:Netick.Unity.NetworkSandbox.AttachBehaviour
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_AttachBehaviour_Netick_Unity_NetickBehaviour_
  name: AttachBehaviour
  nameWithType: NetworkSandbox.AttachBehaviour
  fullName: Netick.Unity.NetworkSandbox.AttachBehaviour
- uid: Netick.Unity.NetworkSandbox.DetachBehaviour*
  commentId: Overload:Netick.Unity.NetworkSandbox.DetachBehaviour
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_DetachBehaviour_Netick_Unity_NetickBehaviour_
  name: DetachBehaviour
  nameWithType: NetworkSandbox.DetachBehaviour
  fullName: Netick.Unity.NetworkSandbox.DetachBehaviour
- uid: Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody*
  commentId: Overload:Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_AttachNonNetworkedRigidbody_UnityEngine_Rigidbody_
  name: AttachNonNetworkedRigidbody
  nameWithType: NetworkSandbox.AttachNonNetworkedRigidbody
  fullName: Netick.Unity.NetworkSandbox.AttachNonNetworkedRigidbody
- uid: UnityEngine.Rigidbody
  isExternal: true
  name: Rigidbody
  nameWithType: Rigidbody
  fullName: UnityEngine.Rigidbody
- uid: Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody*
  commentId: Overload:Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_DetachNonNetworkedRigidbody_UnityEngine_Rigidbody_
  name: DetachNonNetworkedRigidbody
  nameWithType: NetworkSandbox.DetachNonNetworkedRigidbody
  fullName: Netick.Unity.NetworkSandbox.DetachNonNetworkedRigidbody
- uid: Netick.Unity.NetworkSandbox.RemoveFromLoop*
  commentId: Overload:Netick.Unity.NetworkSandbox.RemoveFromLoop
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_RemoveFromLoop_Netick_Unity_NetworkObject_
  name: RemoveFromLoop
  nameWithType: NetworkSandbox.RemoveFromLoop
  fullName: Netick.Unity.NetworkSandbox.RemoveFromLoop
- uid: Netick.Unity.NetworkObject
  commentId: T:Netick.Unity.NetworkObject
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkObject.html
  name: NetworkObject
  nameWithType: NetworkObject
  fullName: Netick.Unity.NetworkObject
- uid: UnityEngine.Object.Instantiate(UnityEngine.Object)
  commentId: M:UnityEngine.Object.Instantiate(UnityEngine.Object)
  isExternal: true
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  commentId: M:Netick.Unity.NetworkSandbox.NetworkInstantiate(UnityEngine.GameObject,UnityEngine.Vector3,UnityEngine.Quaternion,Netick.NetworkPlayer)
  isExternal: true
- uid: Netick.Unity.NetworkSandbox.Instantiate*
  commentId: Overload:Netick.Unity.NetworkSandbox.Instantiate
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Instantiate_UnityEngine_GameObject_UnityEngine_Vector3_UnityEngine_Quaternion_
  name: Instantiate
  nameWithType: NetworkSandbox.Instantiate
  fullName: Netick.Unity.NetworkSandbox.Instantiate
- uid: UnityEngine.Vector3
  isExternal: true
  name: Vector3
  nameWithType: Vector3
  fullName: UnityEngine.Vector3
- uid: UnityEngine.Quaternion
  isExternal: true
  name: Quaternion
  nameWithType: Quaternion
  fullName: UnityEngine.Quaternion
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: Netick.Unity.NetworkSandbox.GetPlayerObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetPlayerObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetPlayerObject_Netick_NetworkPlayer_
  name: GetPlayerObject
  nameWithType: NetworkSandbox.GetPlayerObject
  fullName: Netick.Unity.NetworkSandbox.GetPlayerObject
- uid: Netick.NetworkPlayer
  commentId: T:Netick.NetworkPlayer
  parent: Netick
  isExternal: true
  href: Netick.NetworkPlayer.html
  name: NetworkPlayer
  nameWithType: NetworkPlayer
  fullName: Netick.NetworkPlayer
- uid: Netick.Unity.NetworkSandbox.TryGetPlayerObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.TryGetPlayerObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_TryGetPlayerObject_Netick_NetworkPlayer_Netick_Unity_NetworkObject__
  name: TryGetPlayerObject
  nameWithType: NetworkSandbox.TryGetPlayerObject
  fullName: Netick.Unity.NetworkSandbox.TryGetPlayerObject
- uid: Netick.NetworkPlayerId
  commentId: T:Netick.NetworkPlayerId
  parent: Netick
  isExternal: true
  href: Netick.NetworkPlayerId.html
  name: NetworkPlayerId
  nameWithType: NetworkPlayerId
  fullName: Netick.NetworkPlayerId
- uid: Netick.Unity.NetworkSandbox.SetPlayerObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.SetPlayerObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_SetPlayerObject_Netick_NetworkPlayerId_Netick_Unity_NetworkObject_
  name: SetPlayerObject
  nameWithType: NetworkSandbox.SetPlayerObject
  fullName: Netick.Unity.NetworkSandbox.SetPlayerObject
- uid: Netick.Unity.NetworkSandbox.GetLocalPlayerObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetLocalPlayerObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetLocalPlayerObject
  name: GetLocalPlayerObject
  nameWithType: NetworkSandbox.GetLocalPlayerObject
  fullName: Netick.Unity.NetworkSandbox.GetLocalPlayerObject
- uid: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_TryGetLocalPlayerObject_Netick_Unity_NetworkObject__
  name: TryGetLocalPlayerObject
  nameWithType: NetworkSandbox.TryGetLocalPlayerObject
  fullName: Netick.Unity.NetworkSandbox.TryGetLocalPlayerObject
- uid: Netick.Unity.NetworkSandbox.GetPlayerById*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetPlayerById
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetPlayerById_Netick_NetworkPlayerId_
  name: GetPlayerById
  nameWithType: NetworkSandbox.GetPlayerById
  fullName: Netick.Unity.NetworkSandbox.GetPlayerById
- uid: Netick.Unity.NetworkSandbox.ContainsPlayer*
  commentId: Overload:Netick.Unity.NetworkSandbox.ContainsPlayer
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ContainsPlayer_Netick_NetworkPlayerId_
  name: ContainsPlayer
  nameWithType: NetworkSandbox.ContainsPlayer
  fullName: Netick.Unity.NetworkSandbox.ContainsPlayer
- uid: Netick.Unity.NetworkSandbox.GetObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetObject_System_Int32_
  name: GetObject
  nameWithType: NetworkSandbox.GetObject
  fullName: Netick.Unity.NetworkSandbox.GetObject
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: Netick.Unity.NetworkObjectRef
  commentId: T:Netick.Unity.NetworkObjectRef
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkObjectRef.html
  name: NetworkObjectRef
  nameWithType: NetworkObjectRef
  fullName: Netick.Unity.NetworkObjectRef
- uid: Netick.Unity.NetworkSandbox.TryGetObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.TryGetObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_TryGetObject_System_Int32_Netick_Unity_NetworkObject__
  name: TryGetObject
  nameWithType: NetworkSandbox.TryGetObject
  fullName: Netick.Unity.NetworkSandbox.TryGetObject
- uid: Netick.Unity.NetworkSandbox.GetBehaviour*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetBehaviour
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetBehaviour__1_Netick_Unity_NetworkBehaviourRef___0__
  name: GetBehaviour
  nameWithType: NetworkSandbox.GetBehaviour
  fullName: Netick.Unity.NetworkSandbox.GetBehaviour
- uid: Netick.Unity.NetworkBehaviourRef{{T}}
  commentId: T:Netick.Unity.NetworkBehaviourRef{``0}
  parent: Netick.Unity
  definition: Netick.Unity.NetworkBehaviourRef`1
  href: Netick.Unity.NetworkBehaviourRef-1.html
  name: NetworkBehaviourRef<T>
  nameWithType: NetworkBehaviourRef<T>
  fullName: Netick.Unity.NetworkBehaviourRef<T>
  nameWithType.vb: NetworkBehaviourRef(Of T)
  fullName.vb: Netick.Unity.NetworkBehaviourRef(Of T)
  name.vb: NetworkBehaviourRef(Of T)
  spec.csharp:
  - uid: Netick.Unity.NetworkBehaviourRef`1
    name: NetworkBehaviourRef
    isExternal: true
    href: Netick.Unity.NetworkBehaviourRef-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Netick.Unity.NetworkBehaviourRef`1
    name: NetworkBehaviourRef
    isExternal: true
    href: Netick.Unity.NetworkBehaviourRef-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Netick.Unity.NetworkBehaviourRef`1
  commentId: T:Netick.Unity.NetworkBehaviourRef`1
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkBehaviourRef-1.html
  name: NetworkBehaviourRef<T>
  nameWithType: NetworkBehaviourRef<T>
  fullName: Netick.Unity.NetworkBehaviourRef<T>
  nameWithType.vb: NetworkBehaviourRef(Of T)
  fullName.vb: Netick.Unity.NetworkBehaviourRef(Of T)
  name.vb: NetworkBehaviourRef(Of T)
  spec.csharp:
  - uid: Netick.Unity.NetworkBehaviourRef`1
    name: NetworkBehaviourRef
    isExternal: true
    href: Netick.Unity.NetworkBehaviourRef-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: Netick.Unity.NetworkBehaviourRef`1
    name: NetworkBehaviourRef
    isExternal: true
    href: Netick.Unity.NetworkBehaviourRef-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Netick.Unity.NetworkBehaviour
  commentId: T:Netick.Unity.NetworkBehaviour
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkBehaviour.html
  name: NetworkBehaviour
  nameWithType: NetworkBehaviour
  fullName: Netick.Unity.NetworkBehaviour
- uid: Netick.Unity.NetworkSandbox.TryGetBehaviour*
  commentId: Overload:Netick.Unity.NetworkSandbox.TryGetBehaviour
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_TryGetBehaviour__1_System_Int32___0__
  name: TryGetBehaviour
  nameWithType: NetworkSandbox.TryGetBehaviour
  fullName: Netick.Unity.NetworkSandbox.TryGetBehaviour
- uid: Netick.Unity.NetworkSandbox.GetBehavioursOfType*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetBehavioursOfType
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetBehavioursOfType__1_System_Collections_Generic_List___0__
  name: GetBehavioursOfType
  nameWithType: NetworkSandbox.GetBehavioursOfType
  fullName: Netick.Unity.NetworkSandbox.GetBehavioursOfType
- uid: System.Collections.Generic.List{{T}}
  commentId: T:System.Collections.Generic.List{``0}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: Netick.Unity.NetworkSandbox.GetInput*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetInput
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetInput__1_System_Int32_
  name: GetInput
  nameWithType: NetworkSandbox.GetInput
  fullName: Netick.Unity.NetworkSandbox.GetInput
- uid: Netick.Unity.NetworkSandbox.SetInput*
  commentId: Overload:Netick.Unity.NetworkSandbox.SetInput
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_SetInput__1___0_System_Int32_
  name: SetInput
  nameWithType: NetworkSandbox.SetInput
  fullName: Netick.Unity.NetworkSandbox.SetInput
- uid: Netick.Unity.NetworkSandbox.TickToTime*
  commentId: Overload:Netick.Unity.NetworkSandbox.TickToTime
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_TickToTime_Netick_Tick_
  name: TickToTime
  nameWithType: NetworkSandbox.TickToTime
  fullName: Netick.Unity.NetworkSandbox.TickToTime
- uid: Netick.Tick
  commentId: T:Netick.Tick
  parent: Netick
  isExternal: true
  href: Netick.Tick.html
  name: Tick
  nameWithType: Tick
  fullName: Netick.Tick
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: Netick.Unity.NetworkSandbox.TimeToTick*
  commentId: Overload:Netick.Unity.NetworkSandbox.TimeToTick
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_TimeToTick_System_Single_
  name: TimeToTick
  nameWithType: NetworkSandbox.TimeToTick
  fullName: Netick.Unity.NetworkSandbox.TimeToTick
- uid: Netick.Unity.NetworkSandbox.StartTimer*
  commentId: Overload:Netick.Unity.NetworkSandbox.StartTimer
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_StartTimer_System_Single_System_Boolean_
  name: StartTimer
  nameWithType: NetworkSandbox.StartTimer
  fullName: Netick.Unity.NetworkSandbox.StartTimer
- uid: Netick.NetworkTimer
  commentId: T:Netick.NetworkTimer
  parent: Netick
  isExternal: true
  href: Netick.NetworkTimer.html
  name: NetworkTimer
  nameWithType: NetworkTimer
  fullName: Netick.NetworkTimer
- uid: Netick.Unity.NetworkSandbox.Log*
  commentId: Overload:Netick.Unity.NetworkSandbox.Log
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Log_System_Object_
  name: Log
  nameWithType: NetworkSandbox.Log
  fullName: Netick.Unity.NetworkSandbox.Log
- uid: Netick.Unity.NetworkSandbox.LogWarning*
  commentId: Overload:Netick.Unity.NetworkSandbox.LogWarning
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_LogWarning_System_Object_
  name: LogWarning
  nameWithType: NetworkSandbox.LogWarning
  fullName: Netick.Unity.NetworkSandbox.LogWarning
- uid: Netick.Unity.NetworkSandbox.LogError*
  commentId: Overload:Netick.Unity.NetworkSandbox.LogError
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_LogError_System_Object_
  name: LogError
  nameWithType: NetworkSandbox.LogError
  fullName: Netick.Unity.NetworkSandbox.LogError
- uid: UnityEngine.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: UnityEngine.Object
- uid: Netick.Unity.NetworkEventsListener.OnStartup(Netick.Unity.NetworkSandbox)
  commentId: M:Netick.Unity.NetworkEventsListener.OnStartup(Netick.Unity.NetworkSandbox)
  parent: Netick.Unity.NetworkEventsListener
  isExternal: true
  href: Netick.Unity.NetworkEventsListener.html#Netick_Unity_NetworkEventsListener_OnStartup_Netick_Unity_NetworkSandbox_
  name: OnStartup(NetworkSandbox)
  nameWithType: NetworkEventsListener.OnStartup(NetworkSandbox)
  fullName: Netick.Unity.NetworkEventsListener.OnStartup(Netick.Unity.NetworkSandbox)
  spec.csharp:
  - uid: Netick.Unity.NetworkEventsListener.OnStartup(Netick.Unity.NetworkSandbox)
    name: OnStartup
    isExternal: true
    href: Netick.Unity.NetworkEventsListener.html#Netick_Unity_NetworkEventsListener_OnStartup_Netick_Unity_NetworkSandbox_
  - name: (
  - uid: Netick.Unity.NetworkSandbox
    name: NetworkSandbox
    isExternal: true
    href: Netick.Unity.NetworkSandbox.html
  - name: )
  spec.vb:
  - uid: Netick.Unity.NetworkEventsListener.OnStartup(Netick.Unity.NetworkSandbox)
    name: OnStartup
    isExternal: true
    href: Netick.Unity.NetworkEventsListener.html#Netick_Unity_NetworkEventsListener_OnStartup_Netick_Unity_NetworkSandbox_
  - name: (
  - uid: Netick.Unity.NetworkSandbox
    name: NetworkSandbox
    isExternal: true
    href: Netick.Unity.NetworkSandbox.html
  - name: )
- uid: Netick.Unity.NetworkSandbox.InitializePool*
  commentId: Overload:Netick.Unity.NetworkSandbox.InitializePool
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_InitializePool_UnityEngine_GameObject_System_Int32_System_Boolean_
  name: InitializePool
  nameWithType: NetworkSandbox.InitializePool
  fullName: Netick.Unity.NetworkSandbox.InitializePool
- uid: Netick.Unity.NetworkEventsListener
  commentId: T:Netick.Unity.NetworkEventsListener
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkEventsListener.html
  name: NetworkEventsListener
  nameWithType: NetworkEventsListener
  fullName: Netick.Unity.NetworkEventsListener
- uid: Netick.Unity.NetworkSandbox.DestroyPool*
  commentId: Overload:Netick.Unity.NetworkSandbox.DestroyPool
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_DestroyPool_UnityEngine_GameObject_
  name: DestroyPool
  nameWithType: NetworkSandbox.DestroyPool
  fullName: Netick.Unity.NetworkSandbox.DestroyPool
- uid: Netick.Unity.NetworkSandbox.GetPrefab*
  commentId: Overload:Netick.Unity.NetworkSandbox.GetPrefab
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_GetPrefab_System_String_
  name: GetPrefab
  nameWithType: NetworkSandbox.GetPrefab
  fullName: Netick.Unity.NetworkSandbox.GetPrefab
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: Netick.Unity.NetworkSandbox.NetworkInstantiate*
  commentId: Overload:Netick.Unity.NetworkSandbox.NetworkInstantiate
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_NetworkInstantiate_UnityEngine_GameObject_UnityEngine_Vector3_UnityEngine_Quaternion_Netick_NetworkPlayer_
  name: NetworkInstantiate
  nameWithType: NetworkSandbox.NetworkInstantiate
  fullName: Netick.Unity.NetworkSandbox.NetworkInstantiate
- uid: Netick.Unity.NetworkSandbox.Destroy*
  commentId: Overload:Netick.Unity.NetworkSandbox.Destroy
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Destroy_Netick_Unity_NetworkObject_
  name: Destroy
  nameWithType: NetworkSandbox.Destroy
  fullName: Netick.Unity.NetworkSandbox.Destroy
- uid: Netick.Unity.NetworkSandbox
  commentId: T:Netick.Unity.NetworkSandbox
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html
  name: NetworkSandbox
  nameWithType: NetworkSandbox
  fullName: Netick.Unity.NetworkSandbox
- uid: Netick.Unity.NetworkSandbox.FindSandboxOf*
  commentId: Overload:Netick.Unity.NetworkSandbox.FindSandboxOf
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_FindSandboxOf_UnityEngine_MonoBehaviour_
  name: FindSandboxOf
  nameWithType: NetworkSandbox.FindSandboxOf
  fullName: Netick.Unity.NetworkSandbox.FindSandboxOf
- uid: UnityEngine.MonoBehaviour
  commentId: '!:UnityEngine.MonoBehaviour'
  isExternal: true
  name: MonoBehaviour
  nameWithType: MonoBehaviour
  fullName: UnityEngine.MonoBehaviour
- uid: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag*
  commentId: Overload:Netick.Unity.NetworkSandbox.FindGameObjectsWithTag
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_FindGameObjectsWithTag_System_String_System_Boolean_
  name: FindGameObjectsWithTag
  nameWithType: NetworkSandbox.FindGameObjectsWithTag
  fullName: Netick.Unity.NetworkSandbox.FindGameObjectsWithTag
- uid: System.Collections.Generic.List{UnityEngine.GameObject}
  commentId: T:System.Collections.Generic.List{UnityEngine.GameObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<GameObject>
  nameWithType: List<GameObject>
  fullName: System.Collections.Generic.List<UnityEngine.GameObject>
  nameWithType.vb: List(Of GameObject)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.GameObject)
  name.vb: List(Of GameObject)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: UnityEngine.GameObject
    name: GameObject
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: UnityEngine.GameObject
    name: GameObject
    isExternal: true
  - name: )
- uid: Netick.Unity.NetworkSandbox.FindGameObjectWithTag*
  commentId: Overload:Netick.Unity.NetworkSandbox.FindGameObjectWithTag
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_FindGameObjectWithTag_System_String_System_Boolean_
  name: FindGameObjectWithTag
  nameWithType: NetworkSandbox.FindGameObjectWithTag
  fullName: Netick.Unity.NetworkSandbox.FindGameObjectWithTag
- uid: Netick.Unity.NetworkSandbox.FindObjectOfType*
  commentId: Overload:Netick.Unity.NetworkSandbox.FindObjectOfType
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_FindObjectOfType__1_System_Boolean_
  name: FindObjectOfType
  nameWithType: NetworkSandbox.FindObjectOfType
  fullName: Netick.Unity.NetworkSandbox.FindObjectOfType
- uid: Netick.Unity.NetworkSandbox.FindObjectsOfType*
  commentId: Overload:Netick.Unity.NetworkSandbox.FindObjectsOfType
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_FindObjectsOfType__1_System_Boolean_
  name: FindObjectsOfType
  nameWithType: NetworkSandbox.FindObjectsOfType
  fullName: Netick.Unity.NetworkSandbox.FindObjectsOfType
- uid: Netick.Unity.NetworkSandbox.Connect*
  commentId: Overload:Netick.Unity.NetworkSandbox.Connect
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Connect_System_Int32_System_String_System_Byte___System_Int32_
  name: Connect
  nameWithType: NetworkSandbox.Connect
  fullName: Netick.Unity.NetworkSandbox.Connect
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: Netick.Unity.NetworkSandbox.DisconnectFromServer*
  commentId: Overload:Netick.Unity.NetworkSandbox.DisconnectFromServer
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_DisconnectFromServer
  name: DisconnectFromServer
  nameWithType: NetworkSandbox.DisconnectFromServer
  fullName: Netick.Unity.NetworkSandbox.DisconnectFromServer
- uid: Netick.Unity.NetworkSandbox.Kick*
  commentId: Overload:Netick.Unity.NetworkSandbox.Kick
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Kick_Netick_NetworkPlayerId_
  name: Kick
  nameWithType: NetworkSandbox.Kick
  fullName: Netick.Unity.NetworkSandbox.Kick
- uid: Netick.ServerConnection
  commentId: T:Netick.ServerConnection
  parent: Netick
  isExternal: true
  href: Netick.ServerConnection.html
  name: ServerConnection
  nameWithType: ServerConnection
  fullName: Netick.ServerConnection
- uid: Netick.Unity.NetworkSandbox.CreateMatch*
  commentId: Overload:Netick.Unity.NetworkSandbox.CreateMatch
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_CreateMatch_System_String_
  name: CreateMatch
  nameWithType: NetworkSandbox.CreateMatch
  fullName: Netick.Unity.NetworkSandbox.CreateMatch
- uid: Netick.Unity.NetworkSandbox.RefreshMatchList*
  commentId: Overload:Netick.Unity.NetworkSandbox.RefreshMatchList
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_RefreshMatchList
  name: RefreshMatchList
  nameWithType: NetworkSandbox.RefreshMatchList
  fullName: Netick.Unity.NetworkSandbox.RefreshMatchList
- uid: UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32)
  commentId: M:UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(System.Int32)
  isExternal: true
- uid: Netick.Unity.NetworkSandbox.SwitchScene*
  commentId: Overload:Netick.Unity.NetworkSandbox.SwitchScene
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_SwitchScene_System_String_
  name: SwitchScene
  nameWithType: NetworkSandbox.SwitchScene
  fullName: Netick.Unity.NetworkSandbox.SwitchScene
- uid: Netick.Unity.NetworkSandbox.LoadSceneAsync*
  commentId: Overload:Netick.Unity.NetworkSandbox.LoadSceneAsync
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_LoadSceneAsync_System_String_UnityEngine_SceneManagement_LoadSceneMode_
  name: LoadSceneAsync
  nameWithType: NetworkSandbox.LoadSceneAsync
  fullName: Netick.Unity.NetworkSandbox.LoadSceneAsync
- uid: UnityEngine.SceneManagement.LoadSceneMode
  isExternal: true
  name: LoadSceneMode
  nameWithType: LoadSceneMode
  fullName: UnityEngine.SceneManagement.LoadSceneMode
- uid: Netick.Unity.NetworkSandbox.UnloadSceneAsync*
  commentId: Overload:Netick.Unity.NetworkSandbox.UnloadSceneAsync
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_UnloadSceneAsync_System_String_
  name: UnloadSceneAsync
  nameWithType: NetworkSandbox.UnloadSceneAsync
  fullName: Netick.Unity.NetworkSandbox.UnloadSceneAsync
- uid: UnityEngine.SceneManagement.Scene
  isExternal: true
  name: Scene
  nameWithType: Scene
  fullName: UnityEngine.SceneManagement.Scene
- uid: Netick.Unity.NetworkSandbox.LoadCustomSceneAsync*
  commentId: Overload:Netick.Unity.NetworkSandbox.LoadCustomSceneAsync
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_LoadCustomSceneAsync_System_Int32_UnityEngine_SceneManagement_LoadSceneParameters_
  name: LoadCustomSceneAsync
  nameWithType: NetworkSandbox.LoadCustomSceneAsync
  fullName: Netick.Unity.NetworkSandbox.LoadCustomSceneAsync
- uid: Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync*
  commentId: Overload:Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_UnloadCustomSceneAsync_System_Int32_
  name: UnloadCustomSceneAsync
  nameWithType: NetworkSandbox.UnloadCustomSceneAsync
  fullName: Netick.Unity.NetworkSandbox.UnloadCustomSceneAsync
- uid: Netick.Unity.NetworkSandbox.#ctor*
  commentId: Overload:Netick.Unity.NetworkSandbox.#ctor
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox__ctor
  name: NetworkSandbox
  nameWithType: NetworkSandbox.NetworkSandbox
  fullName: Netick.Unity.NetworkSandbox.NetworkSandbox
  nameWithType.vb: NetworkSandbox.New
  fullName.vb: Netick.Unity.NetworkSandbox.New
  name.vb: New
- uid: Netick.Unity.NetworkSandbox.InputEnabled*
  commentId: Overload:Netick.Unity.NetworkSandbox.InputEnabled
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_InputEnabled
  name: InputEnabled
  nameWithType: NetworkSandbox.InputEnabled
  fullName: Netick.Unity.NetworkSandbox.InputEnabled
- uid: Netick.Unity.NetworkSandbox.IsVisible*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsVisible
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsVisible
  name: IsVisible
  nameWithType: NetworkSandbox.IsVisible
  fullName: Netick.Unity.NetworkSandbox.IsVisible
- uid: Netick.Unity.NetworkSandbox.ConnectedPlayers
  commentId: P:Netick.Unity.NetworkSandbox.ConnectedPlayers
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ConnectedPlayers
  name: ConnectedPlayers
  nameWithType: NetworkSandbox.ConnectedPlayers
  fullName: Netick.Unity.NetworkSandbox.ConnectedPlayers
- uid: Netick.Unity.NetworkSandbox.ConnectedClients*
  commentId: Overload:Netick.Unity.NetworkSandbox.ConnectedClients
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ConnectedClients
  name: ConnectedClients
  nameWithType: NetworkSandbox.ConnectedClients
  fullName: Netick.Unity.NetworkSandbox.ConnectedClients
- uid: System.Collections.Generic.IReadOnlyList{Netick.ServerConnection}
  commentId: T:System.Collections.Generic.IReadOnlyList{Netick.ServerConnection}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<ServerConnection>
  nameWithType: IReadOnlyList<ServerConnection>
  fullName: System.Collections.Generic.IReadOnlyList<Netick.ServerConnection>
  nameWithType.vb: IReadOnlyList(Of ServerConnection)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Netick.ServerConnection)
  name.vb: IReadOnlyList(Of ServerConnection)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Netick.ServerConnection
    name: ServerConnection
    isExternal: true
    href: Netick.ServerConnection.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Netick.ServerConnection
    name: ServerConnection
    isExternal: true
    href: Netick.ServerConnection.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: Netick.Unity.NetworkSandbox.ConnectedClients
  commentId: P:Netick.Unity.NetworkSandbox.ConnectedClients
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ConnectedClients
  name: ConnectedClients
  nameWithType: NetworkSandbox.ConnectedClients
  fullName: Netick.Unity.NetworkSandbox.ConnectedClients
- uid: Netick.Unity.NetworkSandbox.ConnectedPlayers*
  commentId: Overload:Netick.Unity.NetworkSandbox.ConnectedPlayers
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ConnectedPlayers
  name: ConnectedPlayers
  nameWithType: NetworkSandbox.ConnectedPlayers
  fullName: Netick.Unity.NetworkSandbox.ConnectedPlayers
- uid: System.Collections.Generic.IReadOnlyList{Netick.NetworkPlayer}
  commentId: T:System.Collections.Generic.IReadOnlyList{Netick.NetworkPlayer}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<NetworkPlayer>
  nameWithType: IReadOnlyList<NetworkPlayer>
  fullName: System.Collections.Generic.IReadOnlyList<Netick.NetworkPlayer>
  nameWithType.vb: IReadOnlyList(Of NetworkPlayer)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Netick.NetworkPlayer)
  name.vb: IReadOnlyList(Of NetworkPlayer)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Netick.NetworkPlayer
    name: NetworkPlayer
    isExternal: true
    href: Netick.NetworkPlayer.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Netick.NetworkPlayer
    name: NetworkPlayer
    isExternal: true
    href: Netick.NetworkPlayer.html
  - name: )
- uid: Netick.NetworkConnection
  commentId: T:Netick.NetworkConnection
  parent: Netick
  isExternal: true
  href: Netick.NetworkConnection.html
  name: NetworkConnection
  nameWithType: NetworkConnection
  fullName: Netick.NetworkConnection
- uid: Netick.Unity.NetworkSandbox.CurrentRpcSource*
  commentId: Overload:Netick.Unity.NetworkSandbox.CurrentRpcSource
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_CurrentRpcSource
  name: CurrentRpcSource
  nameWithType: NetworkSandbox.CurrentRpcSource
  fullName: Netick.Unity.NetworkSandbox.CurrentRpcSource
- uid: Netick.Unity.NetworkSandbox.CurrentRpcSource
  commentId: P:Netick.Unity.NetworkSandbox.CurrentRpcSource
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_CurrentRpcSource
  name: CurrentRpcSource
  nameWithType: NetworkSandbox.CurrentRpcSource
  fullName: Netick.Unity.NetworkSandbox.CurrentRpcSource
- uid: Netick.Unity.NetworkSandbox.CurrentRpcCaller*
  commentId: Overload:Netick.Unity.NetworkSandbox.CurrentRpcCaller
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_CurrentRpcCaller
  name: CurrentRpcCaller
  nameWithType: NetworkSandbox.CurrentRpcCaller
  fullName: Netick.Unity.NetworkSandbox.CurrentRpcCaller
- uid: Netick.Unity.NetworkSandbox.Resimulations*
  commentId: Overload:Netick.Unity.NetworkSandbox.Resimulations
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Resimulations
  name: Resimulations
  nameWithType: NetworkSandbox.Resimulations
  fullName: Netick.Unity.NetworkSandbox.Resimulations
- uid: Netick.Unity.NetworkSandbox.UserObject*
  commentId: Overload:Netick.Unity.NetworkSandbox.UserObject
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_UserObject
  name: UserObject
  nameWithType: NetworkSandbox.UserObject
  fullName: Netick.Unity.NetworkSandbox.UserObject
- uid: Netick.Unity.NetworkSandbox.Name*
  commentId: Overload:Netick.Unity.NetworkSandbox.Name
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Name
  name: Name
  nameWithType: NetworkSandbox.Name
  fullName: Netick.Unity.NetworkSandbox.Name
- uid: Netick.Unity.NetworkSandbox.Engine*
  commentId: Overload:Netick.Unity.NetworkSandbox.Engine
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Engine
  name: Engine
  nameWithType: NetworkSandbox.Engine
  fullName: Netick.Unity.NetworkSandbox.Engine
- uid: Netick.NetickEngine
  commentId: T:Netick.NetickEngine
  parent: Netick
  isExternal: true
  href: Netick.NetickEngine.html
  name: NetickEngine
  nameWithType: NetickEngine
  fullName: Netick.NetickEngine
- uid: Netick.Unity.NetworkSandbox.StartMode*
  commentId: Overload:Netick.Unity.NetworkSandbox.StartMode
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_StartMode
  name: StartMode
  nameWithType: NetworkSandbox.StartMode
  fullName: Netick.Unity.NetworkSandbox.StartMode
- uid: Netick.NetickStartMode
  commentId: T:Netick.NetickStartMode
  parent: Netick
  isExternal: true
  href: Netick.NetickStartMode.html
  name: NetickStartMode
  nameWithType: NetickStartMode
  fullName: Netick.NetickStartMode
- uid: Netick.Unity.NetworkSandbox.IsRunning*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsRunning
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsRunning
  name: IsRunning
  nameWithType: NetworkSandbox.IsRunning
  fullName: Netick.Unity.NetworkSandbox.IsRunning
- uid: Netick.Unity.NetworkSandbox.IsServer*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsServer
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsServer
  name: IsServer
  nameWithType: NetworkSandbox.IsServer
  fullName: Netick.Unity.NetworkSandbox.IsServer
- uid: Netick.Unity.NetworkSandbox.IsClient*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsClient
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsClient
  name: IsClient
  nameWithType: NetworkSandbox.IsClient
  fullName: Netick.Unity.NetworkSandbox.IsClient
- uid: Netick.Unity.NetworkSandbox.IsHost*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsHost
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsHost
  name: IsHost
  nameWithType: NetworkSandbox.IsHost
  fullName: Netick.Unity.NetworkSandbox.IsHost
- uid: Netick.Unity.NetworkSandbox.IsPlayer*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsPlayer
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsPlayer
  name: IsPlayer
  nameWithType: NetworkSandbox.IsPlayer
  fullName: Netick.Unity.NetworkSandbox.IsPlayer
- uid: Netick.Unity.NetworkSandbox.Config*
  commentId: Overload:Netick.Unity.NetworkSandbox.Config
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Config
  name: Config
  nameWithType: NetworkSandbox.Config
  fullName: Netick.Unity.NetworkSandbox.Config
- uid: Netick.Unity.NetickConfig
  commentId: T:Netick.Unity.NetickConfig
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetickConfig.html
  name: NetickConfig
  nameWithType: NetickConfig
  fullName: Netick.Unity.NetickConfig
- uid: UnityEngine.PhysicsScene2D
  commentId: T:UnityEngine.PhysicsScene2D
  isExternal: true
  name: PhysicsScene2D
  nameWithType: PhysicsScene2D
  fullName: UnityEngine.PhysicsScene2D
- uid: UnityEngine.Physics2D
  commentId: T:UnityEngine.Physics2D
  isExternal: true
- uid: Netick.Unity.NetworkSandbox.Physics2D*
  commentId: Overload:Netick.Unity.NetworkSandbox.Physics2D
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Physics2D
  name: Physics2D
  nameWithType: NetworkSandbox.Physics2D
  fullName: Netick.Unity.NetworkSandbox.Physics2D
- uid: UnityEngine.PhysicsScene
  commentId: T:UnityEngine.PhysicsScene
  isExternal: true
  name: PhysicsScene
  nameWithType: PhysicsScene
  fullName: UnityEngine.PhysicsScene
- uid: UnityEngine.Physics
  commentId: T:UnityEngine.Physics
  isExternal: true
- uid: Netick.Unity.NetworkSandbox.Physics*
  commentId: Overload:Netick.Unity.NetworkSandbox.Physics
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Physics
  name: Physics
  nameWithType: NetworkSandbox.Physics
  fullName: Netick.Unity.NetworkSandbox.Physics
- uid: Netick.Unity.NetworkSandbox.Scene*
  commentId: Overload:Netick.Unity.NetworkSandbox.Scene
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Scene
  name: Scene
  nameWithType: NetworkSandbox.Scene
  fullName: Netick.Unity.NetworkSandbox.Scene
- uid: Netick.Unity.NetworkSandbox.PhysicsPrediction*
  commentId: Overload:Netick.Unity.NetworkSandbox.PhysicsPrediction
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_PhysicsPrediction
  name: PhysicsPrediction
  nameWithType: NetworkSandbox.PhysicsPrediction
  fullName: Netick.Unity.NetworkSandbox.PhysicsPrediction
- uid: Netick.Unity.NetworkSandbox.ServerEndPoint*
  commentId: Overload:Netick.Unity.NetworkSandbox.ServerEndPoint
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ServerEndPoint
  name: ServerEndPoint
  nameWithType: NetworkSandbox.ServerEndPoint
  fullName: Netick.Unity.NetworkSandbox.ServerEndPoint
- uid: Netick.IEndPoint
  commentId: T:Netick.IEndPoint
  parent: Netick
  isExternal: true
  href: Netick.IEndPoint.html
  name: IEndPoint
  nameWithType: IEndPoint
  fullName: Netick.IEndPoint
- uid: Netick.Unity.NetworkSandbox.IsConnected*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsConnected
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsConnected
  name: IsConnected
  nameWithType: NetworkSandbox.IsConnected
  fullName: Netick.Unity.NetworkSandbox.IsConnected
- uid: Netick.Unity.NetworkSandbox.Transport*
  commentId: Overload:Netick.Unity.NetworkSandbox.Transport
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Transport
  name: Transport
  nameWithType: NetworkSandbox.Transport
  fullName: Netick.Unity.NetworkSandbox.Transport
- uid: Netick.NetworkTransport
  commentId: T:Netick.NetworkTransport
  parent: Netick
  isExternal: true
  href: Netick.NetworkTransport.html
  name: NetworkTransport
  nameWithType: NetworkTransport
  fullName: Netick.NetworkTransport
- uid: Netick.Unity.NetworkSandbox.Players*
  commentId: Overload:Netick.Unity.NetworkSandbox.Players
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Players
  name: Players
  nameWithType: NetworkSandbox.Players
  fullName: Netick.Unity.NetworkSandbox.Players
- uid: System.Collections.Generic.IReadOnlyList{Netick.NetworkPlayerId}
  commentId: T:System.Collections.Generic.IReadOnlyList{Netick.NetworkPlayerId}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  name: IReadOnlyList<NetworkPlayerId>
  nameWithType: IReadOnlyList<NetworkPlayerId>
  fullName: System.Collections.Generic.IReadOnlyList<Netick.NetworkPlayerId>
  nameWithType.vb: IReadOnlyList(Of NetworkPlayerId)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of Netick.NetworkPlayerId)
  name.vb: IReadOnlyList(Of NetworkPlayerId)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: <
  - uid: Netick.NetworkPlayerId
    name: NetworkPlayerId
    isExternal: true
    href: Netick.NetworkPlayerId.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlylist-1
  - name: (
  - name: Of
  - name: " "
  - uid: Netick.NetworkPlayerId
    name: NetworkPlayerId
    isExternal: true
    href: Netick.NetworkPlayerId.html
  - name: )
- uid: Netick.Unity.NetworkSandbox.ConnectedServer*
  commentId: Overload:Netick.Unity.NetworkSandbox.ConnectedServer
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ConnectedServer
  name: ConnectedServer
  nameWithType: NetworkSandbox.ConnectedServer
  fullName: Netick.Unity.NetworkSandbox.ConnectedServer
- uid: Netick.Unity.NetworkSandbox.Objects*
  commentId: Overload:Netick.Unity.NetworkSandbox.Objects
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Objects
  name: Objects
  nameWithType: NetworkSandbox.Objects
  fullName: Netick.Unity.NetworkSandbox.Objects
- uid: System.Collections.Generic.IReadOnlyDictionary{System.Int32,Netick.Unity.NetworkObject}
  commentId: T:System.Collections.Generic.IReadOnlyDictionary{System.Int32,Netick.Unity.NetworkObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyDictionary`2
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<int, NetworkObject>
  nameWithType: IReadOnlyDictionary<int, NetworkObject>
  fullName: System.Collections.Generic.IReadOnlyDictionary<int, Netick.Unity.NetworkObject>
  nameWithType.vb: IReadOnlyDictionary(Of Integer, NetworkObject)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of Integer, Netick.Unity.NetworkObject)
  name.vb: IReadOnlyDictionary(Of Integer, NetworkObject)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - uid: System.Int32
    name: int
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: Netick.Unity.NetworkObject
    name: NetworkObject
    isExternal: true
    href: Netick.Unity.NetworkObject.html
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - uid: System.Int32
    name: Integer
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.int32
  - name: ','
  - name: " "
  - uid: Netick.Unity.NetworkObject
    name: NetworkObject
    isExternal: true
    href: Netick.Unity.NetworkObject.html
  - name: )
- uid: System.Collections.Generic.IReadOnlyDictionary`2
  commentId: T:System.Collections.Generic.IReadOnlyDictionary`2
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  name: IReadOnlyDictionary<TKey, TValue>
  nameWithType: IReadOnlyDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>
  nameWithType.vb: IReadOnlyDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IReadOnlyDictionary(Of TKey, TValue)
  name.vb: IReadOnlyDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: <
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyDictionary`2
    name: IReadOnlyDictionary
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.ireadonlydictionary-2
  - name: (
  - name: Of
  - name: " "
  - name: TKey
  - name: ','
  - name: " "
  - name: TValue
  - name: )
- uid: Netick.Unity.NetworkSandbox.InterestManagement*
  commentId: Overload:Netick.Unity.NetworkSandbox.InterestManagement
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_InterestManagement
  name: InterestManagement
  nameWithType: NetworkSandbox.InterestManagement
  fullName: Netick.Unity.NetworkSandbox.InterestManagement
- uid: Netick.InterestManagement
  commentId: T:Netick.InterestManagement
  parent: Netick
  isExternal: true
  href: Netick.InterestManagement.html
  name: InterestManagement
  nameWithType: InterestManagement
  fullName: Netick.InterestManagement
- uid: Netick.Unity.NetworkSandbox.LocalPlayer*
  commentId: Overload:Netick.Unity.NetworkSandbox.LocalPlayer
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_LocalPlayer
  name: LocalPlayer
  nameWithType: NetworkSandbox.LocalPlayer
  fullName: Netick.Unity.NetworkSandbox.LocalPlayer
- uid: Netick.Unity.NetworkSandbox.LocalInterpolation*
  commentId: Overload:Netick.Unity.NetworkSandbox.LocalInterpolation
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_LocalInterpolation
  name: LocalInterpolation
  nameWithType: NetworkSandbox.LocalInterpolation
  fullName: Netick.Unity.NetworkSandbox.LocalInterpolation
- uid: Netick.LocalInterpolation
  commentId: T:Netick.LocalInterpolation
  parent: Netick
  isExternal: true
  href: Netick.LocalInterpolation.html
  name: LocalInterpolation
  nameWithType: LocalInterpolation
  fullName: Netick.LocalInterpolation
- uid: Netick.Unity.NetworkSandbox.RemoteInterpolation*
  commentId: Overload:Netick.Unity.NetworkSandbox.RemoteInterpolation
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_RemoteInterpolation
  name: RemoteInterpolation
  nameWithType: NetworkSandbox.RemoteInterpolation
  fullName: Netick.Unity.NetworkSandbox.RemoteInterpolation
- uid: Netick.RemoteInterpolation
  commentId: T:Netick.RemoteInterpolation
  parent: Netick
  isExternal: true
  href: Netick.RemoteInterpolation.html
  name: RemoteInterpolation
  nameWithType: RemoteInterpolation
  fullName: Netick.RemoteInterpolation
- uid: Netick.Unity.NetworkSandbox.Timer*
  commentId: Overload:Netick.Unity.NetworkSandbox.Timer
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Timer
  name: Timer
  nameWithType: NetworkSandbox.Timer
  fullName: Netick.Unity.NetworkSandbox.Timer
- uid: Netick.SimulationClock
  commentId: T:Netick.SimulationClock
  parent: Netick
  isExternal: true
  href: Netick.SimulationClock.html
  name: SimulationClock
  nameWithType: SimulationClock
  fullName: Netick.SimulationClock
- uid: UnityEngine.Time.fixedDeltaTime
  commentId: P:UnityEngine.Time.fixedDeltaTime
  isExternal: true
- uid: Netick.Unity.NetworkSandbox.FixedDeltaTime*
  commentId: Overload:Netick.Unity.NetworkSandbox.FixedDeltaTime
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_FixedDeltaTime
  name: FixedDeltaTime
  nameWithType: NetworkSandbox.FixedDeltaTime
  fullName: Netick.Unity.NetworkSandbox.FixedDeltaTime
- uid: UnityEngine.Time.deltaTime
  commentId: P:UnityEngine.Time.deltaTime
  isExternal: true
- uid: Netick.Unity.NetworkSandbox.DeltaTime*
  commentId: Overload:Netick.Unity.NetworkSandbox.DeltaTime
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_DeltaTime
  name: DeltaTime
  nameWithType: NetworkSandbox.DeltaTime
  fullName: Netick.Unity.NetworkSandbox.DeltaTime
- uid: UnityEngine.Time.timeScale
  commentId: P:UnityEngine.Time.timeScale
  isExternal: true
- uid: Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime*
  commentId: Overload:Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ScaledFixedDeltaTime
  name: ScaledFixedDeltaTime
  nameWithType: NetworkSandbox.ScaledFixedDeltaTime
  fullName: Netick.Unity.NetworkSandbox.ScaledFixedDeltaTime
- uid: Netick.LocalInterpolation.Time
  commentId: P:Netick.LocalInterpolation.Time
  isExternal: true
  name: Time
  nameWithType: LocalInterpolation.Time
  fullName: Netick.LocalInterpolation.Time
- uid: Netick.Unity.NetworkSandbox.NetworkTime*
  commentId: Overload:Netick.Unity.NetworkSandbox.NetworkTime
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_NetworkTime
  name: NetworkTime
  nameWithType: NetworkSandbox.NetworkTime
  fullName: Netick.Unity.NetworkSandbox.NetworkTime
- uid: Netick.Unity.NetworkSandbox.IsResimulating
  commentId: P:Netick.Unity.NetworkSandbox.IsResimulating
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsResimulating
  name: IsResimulating
  nameWithType: NetworkSandbox.IsResimulating
  fullName: Netick.Unity.NetworkSandbox.IsResimulating
- uid: Netick.Unity.NetworkSandbox.Tick*
  commentId: Overload:Netick.Unity.NetworkSandbox.Tick
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Tick
  name: Tick
  nameWithType: NetworkSandbox.Tick
  fullName: Netick.Unity.NetworkSandbox.Tick
- uid: Netick.Unity.NetworkSandbox.AuthoritativeTick*
  commentId: Overload:Netick.Unity.NetworkSandbox.AuthoritativeTick
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_AuthoritativeTick
  name: AuthoritativeTick
  nameWithType: NetworkSandbox.AuthoritativeTick
  fullName: Netick.Unity.NetworkSandbox.AuthoritativeTick
- uid: Netick.Unity.NetworkSandbox.PredictedTick*
  commentId: Overload:Netick.Unity.NetworkSandbox.PredictedTick
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_PredictedTick
  name: PredictedTick
  nameWithType: NetworkSandbox.PredictedTick
  fullName: Netick.Unity.NetworkSandbox.PredictedTick
- uid: Netick.Unity.NetworkSandbox.IsResimulating*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsResimulating
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsResimulating
  name: IsResimulating
  nameWithType: NetworkSandbox.IsResimulating
  fullName: Netick.Unity.NetworkSandbox.IsResimulating
- uid: Netick.Unity.NetworkSandbox.ResimulationCount*
  commentId: Overload:Netick.Unity.NetworkSandbox.ResimulationCount
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ResimulationCount
  name: ResimulationCount
  nameWithType: NetworkSandbox.ResimulationCount
  fullName: Netick.Unity.NetworkSandbox.ResimulationCount
- uid: Netick.Unity.NetworkSandbox.ResimulationStep*
  commentId: Overload:Netick.Unity.NetworkSandbox.ResimulationStep
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_ResimulationStep
  name: ResimulationStep
  nameWithType: NetworkSandbox.ResimulationStep
  fullName: Netick.Unity.NetworkSandbox.ResimulationStep
- uid: Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsFirstNetworkFixedUpdateCall
  name: IsFirstNetworkFixedUpdateCall
  nameWithType: NetworkSandbox.IsFirstNetworkFixedUpdateCall
  fullName: Netick.Unity.NetworkSandbox.IsFirstNetworkFixedUpdateCall
- uid: Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall*
  commentId: Overload:Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_IsLastNetworkFixedUpdateCall
  name: IsLastNetworkFixedUpdateCall
  nameWithType: NetworkSandbox.IsLastNetworkFixedUpdateCall
  fullName: Netick.Unity.NetworkSandbox.IsLastNetworkFixedUpdateCall
- uid: Netick.Unity.NetworkSandbox.InKBps*
  commentId: Overload:Netick.Unity.NetworkSandbox.InKBps
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_InKBps
  name: InKBps
  nameWithType: NetworkSandbox.InKBps
  fullName: Netick.Unity.NetworkSandbox.InKBps
- uid: Netick.Unity.NetworkSandbox.OutKBps*
  commentId: Overload:Netick.Unity.NetworkSandbox.OutKBps
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_OutKBps
  name: OutKBps
  nameWithType: NetworkSandbox.OutKBps
  fullName: Netick.Unity.NetworkSandbox.OutKBps
- uid: Netick.Unity.NetworkSandbox.InPacketLoss*
  commentId: Overload:Netick.Unity.NetworkSandbox.InPacketLoss
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_InPacketLoss
  name: InPacketLoss
  nameWithType: NetworkSandbox.InPacketLoss
  fullName: Netick.Unity.NetworkSandbox.InPacketLoss
- uid: Netick.Unity.NetworkSandbox.OutPacketLoss*
  commentId: Overload:Netick.Unity.NetworkSandbox.OutPacketLoss
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_OutPacketLoss
  name: OutPacketLoss
  nameWithType: NetworkSandbox.OutPacketLoss
  fullName: Netick.Unity.NetworkSandbox.OutPacketLoss
- uid: Netick.Unity.NetworkSandbox.InterpolationDelay*
  commentId: Overload:Netick.Unity.NetworkSandbox.InterpolationDelay
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_InterpolationDelay
  name: InterpolationDelay
  nameWithType: NetworkSandbox.InterpolationDelay
  fullName: Netick.Unity.NetworkSandbox.InterpolationDelay
- uid: Netick.Unity.NetworkSandbox.RTT*
  commentId: Overload:Netick.Unity.NetworkSandbox.RTT
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_RTT
  name: RTT
  nameWithType: NetworkSandbox.RTT
  fullName: Netick.Unity.NetworkSandbox.RTT
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: Netick.Unity.NetworkSandbox.Monitor*
  commentId: Overload:Netick.Unity.NetworkSandbox.Monitor
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Monitor
  name: Monitor
  nameWithType: NetworkSandbox.Monitor
  fullName: Netick.Unity.NetworkSandbox.Monitor
- uid: Netick.Monitor
  commentId: T:Netick.Monitor
  parent: Netick
  isExternal: true
  href: Netick.Monitor.html
  name: Monitor
  nameWithType: Monitor
  fullName: Netick.Monitor
- uid: Netick.Unity.NetworkSandbox.Events*
  commentId: Overload:Netick.Unity.NetworkSandbox.Events
  isExternal: true
  href: Netick.Unity.NetworkSandbox.html#Netick_Unity_NetworkSandbox_Events
  name: Events
  nameWithType: NetworkSandbox.Events
  fullName: Netick.Unity.NetworkSandbox.Events
- uid: Netick.Unity.NetworkCallbacks
  commentId: T:Netick.Unity.NetworkCallbacks
  parent: Netick.Unity
  isExternal: true
  href: Netick.Unity.NetworkCallbacks.html
  name: NetworkCallbacks
  nameWithType: NetworkCallbacks
  fullName: Netick.Unity.NetworkCallbacks
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action
  name: Action
  nameWithType: Action
  fullName: System.Action
